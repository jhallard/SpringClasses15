head	1.11;
access;
symbols;
locks;
comment	@// @;


1.11
date	2014.07.09.20.00.06;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.08.20.02.03.59;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.08.16.20.35.31;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.08.16.19.48.11;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.08.16.19.38.32;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.08.13.01.55.17;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.08.08.19.31.45;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.08.08.19.29.28;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.08.08.19.03.25;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.08.07.01.20.49;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.08.06.23.49.37;	author -;	state -;
branches;
next	;


desc
@@


1.11
log
@-
@
text
@// $Id: testint.cpp,v 1.10 2013-08-19 19:03:59-07 - - $

#include <iostream>
#include <sstream>
#include <string>

using namespace std;

#include "xvector.h"

void printvec (const string& label, const xvector<int>& vec) {
   cout << label << ":";
   for (size_t i {0}; i < vec.size(); ++i) {
      cout << " [" << i << "]" << vec[i];
   }
   cout << endl;
}

int main() {
   xvector<int> aa {10, 20, 30, 40, 50, 60, 70, 80, 90};
   xvector<int> va;
   cout << "sizeof aa = " << sizeof aa << endl;
   cout << "sizeof va = " << sizeof va << endl;

   printvec ("loop1(aa)", aa);
   for (auto& i: aa) va.push_back (i);

   for (auto i = va.cbegin(); i != va.cend(); ++i) {
      cout << "loop2: " << &*i << "->" << *i << endl;
   }

   printvec ("loop3(va)", va);

   xvector<int> vb (va);
   xvector<int>::iterator j {vb.begin()};
   xvector<int>::const_iterator cj {j};

   ++cj;
   cout << &*cj << ": " << *j << " " << *cj << endl;

   //xvector<int>::iterator k = cj;
   //error: conversion from 'xvector_iterator<const int>'
   //to non-scalar type 'xvector_iterator<int>' requested

   xvector<int> bb {10, 20, 30, 45};
   printvec ("compare(aa)", aa);
   printvec ("compare(bb)", bb);
   cout << "aa < bb = " << boolalpha << (aa < bb) << endl;

   return 0;
}

@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.9 2013-08-16 13:35:31-07 - - $
d11 8
d25 2
a26 6
   cout << "loop1:";
   for (size_t i {0}; i != aa.size(); ++i) {
      cout << " [" << i << "]" << aa[i];
      va.push_back(aa[i]);
   }
   cout << endl;
d32 1
a32 5
   cout << "loop3:";
   for (size_t i {0}; i < va.size(); ++i) {
      cout << " [" << i << "]" << va[i];
   }
   cout << endl;
d45 5
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.8 2013-08-16 12:48:11-07 - - $
d12 1
a12 1
   xvector<int> aa {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200};
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.7 2013-08-16 12:38:32-07 - - $
d25 1
a25 1
      cout << "loop2: [" << &*i << "]" << *i << endl;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.6 2013-08-12 18:55:17-07 - - $
d36 2
a37 1
   xvector<int>::const_iterator cj = j;
d41 4
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.5 2013-08-08 12:31:45-07 - - $
d36 1
a36 1
   xvector<int>::const_iterator cj {j};
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.4 2013-08-08 12:29:28-07 - - $
d18 1
a18 1
   for (size_t i = 0; i != aa.size(); ++i) {
d29 1
a29 1
   for (size_t i = 0; i < va.size(); ++i) {
d35 2
a36 2
   xvector<int>::iterator j = vb.begin();
   xvector<int>::const_iterator cj = j;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.3 2013-08-08 12:03:25-07 - - $
d22 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.2 2013-08-06 18:20:49-07 - - $
d14 2
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: testint.cpp,v 1.1 2013-08-06 16:49:37-07 - - $
a20 1
   int ct = 0;
d22 1
a22 2
      if (ct++ % 4 == 0) cout << endl << "loop2:";
      cout << " [" << &*i << "]" << *i;
a23 1
   cout << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: vectorex_test.cpp,v 1.17 2013-08-06 13:24:31-07 - - $
d9 1
a9 1
#include "vectorex.h"
d12 2
a13 2
   vectorex<int> aa {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200};
   vectorex<int> va;
d34 3
a36 3
   vectorex<int> vb (va);
   vectorex<int>::iterator j = vb.begin();
   vectorex<int>::const_iterator cj = j;
@

head	1.7;
access;
symbols;
locks;
comment	@// @;


1.7
date	2014.05.30.02.02.56;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.08.13.21.58.19;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.08.13.01.55.17;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.08.08.19.03.25;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.08.07.20.37.20;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.08.07.01.20.49;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.08.07.00.16.19;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: testvector.cpp,v 1.6 2013-08-13 14:58:19-07 - - $

#include <iomanip>
#include <iostream>

using namespace std;

#include "xvector.h"

using dvector = xvector<double>;
using matrix = xvector<dvector>;

matrix outer_product (const dvector &v1, const dvector &v2) {
   matrix m (v1.size(), dvector (v2.size()));
   for (size_t i {0}; i < v1.size(); ++i) {
      for (size_t j {0}; j < v2.size(); ++j) {
         m[i][j] = v1[i] * v2[j];
      }
   }
   return m;
}

void print (const matrix &m) {
   cout << fixed << setprecision(0);
   for (size_t i {0}; i < m.size(); ++i) {
      for (size_t j {0}; j < m[i].size(); ++j) {
         cout << setw(4) << m[i][j];
      }
      cout << endl;
   }
}

int main() {
   dvector v1 {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29};
   dvector v2 {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30};
   matrix m = outer_product (v1, v2);
   print (m);
   cout << "sizeof (dvector) = " << sizeof (dvector) << endl;
   cout << "sizeof (matrix)  = " << sizeof (matrix) << endl;
   return 0;
}

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: testvector.cpp,v 1.5 2013-08-12 18:55:17-07 - - $
d10 2
a11 2
typedef xvector<double> dvector;
typedef xvector<dvector> matrix;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: testvector.cpp,v 1.4 2013-08-08 12:03:25-07 - - $
d24 1
a24 1
   cout << fixed << setprecision(1);
d27 1
a27 1
         cout << setw(6) << m[i][j];
d34 2
a35 2
   dvector v1 {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25};
   dvector v2 {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26};
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: testvector.cpp,v 1.3 2013-08-07 13:37:20-07 - - $
d15 2
a16 2
   for (size_t i = 0; i < v1.size(); ++i) {
      for (size_t j = 0; j < v2.size(); ++j) {
d25 2
a26 2
   for (size_t i = 0; i < m.size(); ++i) {
      for (size_t j = 0; j < m[i].size(); ++j) {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: testvector.cpp,v 1.2 2013-08-06 18:20:49-07 - - $
d34 2
a35 2
   dvector v1 {1, 3, 5, 7, 9, 11};
   dvector v2 {2, 4, 6, 8, 10, 12};
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: testvector.cpp,v 1.1 2013-08-06 17:16:19-07 - - $
d38 2
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d8 1
a8 1
#include "vectorex.h"
d10 2
a11 2
typedef vectorex<double> dvector;
typedef vectorex<dvector> matrix;
@

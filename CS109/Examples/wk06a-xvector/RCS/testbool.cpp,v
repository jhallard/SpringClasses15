head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2013.08.13.01.55.17;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.08.08.19.06.51;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.08.08.19.04.20;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.08.08.19.03.25;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.08.07.20.29.28;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.08.07.19.57.55;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: testbool.cpp,v 1.5 2013-08-08 12:06:51-07 - - $

//
// Sieve of Eratosthenes.
// To Kóskinon 'Eratosthénous.
//

#include <iomanip>
#include <iostream>

using namespace std;

#include "xvector.h"

int main () {
   const size_t rows {32};
   const size_t columns {16};
   const size_t num_width {4};
   xvector<bool> sieve (rows * columns, true);
   sieve[0] = sieve[1] = false;

   for (size_t prime {2}; prime * prime < sieve.size(); ++prime) {
      if (sieve[prime]) {
         for (size_t itor {prime * prime};
              itor < sieve.size(); itor += prime) {
            sieve[itor] = false;
         }
      }
   }

   size_t prime_count {0};
   size_t col_count {0};
   cout << "Sieve of Eratosthenes." << endl;
   cout << "To Kóskinon 'Eratosthénous." << endl;
   for (size_t itor {0}; itor < rows * columns; ++itor) {
      cout << setw (num_width);
      if (sieve[itor]) { cout << itor; ++prime_count; }
                  else { cout << "."; }
      if (++col_count % columns == 0) cout << endl;
   }
   cout << "Sieve size: " << sieve.size() << ".  ";
   cout << "Primes found: " << prime_count << "." << endl;

   return 0;
}

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: testbool.cpp,v 1.4 2013-08-08 12:04:20-07 - - $
d16 3
a18 3
   const size_t rows = 32;
   const size_t columns = 16;
   const size_t num_width = 4;
d22 1
a22 1
   for (size_t prime = 2; prime * prime < sieve.size(); ++prime) {
d24 1
a24 1
         for (size_t itor = prime * prime;
d31 2
a32 2
   size_t prime_count = 0;
   size_t col_count = 0;
d35 1
a35 1
   for (size_t itor = 0; itor < rows * columns; ++itor) {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: testbool.cpp,v 1.3 2013-08-08 12:03:25-07 - - $
d34 1
d41 2
a42 1
   cout << "Primes found: " << prime_count << endl;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: testbool.cpp,v 1.2 2013-08-07 13:29:28-07 - - $
d16 1
a16 1
   const size_t rows = 20;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: testbool.cpp,v 1.1 2013-08-07 12:57:55-07 - - $
d16 5
a20 1
   xvector<bool> sieve (1000, true);
d31 8
a38 6
   size_t count = 0;
   for (size_t itor = 2; itor < sieve.size(); ++itor) {
      if (sieve[itor]) {
         if (count++ % 15 == 0) cout << endl;
         cout << setw(5) << itor;
      }
d40 1
a40 2
   cout << endl;
   cout << "Primes found: " << count << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: eratosthenes.cpp,v 1.2 2013-08-06 18:20:49-07 - - $
d5 1
a5 1
// To Koskinon Eratosthenous.
d15 1
a15 2
int main (int argc, char** argv) {
   (void) argc; // warning: unused parameter 'argc'
d35 1
a35 1
   cout << argv[0] << ": primes found: " << count << endl;
@

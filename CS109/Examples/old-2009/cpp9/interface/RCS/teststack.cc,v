head	1.5;
access;
symbols;
locks;
comment	@// @;


1.5
date	2009.03.07.04.04.35;	author -;	state -;
branches;
next	1.4;

1.4
date	2009.03.06.23.00.50;	author -;	state -;
branches;
next	1.3;

1.3
date	2009.03.06.22.55.14;	author -;	state -;
branches;
next	1.2;

1.2
date	2009.03.06.22.54.04;	author -;	state -;
branches;
next	1.1;

1.1
date	2009.03.06.22.17.05;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: teststack.cc,v 1.4 2009-03-06 15:00:50-08 - - $

#include <cstdlib>
#include <iostream>
#include <string>
#include <typeinfo>
#include <vector>

using namespace std;

#include "arraystack.h"
#include "linkedstack.h"
#include "stack.h"

template <class item_t>
void teststack (stack <item_t> &astack, const vector<item_t> &args) {
   vector<item_t>::const_iterator itor = args.begin ();
   const vector<item_t>::const_iterator end = args.end ();
   cout << endl;
   cout << "stack type: " << endl << typeid (astack).name () << endl;
   cout << "vector type: " << endl << typeid (args).name () << endl;
   for (; itor != end; ++itor) {
      cout << "Pushing: " << *itor << endl;
      astack.push (*itor);
   }
   while (! astack.empty ()) {
      cout << "Popping: " << astack.pop () << endl;
   }
   
}

int main (int argc, char **argv) {
   vector<string> args;
   for (int argi = 1; argi < argc; ++argi) args.push_back (argv[argi]);
   teststack (arraystack<string> (), args);
   teststack (linkedstack<string> (), args);
   return EXIT_SUCCESS;
}

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: teststack.cc,v 1.3 2009-03-06 14:55:14-08 - - $
d20 2
a21 2
   cout << "stack type: " << typeid (astack).name () << endl;
   cout << "vector type: " << typeid (args).name () << endl;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: teststack.cc,v 1.2 2009-03-06 14:54:04-08 - - $
d20 2
a21 2
   cout << "Test stack: " << typeid (astack).name () << endl;
   cout << "Test stack: " << typeid (args).name () << endl;
d34 1
a34 1
   for (int argi = 0; argi < argc; ++argi) args.push_back (argv[argi]);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id$
d16 1
a16 1
void teststack (stack <item_t> &thestack, const vector<item_t> &args) {
d19 3
a21 1
   cout << endl << "Test stack: " << typeid (thestack).name () << endl;
d24 1
a24 1
      thestack.push (*itor);
d26 2
a27 2
   while (! thestack.empty ()) {
      cout << "Popping: " << thestack.pop () << endl;
@


1.1
log
@-
@
text
@d1 37
@

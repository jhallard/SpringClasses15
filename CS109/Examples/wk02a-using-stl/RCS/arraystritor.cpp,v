head	1.7;
access;
symbols;
locks;
comment	@// @;


1.7
date	2015.01.07.01.24.07;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.01.07.01.23.23;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.01.07.01.22.47;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.01.07.01.21.59;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.01.07.01.21.49;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.01.07.01.09.48;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.01.07.01.07.58;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: arraystritor.cpp,v 1.6 2015-01-06 17:23:23-08 - - $

//
// Array of string class with iterator.
//

#include <iostream>
#include <string>
using namespace std;

class arraystr {
   private:
      size_t size_;
      string* data_ {};
      arraystr() = delete;
      arraystr (arraystr&) = delete;
      arraystr (arraystr&&) = delete;
      arraystr& operator= (arraystr&) = delete;
      arraystr& operator= (arraystr&&) = delete;
   public:
      class iterator {
         friend class arraystr;
         private:
            string* pointee_;
            iterator (string*);
         public:
            bool operator!= (iterator&);
            string& operator*();
            iterator& operator++();
      };
      arraystr (size_t size);
      ~arraystr();
      iterator begin();
      iterator end();
      string& operator[] (size_t index);
      size_t size();
};

arraystr::arraystr (size_t size):
            size_(size),
            data_(new string[size]) {
}

arraystr::~arraystr() {
   delete[] data_;
}

arraystr::iterator arraystr::begin() {
   return iterator (&data_[0]);
}

arraystr::iterator arraystr::end() {
   return iterator (&data_[size_]);
}

string& arraystr::operator[] (size_t index) {
   return &data_[index];
}

size_t arraystr::size() {
   return size_;
}

arraystr::iterator::iterator (string* pointee):
            pointee_(pointee) {
}

bool arraystr::iterator::operator!= (iterator& that) {
   return this->pointee_ != that.pointee_;
}

string& arraystr::iterator::operator*() {
   return *pointee_;
}

arraystr::iterator& arraystr::iterator::operator++() {
   ++pointee_;
   return *this;
}

int main (int argc, char** argv) {
   arraystr as (argc - 1);
   for (int index = 1; index < argc; ++index) {
      as[index - 1] = argv[index];
   }
   for (auto itor = as.begin(); itor != as.end(); ++itor) {
      cout << *itor << endl;
   }
   return 0;
}

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: arraystritor.cpp,v 1.5 2015-01-06 17:22:47-08 - - $
d25 1
a25 1
            iterator (const string*);
d27 1
a27 1
            bool operator!= (const iterator&);
d68 1
a68 1
bool arraystr::iterator::operator!= (const iterator& that) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: arraystritor.cpp,v 1.4 2015-01-06 17:21:59-08 - - $
d64 1
a64 1
arraystr::iterator::iterator (const string* pointee):
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: arraystritor.cpp,v 1.3 2015-01-06 17:21:49-08 - - $
d60 1
a60 1
size_t size() {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: arraystritor.cpp,v 1.1 2015-01-06 17:07:58-08 - - $
d13 1
a13 1
      size_t size_
@


1.2
log
@-
@
text
@d13 2
a14 1
      string* data {};
a20 2
      arraystr (size_t size);
      ~arraystr();
d24 1
d29 1
d31 2
d35 2
d38 54
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: arrayitor.cpp,v 1.2 2015-01-06 17:07:20-08 - - $
d4 1
a4 2
// arrayitor - Simple example of an encapsulated array class
// with an iterator.
d11 1
a11 1
class array {
d14 5
a18 5
      array() = delete;
      array (array&) = delete;
      array (array&&) = delete;
      array& operator= (array&) = delete;
      array& operator= (array&&) = delete;
d20 2
a21 2
      array (size_t size);
      ~array();
d23 7
a29 3
         bool operator!= (const iterator&);
         string& operator*();
      }
@

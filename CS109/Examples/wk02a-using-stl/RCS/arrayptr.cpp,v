head	1.4;
access;
symbols;
locks;
comment	@// @;


1.4
date	2015.01.07.23.50.18;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.09.20.32.21;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.09.01.01.36;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.10.00.40.43;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: arrayptr.cpp,v 1.3 2014-04-09 13:32:21-07 - - $

//
// Print out addresses of array elements.  Show how to use a 
// pointer to iterate over an array instead of an index.  Show
// how to get the index by subtracting pointers.
//
// Note:  + and - have higher precedences than << and >>.
//

#include <cstdlib>
#include <iomanip>
#include <iostream>

using namespace std;

int main (int argc, char **argv) {
   cout << "argv = " << static_cast<void*> (argv) << endl;
   for (char** itor = argv; itor != &argv[argc]; ++itor) {
      cout << "argv[" << itor - argv << "] = "
           << static_cast<void*> (*itor)
           << " -> \"" << *itor << "\"" << endl;
   }
   cout << "main = " << reinterpret_cast<void*> (main) << endl;
   return EXIT_SUCCESS;
}

//TEST// ./arrayptr foo bar baz qux quux >arrayptr.lis 2>&1
//TEST// mkpspdf arrayptr.ps arrayptr.cpp* arrayptr.lis

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.2 2013-01-08 17:01:36-08 - - $
d19 1
a19 1
   for (char **itor = argv; itor != argv + argc; ++itor) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.1 2012-04-09 17:40:43-07 - - $
d28 1
a28 1
//TEST// runprogram.perl -x arrayptr.lis ./arrayptr foo bar baz qux quux
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.23 2012-04-05 16:49:36-07 - - $
d29 1
a29 1
//TEST// mkpspdf arrayptr.ps arrayptr.cpp arrayptr.lis
@

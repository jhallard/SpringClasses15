head	1.13;
access;
symbols;
locks;
comment	@# @;


1.13
date	2013.08.12.18.23.55;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.08.09.23.16.54;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.08.09.23.16.11;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.08.09.23.16.00;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.08.09.23.14.08;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.08.09.23.13.58;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.06.06.22.00.56;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.06.06.20.31.32;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.06.06.20.30.56;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.06.06.20.30.08;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.06.06.20.29.53;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.06.06.20.27.33;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.06.06.20.22.51;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@// $Id: sendreceive.java,v 1.12 2013-08-09 16:16:54-07 - - $

//
// Simple send receive example.  Start up two processes,
// receiver (server) which accepts messages and prints them,
// and a sender (client) which send messages.  Both loop
// indefinitely until killed.  
//    Usage: sendreceive port
// If the port is positive, server receiver.
// If the port is negative, client sender.
//

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;
import static java.lang.System.*;

class sendreceive {

   static void server_receiver (int port) {
      try {
         ServerSocket server = new ServerSocket (port);
         print_server_socket ("server: server socket", server);
         Socket client = server.accept();
         print_socket ("server: client socket", client);
         Scanner sockin = new Scanner (client.getInputStream());
         for (;;) {
            String line = sockin.nextLine();
            out.printf ("server: %s%n", line);
         }
      }catch (IOException exn) {
         out.printf ("server: %s%n", exn);
      }
   }

   static void client_sender (int port, String hostname) {
      try {
         Socket server = new Socket (hostname, port);
         print_socket ("client: server socket", server);
         PrintWriter sockout =
                     new PrintWriter (server.getOutputStream());
         for (int count = 0; ; ++count) {
            String line = "Message " + count;
            out.printf ("client: %s%n", line);
            sockout.printf ("%s%n", line);
            sockout.flush();
            if (sockout.checkError()) {
               out.printf ("sender: error: %s%n", server);
               break;
            }
            try {
               Thread.sleep (1000);
            }catch (InterruptedException exn) {
               out.printf ("client: %s%n", exn);
            }
         }
      }catch (IOException exn) {
         out.printf ("client: %s%n", exn);
      }
   }


   static void print_server_socket (String ident, ServerSocket socket) {
      out.printf ("%s: %s%n", ident, socket);
      out.printf ("%s: %s%n", "InetAddress", socket.getInetAddress());
      out.printf ("%s: %s%n", "LocalPort", socket.getLocalPort());
   }

   static void print_socket (String ident, Socket socket) {
      out.printf ("%s: %s%n", ident, socket);
      out.printf ("%s: %s%n", "InetAddress", socket.getInetAddress());
      out.printf ("%s: %s%n", "LocalAddress", socket.getLocalAddress());
      out.printf ("%s: %s%n", "LocalPort", socket.getLocalPort());
      out.printf ("%s: %s%n", "Port", socket.getPort());
   }

   public static void main (String[] args) {
      String hostname = args.length >= 2 ? args[1] : "localhost";
      if (args.length < 1) {
         out.printf ("Usage: sendreceive port [hostname]%n");
         exit (1);
      }
      int port = Integer.parseInt (args[0]);
      if (port > 0) server_receiver (port);
               else client_sender (- port, hostname);
   }
}

@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.11 2013-08-09 16:16:11-07 - - $
d39 1
a39 1
         Socket server = new Socket ("localhost", port);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.10 2013-08-09 16:16:00-07 - - $
d79 1
a79 1
      String hostname = args.length >= 2 ? args[2] : "localhost";
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.9 2013-08-09 16:14:08-07 - - $
d53 1
a53 1
               sleep (1000);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.8 2013-08-09 16:13:58-07 - - $
d53 1
a53 1
               Thread.currentThread().sleep (1000);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.7 2012-06-06 15:00:56-07 - - $
d86 1
a86 1
               else client_sender (- port);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.6 2012-06-06 13:31:32-07 - - $
d37 1
a37 1
   static void client_sender (int port) {
d79 5
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.5 2012-06-06 13:30:56-07 - - $
d63 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.4 2012-06-06 13:30:08-07 - - $
d64 1
a64 1
      out.printf ("%s: %s%n", socket);
d70 1
a70 1
      out.printf ("%s: %s%n", socket);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.3 2012-06-06 13:29:53-07 - - $
a65 1
      out.printf ("%s: %s%n", "LocalAddress", socket.getLocalAddress());
a66 1
      out.printf ("%s: %s%n", "Port", socket.getPort());
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.2 2012-06-06 13:27:33-07 - - $
d63 1
a63 1
   static void print_server_socket (String ident, Socket socket) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.1 2012-06-06 13:22:51-07 - - $
d24 1
a24 1
         print_socket ("server: server socket", server);
d63 8
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: sendreceive.java,v 1.8 2012-06-05 18:13:29-07 - - $
d24 1
a24 1
         out.printf ("server: server socket: %s%n", server);
d26 1
a26 1
         out.printf ("server: client socket: %s%n", client);
d40 1
a40 1
         out.printf ("client: server socket: %s%n", server);
d63 8
@

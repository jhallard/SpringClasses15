head	1.8;
access;
symbols;
locks;
comment	@# @;


1.8
date	2013.08.14.03.22.20;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.08.14.03.21.21;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.08.14.03.18.56;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.08.14.03.13.56;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.08.14.03.02.30;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.05.29.23.39.31;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.05.29.23.36.18;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.05.29.23.21.19;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: miniclient.java,v 1.7 2013-08-13 20:21:21-07 - - $

//
// Mini client.
//    Usage:  miniclient hostname hostport
// Reads stdin and copies to the port.  Then copies the answer
// back from the port to stdout.  Runs only in lock step with
// strict alternation for the server.
//

import java.io.*;
import java.net.*;
import java.util.*;
import static java.lang.System.*;

class miniclient {

   static void quit (String format, Object... params) {
      err.printf (format, params);
      exit (1);
   }

   static String ident (options opts) {
      return String.format ("%s: %s %d", opts.jarname,
                            opts.hostname, opts.portnumber);
   }

   static String get_jarname() {
      String jarpath = getProperty ("java.class.path");
      int lastslash = jarpath.lastIndexOf ('/');
      if (lastslash < 0) return jarpath;
      return jarpath.substring (lastslash + 1);
   }

   static class options {
      final String jarname = get_jarname();
      String hostname = "localhost";
      int portnumber;
      options (String[] args) {
         try {
            if (args.length < 1) throw new NumberFormatException ();
            portnumber = Integer.parseInt (args[0]);
            if (args.length > 1) hostname = args[1];
         }catch (NumberFormatException exn) {
            quit ("Usage: %s hostname portnumber%n", jarname);
         }
      }
   }


   public static void main (String[] args) {
      Scanner stdin = new Scanner (System.in);
      options opts = new options (args);
      try {
         Socket socket = new Socket (opts.hostname, opts.portnumber);
         out.printf ("%s: socket OK%n", ident (opts));
         Scanner serve_in = new Scanner (socket.getInputStream ());
         PrintWriter serve_out =
                     new PrintWriter (socket.getOutputStream ());
         for(;;) {
            out.printf ("%s: ", opts.jarname);
            if (! stdin.hasNextLine ()) break;
            String line = stdin.nextLine();
                  out.printf ("Stdin read: %s%n", line);
            serve_out.printf ("Stdin read: %s%n", line);
            serve_out.flush ();
            if (serve_in.hasNextLine ()) {
               out.printf ("Server said: %s%n", serve_in.nextLine ());
            }else {
               quit ("%s: no reply%n", ident (opts));
            }
         }
         socket.close ();
         out.printf ("%s: finished%n", ident (opts));
      }catch (IOException exn) {
         quit ("%s: %s%n", ident (opts), exn.getMessage());
      }catch (IllegalArgumentException exn) {
         quit ("%s: %s%n", ident (opts), exn.getMessage());
      }
   }

}

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: miniclient.java,v 1.6 2013-08-13 20:18:56-07 - - $
d61 1
a61 1
            out.printf ("%s: ", options.jarname);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: miniclient.java,v 1.5 2013-08-13 20:13:56-07 - - $
d60 3
a62 1
         while (stdin.hasNextLine ()) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: miniclient.java,v 1.4 2013-08-13 20:02:30-07 - - $
d61 3
a63 2
                  out.printf ("Stdin read: %s%n", stdin.nextLine ());
            serve_out.printf ("Stdin read: %s%n", stdin.nextLine ());
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: miniclient.java,v 1.3 2012-05-29 16:39:31-07 - - $
d37 1
a37 1
      String hostname;
d41 3
a43 3
            if (args.length != 2) throw new NumberFormatException ();
            hostname = args[0];
            portnumber = Integer.parseInt (args[1]);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: miniclient.java,v 1.2 2012-05-29 16:36:18-07 - - $
d61 2
a62 1
            serve_out.printf ("%s%n", stdin.nextLine ());
d65 1
a65 1
               out.printf ("Reply: %s%n", serve_in.nextLine ());
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: miniclient.java,v 1.1 2012-05-29 16:21:19-07 - - $
d36 1
a36 1
      final String jarname = getProperty ("java.class.path");
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: miniclient.java,v 1.35 2009-02-27 17:54:00-08 - - $
d24 1
a24 1
      return String.format ("%s: %s %d", opts.progname,
d28 7
d36 1
a36 1
      final String progname = "miniclient";
d45 1
a45 1
            quit ("Usage: %s hostname portnumber%n", progname);
d50 1
@

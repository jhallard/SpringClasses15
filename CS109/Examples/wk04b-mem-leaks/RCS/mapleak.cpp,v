head	1.14;
access;
symbols;
locks;
comment	@// @;


1.14
date	2015.01.26.22.35.42;	author -;	state -;
branches;
next	1.13;

1.13
date	2015.01.26.22.35.26;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.04.23.02.08.04;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.04.23.02.06.23;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.04.23.02.05.26;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.05.10.03.29.24;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.05.10.03.19.53;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.05.10.03.17.57;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.05.10.03.16.22;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.05.10.03.12.29;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.05.10.03.11.12;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.05.10.03.07.40;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.05.10.03.07.28;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.05.10.03.04.45;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// $Id: mapleak.cpp,v 1.13 2015-01-26 14:35:26-08 - - $

//
// Illustrate how leaks may happen for a map.
// Use argv to create a series of objects, each of which has a
// string field and which is put in a map.
// If the first argument is "-", erase all map entries.
//

#include <iostream>
#include <map>

using namespace std;

int seqct = 0;
struct object {
   int seqnr;
   string value;
   explicit object (const string& val): seqnr(++seqct), value(val) {}
};

int main (int argc, char** argv) {
   using strobjmap = map<string,object*>;
   strobjmap somap;

   // Push each element of argv into map as object.
   for (int index = 1; index < argc; ++index) {
      string arg = argv[index];
      somap.emplace (strobjmap::value_type (arg, new object (arg)));
   }

   // Iterate over the map, printing out the keys and values.
   for (auto itor = somap.cbegin(); itor != somap.cend(); ++itor) {
      cout << itor->first << " => (" << itor->second->seqnr << ", "
           << itor->second->value << ")" << endl;
   }

   // If the first argument is "-", erase all map entries.
   if (argc > 1 && argv[1][0] == '-') {
      while (somap.size() > 0) {
         auto itor = somap.begin();
         object *second = itor->second;
         somap.erase (itor);
         delete second;
      }
   }

   return 0;
}

//TEST// alias grind='valgrind --leak-check=full --show-reachable=yes'
//TEST// grind mapleak arguments to check on leak >mapleak.out1 2>&1
//TEST// grind mapleak - arguments to check on leak >mapleak.out2 2>&1
//TEST// mkpspdf mapleak.ps mapleak.cpp* mapleak.out*

@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.12 2014-04-22 19:08:04-07 - - $
d29 1
a29 1
      somap.emplace (strobjmap::value_type (arg, new object (arg));
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.11 2014-04-22 19:06:23-07 - - $
d19 1
a19 1
   explicit object (const string &val): seqnr(++seqct), value(val) {}
d22 3
a24 4
typedef map <string, object*> somap_t;

int main (int argc, char **argv) {
   map <string, object*> somap;
d29 1
a29 1
      somap[arg] = new object (arg);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.10 2014-04-22 19:05:26-07 - - $
a51 1
/*
d53 2
a54 4
//TEST// grind mapleak these are some arguments to check on leak \
//TEST//       >mapleak.out1 2>&1
//TEST// grind mapleak - these are some arguments to check on leak \
//TEST//       >mapleak.out2 2>&1
a55 1
*/
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.9 2012-05-09 20:29:24-07 - - $
d53 2
a54 3
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=mapleak.out1.grind \
//TEST//       mapleak these are some arguments to check on leak \
d56 1
a56 3
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=mapleak.out2.grind \
//TEST//       mapleak - these are some arguments to check on leak \
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.8 2012-05-09 20:19:53-07 - - $
a22 2
typedef somap_t::const_iterator somap_conitor;
typedef somap_t::iterator somap_itor;
d34 1
a34 2
   for (somap_conitor itor = somap.begin();
        itor != somap.end(); ++itor) {
d42 1
a42 1
         somap_itor itor = somap.begin();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.7 2012-05-09 20:17:57-07 - - $
d44 2
a45 2
      for (somap_itor itor = somap.begin();
           itor != somap.end(); ++itor) {
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.6 2012-05-09 20:16:22-07 - - $
d46 1
a46 1
         delete itor->second;
d48 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.5 2012-05-09 20:12:29-07 - - $
d23 2
a24 1
typedef somap_t::const_iterator somap_itor;
d36 2
a37 1
   for (somap_itor itor = somap.begin(); itor != somap.end(); ++itor) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.4 2012-05-09 20:11:12-07 - - $
d22 3
d35 1
a35 3
   map <string, object*>::const_iterator itor = somap.begin();
   map <string, object*>::const_iterator end = somap.end();
   for (; itor != end; ++itor) {
d42 5
a46 1
      somap.erase (somap.begin(), somap.end());
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.3 2012-05-09 20:07:40-07 - - $
d41 1
a41 1
      while (somap.size() > 0) somap.begin().erase();
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.2 2012-05-09 20:07:28-07 - - $
d7 1
d39 5
d49 1
a49 1
//TEST//       --log-file=mapleak.out.grind \
d51 5
a55 1
//TEST//       >mapleak.out 2>&1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.1 2012-05-09 20:04:45-07 - - $
d19 1
a19 1
}
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: mapleak.cpp,v 1.6 2012-05-03 16:17:44-07 - - $
d14 1
a14 1
int count = 0;
d18 1
a18 1
   explicit object (const string &val): seqnr(++count), value(val) {}
@

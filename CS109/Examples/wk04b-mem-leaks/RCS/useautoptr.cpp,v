head	1.16;
access;
symbols;
locks;
comment	@// @;


1.16
date	2012.05.10.22.23.43;	author -;	state -;
branches;
next	1.15;

1.15
date	2012.05.10.22.22.47;	author -;	state -;
branches;
next	1.14;

1.14
date	2012.05.10.22.22.30;	author -;	state -;
branches;
next	1.13;

1.13
date	2012.05.10.22.21.04;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.05.10.22.20.43;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.05.10.22.17.14;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.05.10.22.14.46;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.05.10.22.14.15;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.05.10.22.10.53;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.05.10.22.08.36;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.05.10.22.07.02;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.05.10.22.06.12;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.05.10.22.05.53;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.05.10.22.05.32;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.05.10.22.05.15;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.05.10.22.04.09;	author -;	state -;
branches;
next	;


desc
@@


1.16
log
@-
@
text
@// $Id: useautoptr.cpp,v 1.15 2012-05-10 15:22:47-07 - - $

//
// Use auto_ptr<T> to manage pointers to objects in a vector and a map.
//

#include <iostream>
#include <map>
#include <memory>
#include <vector>

using namespace std;

class root {
   private:
      root (const root &);
      root &operator= (const root &);
   public:
      int id;
      explicit root (int _id = 0): id(_id) {}
      virtual ~root() {}
      virtual void print() {
         cout << "root(" << id << ")" << endl;
      }
};

class text: public root {
   public:
      char *word;
      explicit text (int id = 0, char *_word = 0):
            root(id), word(_word) {}
      virtual ~text() { delete word; }
      virtual void print() {
         cout << "text(" << id << "," << word << ")" << endl;
      }
};

class array: public root {
   public:
      size_t size;
      int *data;
      explicit array (int id = 0, size_t _size = 0):
            root(id), size(_size), data(new int[size]) {}
      virtual void print() {
         cout << "array(" << id << ",size=" << size << ")" << endl;
      }
};

typedef auto_ptr<root> root_ptr;
typedef vector<root_ptr> vecroot;
typedef map<int, root_ptr> maproot;

int main () {
   vecroot vecr;
   maproot mapr;
   vecr.push_back (root_ptr (new root (1)));
   vecr.push_back (root_ptr (new text (2, "hello")));
   vecr.push_back (root_ptr (new array (3, 10)));
   for (size_t i = 0; i < vecr.size(); ++i) {
      vecr[i]->print();
      mapr[i] = vecr[i];
   }
   for (maproot::iterator i = mapr.begin(); i != mapr.end(); ++i) {
      cout << i->first << ": "; 
      i->second->print();
   }
   return 0;
}

/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=useautoptr.out1.grind \
//TEST//       useautoptr >useautoptr.out1 2>&1
//TEST// mkpspdf useautoptr.ps useautoptr.cpp* useautoptr.out*
*/


@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.14 2012-05-10 15:22:30-07 - - $
d49 1
a49 1
typedef auto_ptr<root*> root_ptr;
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.13 2012-05-10 15:21:04-07 - - $
d9 1
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.12 2012-05-10 15:20:43-07 - - $
d48 3
a50 2
typedef vector<root*> vecroot;
typedef map<int, root*> maproot;
d55 3
a57 3
   vecr.push_back (new root (1));
   vecr.push_back (new text (2, "hello"));
   vecr.push_back (new array (3, 10));
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.11 2012-05-10 15:17:14-07 - - $
d59 1
a59 1
      mapr[i] = vec[i];
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.10 2012-05-10 15:14:46-07 - - $
d13 1
a13 1
class thing {
d15 2
a16 2
      thing (const thing &);
      thing &operator= (const thing &);
d19 2
a20 2
      explicit thing (int _id = 0): id(_id) {}
      virtual ~thing() {}
d22 1
a22 1
         cout << "thing(" << id << ")" << endl;
d26 1
a26 1
class text: public thing {
d30 1
a30 1
            thing(id), word(_word) {}
d37 1
a37 1
class array: public thing {
d42 1
a42 1
            thing(id), size(_size), data(new int[size]) {}
d48 2
a49 2
typedef vector<thing*> vecthing;
typedef map<string, thing*> mapthing;
d52 13
a64 5
   vecthing vr;
   vr.push_back (new thing (1));
   vr.push_back (new text (2, "hello"));
   vr.push_back (new array (3, 10));
   for (size_t i = 0; i < vr.size(); ++i) vr[i]->print();
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.9 2012-05-10 15:14:15-07 - - $
d20 1
a20 1
      virtual ~thing();
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.8 2012-05-10 15:10:53-07 - - $
a8 1
#include <typeinfo>
d13 1
a13 1
class root {
d15 2
a16 2
      root (const root &);
      root &operator= (const root &);
d19 2
a20 2
      explicit root (int _id = 0): id(_id) {}
      virtual ~root();
d22 1
a22 1
         cout << "root(" << id << ")" << endl;
d26 1
a26 1
class text: public root {
d30 1
a30 1
            root(id), word(_word) {}
d37 1
a37 1
class array: public root {
d42 1
a42 1
            root(id), size(_size), data(new int[size]) {}
d48 2
a49 2
typedef vector<root*> vecroot;
typedef map<string, root*> maproot;
d52 2
a53 2
   vecroot vr;
   vr.push_back (new root (1));
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.7 2012-05-10 15:08:36-07 - - $
d9 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.5 2012-05-10 15:06:12-07 - - $
d13 11
a23 9
struct root {
   int id;
   explicit root (int _id = 0): id(_id) {}
   virtual ~root();
   virtual void print() {
      cout << "root(" << id << ")" << endl;
   }
   private: root (const root &);
            root &operator= (const root &);
d26 9
a34 8
struct text: public root {
   char *word;
   explicit text (int id = 0, char *_word = 0): root(id),
            word(_word) {}
   virtual ~text() { delete word; }
   virtual void print() {
      cout << "text(" << id << "," << word << ")" << endl;
   }
d37 9
a45 8
struct array: public root {
   size_t size;
   int *data;
   explicit array (int id = 0, size_t _size = 0): root(id),
            size(_size), data(new int[size]) {}
   virtual void print() {
      cout << "array(" << id << ",size=" << size << ")" << endl;
   }
@


1.6
log
@-
@
text
@a8 1
#include <memory>
d15 1
a15 1
   explicit root (int _id = 0): id(_id) {};
d38 1
a38 1
            size(_size), data(new int[size]) {};
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.4 2012-05-10 15:05:53-07 - - $
a17 2
   private: root (const root &);
   private: root &operator= (const root &);
d21 2
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.3 2012-05-10 15:05:32-07 - - $
d16 2
a17 2
   explicit object (int _id = 0): id(_id) {};
   virtual ~object();
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.2 2012-05-10 15:05:15-07 - - $
d23 1
a23 1
}
d33 1
a33 1
}
d43 1
a43 1
}
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: useautoptr.cpp,v 1.1 2012-05-10 15:04:09-07 - - $
d10 1
a10 1
#inlcude <vector>
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: autoptr.cpp,v 1.1 2012-05-10 15:03:45-07 - - $
d59 3
a61 4
//TEST//       --log-file=mapleak.out1.grind \
//TEST//       mapleak these are some arguments to check on leak \
//TEST//       >mapleak.out1 2>&1
//TEST// mkpspdf mapleak.ps mapleak.cpp* mapleak.out*
@

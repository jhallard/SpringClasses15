head	1.4;
access;
symbols;
locks;
comment	@// @;


1.4
date	2014.04.23.02.02.44;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.23.02.01.40;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.04.23.02.00.50;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.04.23.02.00.16;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: vectorshared.cpp,v 1.3 2014-04-22 19:01:40-07 - - $

//
// Exact copy of vectorleak.cpp, except use shared_ptr instead of
// actual pointers so that memory is released.
//

#include <iostream>
#include <vector>
#include <memory>

using namespace std;

int main (int argc, char **argv) {
   vector<shared_ptr<string>> vs;
   for (int index = 1; index < argc; ++index) {
      vs.push_back (make_shared<string> (argv[index]));
   }
   auto begin = vs.begin();
   for (auto itor = begin; itor != vs.end(); ++itor) {
      cout << itor - begin << ": " << *itor << "->" << **itor << endl;
   }
   return 0;
}

/*
//TEST// alias grind='valgrind --leak-check=full --show-reachable=yes'
//TEST// grind vectorshared these are some arguments to check on leak \
//TEST//       >vectorshared.out 2>&1
//TEST// mkpspdf vectorshared.ps vectorshared.cpp* vectorshared.out
*/

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: vectorshared.cpp,v 1.2 2014-04-22 19:00:50-07 - - $
d28 1
a28 1
//TEST// grind vectorleak these are some arguments to check on leak \
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: vectorshared.cpp,v 1.1 2014-04-22 19:00:16-07 - - $
d29 2
a30 2
//TEST//       >vectorleak.out 2>&1
//TEST// mkpspdf vectorleak.ps vectorleak.cpp* vectorleak.out
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: vectorleak.cpp,v 1.4 2014-04-22 18:58:28-07 - - $
d15 1
a15 1
   vector<string*> vs;
@

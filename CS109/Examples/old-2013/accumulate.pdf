%PDF-1.2
5 0 obj
<</Length 6 0 R>>
stream
q 0.1 0 0 0.1 0 0 cm
1 i
0 G
380 240 5360 7080 re
S
0.949219 g
380 7320 5360 180 re
f
0.699219 g
380 7320 720 360 re
f
0 g
q
10 0 0 10 0 0 cm BT
/R9 12 Tf
1 0 0 1 52.6641 752 Tm
(06/05/12)Tj
-0.659766 -12.8004 Td
(20:48:14)Tj
ET
Q
0.699219 g
5020 7320 720 360 re
f
1 G
1 g
q
10 0 0 10 0 0 cm BT
/R7 28.8 Tf
1 0 0 1 529.993 739.2 Tm
(1)Tj
ET
Q
0 G
0 g
q
10 0 0 10 0 0 cm BT
/R8 14 Tf
1 0 0 1 262.265 736.5 Tm
(accumulate.cpp)Tj
-82.3324 18 Td
($cmps109-wm/Examples/wk10a-algorithms/)Tj
/R10 10 Tf
-111.933 -35.5 Td
[(1:)-600(// $Id: accumulate.cpp,v 1.4 2012-06-05 20:48:14-07 - - $)]TJ
11 TL
(2:)'
T*[(3:)-600(//)]TJ
T*[(4:)-600(// Accumulate.)]TJ
T*[(5:)-600(// Takes an object and an action and accumulates a sequence,)]TJ
T*[(6:)-600(// producing a final result.)]TJ
T*[(7:)-600(//)]TJ
(8:)'
T*[(9:)-600(#include <iostream>)]TJ
-6 -11 Td
[(10:)-600(#include <list>)]TJ
T*[(11:)-600(#include <vector>)]TJ
(12:)'
T*[(13:)-600(using namespace std;)]TJ
(14:)'
T*[(15:)-600(//)]TJ
T*[(16:)-600(// algorithm for_each_do)]TJ
T*[(17:)-600(//)]TJ
T*[(18:)-600(template <typename itor_t, typename action_t>)]TJ
T*[(19:)-600(void for_each_do \(const itor_t &begin, const itor_t &end,)]TJ
T*[(20:)-600(                  action_t &action\) {)]TJ
T*[(21:)-600(   for \(itor_t itor = begin; itor != end; ++itor\) action \(*itor\);)]TJ
T*[(22:)-600(})]TJ
(23:)'
T*[(24:)-600(//)]TJ
T*[(25:)-600(// struct accumulator)]TJ
T*[(26:)-600(//)]TJ
T*[(27:)-600(template <typename value_t, typename binary_fn>)]TJ
T*[(28:)-600(struct accumulator {)]TJ
T*[(29:)-600(   value_t value;)]TJ
T*[(30:)-600(   binary_fn *fn;)]TJ
T*[(31:)-600(   accumulator \(const value_t _value, const binary_fn _fn\):)]TJ
T*[(32:)-600(               value\(_value\), fn\(_fn\) {})]TJ
T*[(33:)-600(   void operator\(\) \(const value_t &opnd\) {)]TJ
T*[(34:)-600(      value = fn \(value, opnd\);)]TJ
T*[(35:)-600(   })]TJ
T*[(36:)-600(};)]TJ
(37:)'
T*[(38:)-600(//)]TJ
T*[(39:)-600(// algorithm accumulate)]TJ
T*[(40:)-600(//)]TJ
T*[(41:)-600(template <typename itor_t, typename value_t, typename binary_fn>)]TJ
T*[(42:)-600(value_t accumulate \(const itor_t &begin, const itor_t &end,)]TJ
T*[(43:)-600(                    const value_t &initial, const binary_fn &binfn\) {)]TJ
T*[(44:)-600(   accumulator<value_t, binary_fn> accum \(initial, binfn\);)]TJ
T*[(45:)-600(   for_each_do \(begin, end, accum\);)]TJ
T*[(46:)-600(   return accum.value;)]TJ
T*[(47:)-600(})]TJ
(48:)'
T*[(49:)-600(//)]TJ
T*[(50:)-600(// algorithm copyit)]TJ
T*[(51:)-600(//)]TJ
T*[(52:)-600(template <typename itor_t, typename dest_t>)]TJ
T*[(53:)-600(void copyit \(const itor_t &begin, const itor_t &end,)]TJ
T*[(54:)-600(             const dest_t &dest\) {)]TJ
T*[(55:)-600(   dest_t desti = dest;)]TJ
T*[(56:)-600(   for \(itor_t itor = begin; itor != end; ++itor\) *desti++ = *itor;)]TJ
T*[(57:)-600(})]TJ
(58:)'
ET
Q
Q
endstream
endobj
6 0 obj
2857
endobj
14 0 obj
<</Length 15 0 R>>
stream
q 0.1 0 0 0.1 0 0 cm
0 G
380 240 5360 7080 re
S
0.949219 g
380 7320 5360 180 re
f
0.699219 g
380 7320 720 360 re
f
0 g
q
10 0 0 10 0 0 cm BT
/R9 12 Tf
1 0 0 1 52.6641 752 Tm
(06/05/12)Tj
-0.659766 -12.8004 Td
(20:48:14)Tj
ET
Q
0.699219 g
5020 7320 720 360 re
f
1 G
1 g
q
10 0 0 10 0 0 cm BT
/R7 28.8 Tf
1 0 0 1 529.993 739.2 Tm
(2)Tj
ET
Q
0 G
0 g
q
10 0 0 10 0 0 cm BT
/R8 14 Tf
1 0 0 1 262.265 736.5 Tm
(accumulate.cpp)Tj
-82.3324 18 Td
($cmps109-wm/Examples/wk10a-algorithms/)Tj
/R10 10 Tf
-117.933 -35.5 Td
(59:)Tj
11 TL
T*[(60:)-600(//)]TJ
T*[(61:)-600(// Rest is local user code for testing.)]TJ
T*[(62:)-600(//)]TJ
T*[(63:)-600(template <typename value_t>)]TJ
T*[(64:)-600(value_t add \(const value_t &left, const value_t &right\) {)]TJ
T*[(65:)-600(   return left + right;)]TJ
T*[(66:)-600(})]TJ
(67:)'
T*[(68:)-600(template <typename value_t>)]TJ
T*[(69:)-600(value_t multiply \(const value_t &left, const value_t &right\) {)]TJ
T*[(70:)-600(   return left * right;)]TJ
T*[(71:)-600(})]TJ
(72:)'
T*[(73:)-600(double array[] = {3.1, 4.1, 5.9, 2.6, 5.3};)]TJ
T*[(74:)-600(double *a_end = array + sizeof array / sizeof *array;)]TJ
(75:)'
T*[(76:)-600(void array_test\(\) {)]TJ
T*[(77:)-600(   cout << "array_test:" << endl;)]TJ
T*[(78:)-600(   cout << accumulate \(&*array, a_end, 0.0, add<double>\) << endl;)]TJ
T*[(79:)-600(   cout << accumulate \(&*array, a_end, 1.0, multiply<double>\) << endl;)]TJ
T*[(80:)-600(})]TJ
(81:)'
T*[(82:)-600(void vector_test\(\) {)]TJ
T*[(83:)-600(   vector<double> vec \(a_end - array\); // reserve enough space)]TJ
T*[(84:)-600(   copyit \(&*array, a_end, vec.begin\(\)\);)]TJ
T*[(85:)-600(   cout << "vector_test:" << endl;)]TJ
T*[(86:)-600(   cout << accumulate \(vec.begin\(\), vec.end\(\), 0.0, add<double>\))]TJ
T*[(87:)-600(        << endl;)]TJ
T*[(88:)-600(   cout << accumulate \(vec.begin\(\), vec.end\(\), 1.0, multiply<double>\))]TJ
T*[(89:)-600(        << endl;)]TJ
T*[(90:)-600(})]TJ
(91:)'
T*[(92:)-600(int main\(\) {)]TJ
T*[(93:)-600(   array_test\(\);)]TJ
T*[(94:)-600(   cout << endl;)]TJ
T*[(95:)-600(   vector_test\(\);)]TJ
T*[(96:)-600(   cout << endl;)]TJ
T*[(97:)-600(})]TJ
(98:)'
T*[(99:)-600(//TEST// ./accumulate >accumulate.out 2>&1)]TJ
-6 -11 Td
[(100:)-600(//TEST// mkpspdf accumulate.ps accumulate.cpp* accumulate.out)]TJ
(101:)'
ET
Q
Q
endstream
endobj
15 0 obj
2307
endobj
18 0 obj
<</Length 19 0 R>>
stream
q 0.1 0 0 0.1 0 0 cm
0 G
380 240 5360 7080 re
S
0.949219 g
380 7320 5360 180 re
f
0.699219 g
380 7320 720 360 re
f
0 g
q
10 0 0 10 0 0 cm BT
/R9 12 Tf
1 0 0 1 52.6641 752 Tm
(06/05/12)Tj
-0.659766 -12.8004 Td
(20:48:14)Tj
ET
Q
0.699219 g
5020 7320 720 360 re
f
1 G
1 g
q
10 0 0 10 0 0 cm BT
/R7 28.8 Tf
1 0 0 1 529.993 739.2 Tm
(1)Tj
ET
Q
0 G
0 g
q
10 0 0 10 0 0 cm BT
/R8 14 Tf
1 0 0 1 251.57 736.5 Tm
(accumulate.cpp.log)Tj
-71.6367 18 Td
($cmps109-wm/Examples/wk10a-algorithms/)Tj
/R10 10 Tf
-111.933 -35.5 Td
[(1:)-600(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ mkc: starting accumulate.cpp)]TJ
11 TL
T*[(2:)-600(accumulate.cpp: $Id: accumulate.cpp,v 1.4 2012-06-05 20:48:14-07 - - $)]TJ
T*[(3:)-600(g++ -g -O0 -Wall -Wextra accumulate.cpp -o accumulate -lm)]TJ
T*[(4:)-600(rm -f accumulate.o)]TJ
T*[(5:)-600(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ mkc: finished accumulate.cpp)]TJ
ET
Q
Q
endstream
endobj
19 0 obj
876
endobj
22 0 obj
<</Length 23 0 R>>
stream
q 0.1 0 0 0.1 0 0 cm
0 G
380 240 5360 7080 re
S
0.949219 g
380 7320 5360 180 re
f
0.699219 g
380 7320 720 360 re
f
0 g
q
10 0 0 10 0 0 cm BT
/R9 12 Tf
1 0 0 1 52.6641 752 Tm
(06/05/12)Tj
-0.659766 -12.8004 Td
(20:48:14)Tj
ET
Q
0.699219 g
5020 7320 720 360 re
f
1 G
1 g
q
10 0 0 10 0 0 cm BT
/R7 28.8 Tf
1 0 0 1 529.993 739.2 Tm
(1)Tj
ET
Q
0 G
0 g
q
10 0 0 10 0 0 cm BT
/R8 14 Tf
1 0 0 1 263.427 736.5 Tm
(accumulate.out)Tj
-83.4941 18 Td
($cmps109-wm/Examples/wk10a-algorithms/)Tj
/R10 10 Tf
-111.933 -35.5 Td
[(1:)-600(array_test:)]TJ
11 TL
T*[(2:)-600(21)]TJ
T*[(3:)-600(1033.35)]TJ
(4:)'
T*[(5:)-600(vector_test:)]TJ
T*[(6:)-600(21)]TJ
T*[(7:)-600(1033.35)]TJ
(8:)'
ET
Q
Q
endstream
endobj
23 0 obj
676
endobj
4 0 obj
<</Type/Page/MediaBox [0 0 612 792]
/Parent 3 0 R
/Resources<</ProcSet[/PDF /Text]
/Font 12 0 R
>>
/Contents 5 0 R
>>
endobj
13 0 obj
<</Type/Page/MediaBox [0 0 612 792]
/Parent 3 0 R
/Resources<</ProcSet[/PDF /Text]
/Font 16 0 R
>>
/Contents 14 0 R
>>
endobj
17 0 obj
<</Type/Page/MediaBox [0 0 612 792]
/Parent 3 0 R
/Resources<</ProcSet[/PDF /Text]
/Font 20 0 R
>>
/Contents 18 0 R
>>
endobj
21 0 obj
<</Type/Page/MediaBox [0 0 612 792]
/Parent 3 0 R
/Resources<</ProcSet[/PDF /Text]
/Font 24 0 R
>>
/Contents 22 0 R
>>
endobj
3 0 obj
<< /Type /Pages /Kids [
4 0 R
13 0 R
17 0 R
21 0 R
] /Count 4
>>
endobj
1 0 obj
<</Type /Catalog /Pages 3 0 R
>>
endobj
12 0 obj
<</R8
8 0 R/R10
10 0 R/R7
7 0 R/R9
9 0 R/R11
11 0 R>>
endobj
16 0 obj
<</R8
8 0 R/R10
10 0 R/R7
7 0 R/R9
9 0 R>>
endobj
20 0 obj
<</R8
8 0 R/R10
10 0 R/R7
7 0 R/R9
9 0 R>>
endobj
24 0 obj
<</R8
8 0 R/R10
10 0 R/R7
7 0 R/R9
9 0 R>>
endobj
8 0 obj
<</BaseFont/Times-Roman/Type/Font
/Subtype/Type1>>
endobj
10 0 obj
<</BaseFont/Courier/Type/Font
/Subtype/Type1>>
endobj
7 0 obj
<</BaseFont/Helvetica-Bold/Type/Font
/Subtype/Type1>>
endobj
9 0 obj
<</BaseFont/Times-Bold/Type/Font
/Subtype/Type1>>
endobj
11 0 obj
<</BaseFont/Courier-Bold/Type/Font
/Subtype/Type1>>
endobj
2 0 obj
<</Producer(ESP Ghostscript 815.02)
/CreationDate(D:20120605204814)
/ModDate(D:20120605204814)>>endobj
xref
0 25
0000000000 65535 f 
0000007630 00000 n 
0000008256 00000 n 
0000007550 00000 n 
0000007012 00000 n 
0000000009 00000 n 
0000002916 00000 n 
0000008054 00000 n 
0000007925 00000 n 
0000008123 00000 n 
0000007991 00000 n 
0000008188 00000 n 
0000007678 00000 n 
0000007145 00000 n 
0000002936 00000 n 
0000005295 00000 n 
0000007748 00000 n 
0000007280 00000 n 
0000005316 00000 n 
0000006244 00000 n 
0000007807 00000 n 
0000007415 00000 n 
0000006264 00000 n 
0000006992 00000 n 
0000007866 00000 n 
trailer
<< /Size 25 /Root 1 0 R /Info 2 0 R
/ID [<EF850DC850A424A14BA6DE2699F4DE4E><EF850DC850A424A14BA6DE2699F4DE4E>]
>>
startxref
8367
%%EOF

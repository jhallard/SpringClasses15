head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2012.04.25.04.55.28;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.04.25.04.55.10;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.04.25.04.52.05;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.04.25.04.51.25;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.25.04.48.58;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.25.04.48.38;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@#include <iostream>

using namespace std;

struct A {
   virtual void f () { cout << "A::f" << endl; }
   virtual void g () { cout << "A::f" << endl; }
   virtual ~A() {}
};

struct B: public A {
   virtual void f () { cout << "B::f" << endl; }
};

struct C: public A {
   virtual void g () { cout << "C::g" << endl; }
};

typedef void (A::*fnptr)();

int main() {
   fnptr p = &A::f;
   cout << (void*) p << endl;
   return 0;
}

@


1.5
log
@-
@
text
@d23 1
a23 1
   cout << p << endl;
@


1.4
log
@-
@
text
@d19 2
d22 3
a24 1
   cout << reinterpret_cast<void*> (&A::f) << endl;
@


1.3
log
@-
@
text
@d20 1
a20 1
   cout << (void*) &A::f << endl;
@


1.2
log
@-
@
text
@d9 1
a9 1
}
d13 1
a13 1
}
d17 1
a17 1
}
d20 1
a20 1
   cout << A::f << endl;
@


1.1
log
@-
@
text
@d8 1
@

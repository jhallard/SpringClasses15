head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2015.02.11.01.51.17;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.02.11.01.50.43;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.02.11.01.50.01;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.02.11.01.49.15;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.02.11.01.48.22;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.02.11.01.46.47;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.02.11.01.36.38;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.25.02.46.04;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.25.02.30.05;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: slicing.cpp,v 1.8 2015-02-10 17:50:43-08 - - $

//
// Slicing occurs when an object of a a derived class is copied
// into an object of a base class, which loses information.
// Thus, the copy ctor and operator= should be supporessed.
// We use struct here to avoid protection questions.
//

#include <iostream>
#include <typeinfo>

using namespace std;

struct base {
   int base_;
   void print() { // non-virtual
      cout << typeid(*this).name() << ": " << base_ << endl;
   }
};

struct second: public base {
   int second_;
   void print() { // non-virtual
      cout << typeid(*this).name() << ": " << base_
           << ", " << second_ << endl;
   }
};

struct other: public base {
   int other_;
   void print() { // non-virtual
      cout << typeid(*this).name() << ": " << base_
           << ", " << other_ << endl;
   }
};

int main () {
   cout << "sizeof (base) = " << sizeof (base) << endl;
   cout << "sizeof (second) = " << sizeof (second) << endl;
   cout << "sizeof (other) = " << sizeof (other) << endl;
   base b; b.base_ = 6; b.print();
   second s; s.base_ = 8; s.second_ = 10; s.print();
   other o; o.base_ = 15; o.other_ = 20; o.print();

   b = s; b.print();

   s.base_ = 42; s.second_ = 99; s.print();
   // s = b; s.print(); // error: no match for 'operator=' in 's = b'
   static_cast<base>(s) = b; s.print();

   return 0;
}

//TEST// grind="valgrind --leak-check=full --show-reachable=yes"
//TEST// $grind slicing >slicing.out 2>&1
//TEST// mkpspdf slicing.ps slicing.cpp* slicing.out*
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: slicing.cpp,v 1.7 2015-02-10 17:50:01-08 - - $
d49 1
a49 2
   // s = b; s.print();
   // error: no match for 'operator=' in 's = b'
a57 1

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: slicing.cpp,v 1.6 2015-02-10 17:49:15-08 - - $
d56 2
a57 2
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       slicing >slicing.out 2>&1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: slicing.cpp,v 1.5 2015-02-10 17:48:22-08 - - $
a55 1
/*
a58 2
*/

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: slicing.cpp,v 1.4 2015-02-10 17:46:47-08 - - $
a57 1
//TEST//       --log-file=slicing.out.grind \
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: slicing.cpp,v 1.3 2015-02-10 17:36:38-08 - - $
d39 3
a41 2
   cout << sizeof (base) << ", " << sizeof (second) << ", "
        << sizeof (other) << endl;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: slicing.cpp,v 1.2 2012-04-24 19:46:04-07 - - $
d16 1
a16 1
   int _base;
d18 1
a18 1
      cout << typeid(*this).name() << ": " << _base << endl;
d23 1
a23 1
   int _second;
d25 2
a26 2
      cout << typeid(*this).name() << ": " << _base
           << ", " << _second << endl;
d31 1
a31 1
   int _other;
d33 2
a34 2
      cout << typeid(*this).name() << ": " << _base
           << ", " << _other << endl;
d41 3
a43 3
   base b; b._base = 6; b.print();
   second s; s._base = 8; s._second = 10; s.print();
   other o; o._base = 15; o._other = 20; o.print();
d47 1
a47 1
   s._base = 42; s._second = 99; s.print();
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: slicing.cpp,v 1.1 2012-04-24 19:30:05-07 - - $
d11 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d10 4
d38 2
d43 1
d45 7
a51 1
   s = b; s.print();
d54 8
@

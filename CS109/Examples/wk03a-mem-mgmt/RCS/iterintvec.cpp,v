head	1.22;
access;
symbols;
locks;
comment	@// @;


1.22
date	2014.07.03.01.15.47;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.05.30.23.45.52;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.04.14.20.31.46;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.04.14.20.28.58;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.04.14.20.28.12;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.04.11.02.36.16;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.07.09.00.04.25;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.07.08.20.18.39;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.07.08.20.17.49;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.07.08.20.17.02;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.07.08.20.16.35;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.07.08.20.15.43;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.07.08.20.06.28;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.07.08.20.05.38;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.07.08.19.58.39;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.07.08.19.57.43;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.07.08.19.56.26;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.07.06.02.53.11;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.07.06.02.50.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.07.06.02.50.03;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.07.06.02.48.57;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.07.06.02.43.29;	author -;	state -;
branches;
next	;


desc
@@


1.22
log
@-
@
text
@// $Id: iterintvec.cpp,v 1.21 2014-05-30 16:45:52-07 - - $

//
// iterintvec - implementation of an int vector with iterator.
//

#include <iostream>
#include <stdexcept>

using namespace std;

/////////////////////////////////////////////////////////////////
// iterintvec.h
/////////////////////////////////////////////////////////////////

class iterintvec {
   private:
      size_t _size;
      int *_data;
      void copy_data (int *data);
      void range_check (size_t index) const;
   public:
      using value_type = int;
      using reference = int&;
      using const_reference = const int&;
      using pointer = int*;
      using const_pointer = const int*;
      using difference_type = ptrdiff_t;
      using size_type = size_t;
      class iterator;
      friend class iterintvec::iterator;
      iterintvec ();                             // default ctor
      iterintvec (const iterintvec&);            // copy ctor
      iterintvec (iterintvec&&);                 // move ctor
      iterintvec& operator= (const iterintvec&); // copy operator=
      iterintvec& operator= (iterintvec&&);      // move operator=
      ~iterintvec();                             // dtor
      explicit iterintvec (size_t size);
      size_t size() const;
      int get (size_t index) const;
      void put (size_t index, int value);
      iterator begin();
      iterator end();
};


class iterintvec::iterator {
   private:
      pointer curr;
      friend class iterintvec;
      iterator (pointer init): curr (init) {};
   public:
      iterator(): curr (nullptr) {};
      reference operator* () { return *curr; }
      const_reference operator* () const { return *curr; }
      iterator& operator++ () { ++curr; return *this; }
      iterator operator++ (int) {
         iterator tmp {*this}; ++curr; return tmp;
      }
      bool operator== (const iterator& that) {
         return curr == that.curr;
      }
      bool operator!= (const iterator& that) {
         return not (*this == that);
      }
};


/////////////////////////////////////////////////////////////////
// iterintvec.cpp
/////////////////////////////////////////////////////////////////

// Private.
void iterintvec::copy_data (int *data) {
   for (size_t index = 0; index < _size; ++index) {
      _data[index] = data[index];
   }
}

// Private.
void iterintvec::range_check (size_t index) const {
   if (index >= _size) throw out_of_range ("iterintvec::range_check");
}

// Default ctor.
iterintvec::iterintvec(): _size(0), _data(nullptr){}

// Copy constructor.
iterintvec::iterintvec (const iterintvec& that):
            _size(that._size), _data (new int[that._size]) {
   copy_data (that._data);
}

// Move constructor.
iterintvec::iterintvec (iterintvec&& that):
            _size(that._size), _data (that._data) {
   that._size = 0;
   that._data = nullptr;
}

// Copy operator=
iterintvec& iterintvec::operator= (const iterintvec& that){
   if (this != &that) {
      if (_data != nullptr) delete[] _data;
      _size = that._size;
      _data = new int[that._size];
      copy_data (that._data);
   }
   return *this;
}

// Move operator=
iterintvec& iterintvec::operator= (iterintvec&& that){
   if (this != &that) {
      if (_data != nullptr) delete[] _data;
      _size = that._size;
      _data = that._data;
      that._size = 0;
      that._data = nullptr;
   }
   return *this;
}


// Destructor.
iterintvec::~iterintvec() {
   if (_data != nullptr) delete[] _data;
}

// Fixed-size allocator.
iterintvec::iterintvec (size_t size):
               _size(size), _data (new int[_size]) {
   for (size_t index = 0; index < _size; ++index) {
      _data[index] = 0;
   }
}

size_t iterintvec::size() const {
   return _size;
}

int iterintvec::get (size_t index) const {
   range_check (index);
   return _data[index];
}

void iterintvec::put (size_t index, int value) {
   range_check (index);
   _data[index] = value;
}

iterintvec::iterator iterintvec::begin() {
   return iterator (&_data[0]);
}

iterintvec::iterator iterintvec::end() {
   return iterator (&_data[_size]);
}


/////////////////////////////////////////////////////////////////
// main.cpp
/////////////////////////////////////////////////////////////////

int main () {
   iterintvec v1(10);
   v1.put (3, 99);
   int x = v1.get (3);
   cout << x << endl;
   try {
      v1.get (999);
   }catch (out_of_range error) {
      cerr << error.what() << endl;
   }
   iterintvec v2 = v1;
   v2.put (3, 1234);
   cout << v1.get (3) << " " << v2.get (3) << endl;
   v2 = v1;
   cout << v1.get (3) << " " << v2.get (3) << endl;
   for (iterintvec::iterator i = v1.begin();
        i != v1.end(); ++i) {
      cout << *i << endl;
   }
   return 0;
}

//TEST// alias grind='valgrind --leak-check=full --show-reachable=yes'
//TEST// grind iterintvec >iterintvec.out 2>&1
//TEST// mkpspdf iterintvec.ps iterintvec.cpp* iterintvec.out*

@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.20 2014-04-14 13:31:46-07 - - $
d32 1
a32 1
      iterintvec ();                              // default ctor
d37 1
a37 1
      ~iterintvec();                              // dtor
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.19 2014-04-14 13:28:58-07 - - $
d23 7
a29 7
      typedef int value_type;
      typedef int &reference;
      typedef const int &const_reference;
      typedef int *pointer;
      typedef const int *const_pointer;
      typedef ptrdiff_t difference_type;
      typedef size_t size_type;
d33 4
a36 4
      iterintvec (const iterintvec &);            // copy ctor
      iterintvec (iterintvec &&);                 // move ctor
      iterintvec &operator= (const iterintvec &); // copy operator=
      iterintvec &operator= (iterintvec &&);      // move operator=
d56 1
a56 1
      iterator &operator++ () { ++curr; return *this; }
d60 1
a60 1
      bool operator== (const iterator &that) {
d63 1
a63 1
      bool operator!= (const iterator &that) {
d89 1
a89 1
iterintvec::iterintvec (const iterintvec &that):
d95 1
a95 1
iterintvec::iterintvec (iterintvec &&that):
d102 1
a102 1
iterintvec &iterintvec::operator= (const iterintvec &that){
d113 1
a113 1
iterintvec &iterintvec::operator= (iterintvec &&that){
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.18 2014-04-14 13:28:12-07 - - $
d58 2
a59 1
                        iterator tmp (*this); ++curr; return tmp; }
d61 5
a65 3
      return curr == that.curr; }
      inline bool operator!= (const iterator &that) {
                        return not (*this == that); }
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.17 2014-04-10 19:36:16-07 - - $
d46 1
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.16 2013-07-08 17:04:25-07 - - $
d183 2
a184 4
/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=iterintvec.out.grind \
//TEST//       iterintvec >iterintvec.out 2>&1
a185 1
*/
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.15 2013-07-08 13:18:39-07 - - $
d32 1
a32 1
      iterintvec () = delete;                     // default ctor
d50 1
a50 1
      inline iterator (pointer init): curr (init) {};
d52 5
a56 5
      inline iterator(): curr (NULL) {};
      inline reference operator* () { return *curr; }
      inline const_reference operator* () const { return *curr; }
      inline iterator &operator++ () { ++curr; return *this; }
      inline iterator operator++ (int) {
d58 2
a59 2
      inline bool operator== (const iterator &that) {
                        return curr == that.curr; }
d81 3
d94 1
a94 1
   that._data = NULL;
d100 1
a100 1
      if (_data != NULL) delete[] _data;
d111 1
a111 1
      if (_data != NULL) delete[] _data;
d115 1
a115 1
      that._data = NULL;
d123 1
a123 1
   if (_data != NULL) delete[] _data;
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.14 2013-07-08 13:17:49-07 - - $
d97 1
a97 1
      delete[] _data;
d108 1
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.13 2013-07-08 13:17:02-07 - - $
d4 1
a4 3
// iterintvec - implementation of an int vector, similar to 
// Stroustrup, ch.17 example.
// Same as intvec example, except trivial iterators added.
a37 1
      // Other members.
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.12 2013-07-08 13:16:35-07 - - $
a48 1

a55 3
      inline iterator (const iterator &) = default;
      inline iterator &operator= (const iterator &) = default;
      inline ~iterator () = default;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.11 2013-07-08 13:15:43-07 - - $
d49 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.9 2013-07-08 13:05:38-07 - - $
a56 1
      inline iterator (iterator &&) = default;
a57 1
      inline iterator &operator= (iterator &&) = default;
@


1.10
log
@-
@
text
@d33 1
d52 1
d64 6
a69 3
      inline iterator operator++ (int) { iterator tmp (*this); ++curr; return tmp; }
      inline bool operator== (const iterator &that) { return curr == that.curr; }
      inline bool operator!= (const iterator &that) { return not (*this == that); }
d153 1
a153 1
   return &_data[0];
d157 1
a157 1
   return &_data[_size];
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.8 2013-07-08 12:58:39-07 - - $
d177 1
a177 1
      cout << i << "->" << *i << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.7 2013-07-08 12:57:43-07 - - $
d64 1
a64 1
      inline bool operator!= (const iterator &that) { return not (*this == that; }
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.6 2013-07-08 12:56:26-07 - - $
d65 1
a65 1
}
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.5 2013-07-05 19:53:11-07 - - $
a32 1
      class const_iterator;
a44 2
      const_iterator begin() const;
      const_iterator cbegin() const;
a45 2
      const_iterator end() const;
      const_iterator cend() const;
a150 8
iterintvec::const_iterator iterintvec::begin() const {
   return &_data[0];
}

iterintvec::const_iterator iterintvec::cbegin() const {
   return &_data[0];
}

a154 8
iterintvec::const_iterator iterintvec::end() const {
   return &_data[_size];
}

iterintvec::const_iterator iterintvec::cend() const {
   return &_data[_size];
}

d175 2
a176 2
   for (iterintvec::const_iterator i = v1.cbegin();
        i != v1.cend(); ++i) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.4 2013-07-05 19:50:36-07 - - $
a29 2
      typedef pointer iterator;
      typedef const_pointer const_iterator;
d32 2
d53 19
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.3 2013-07-05 19:50:03-07 - - $
d177 4
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.2 2013-07-05 19:48:57-07 - - $
d112 2
a113 1
iterintvec::iterintvec (size_t size): _size(size), _data (new int[_size]) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: iterintvec.cpp,v 1.1 2013-07-05 19:43:29-07 - - $
d132 1
a132 1
iterator iterintvec::begin() {
d136 1
a136 1
const_iterator iterintvec::begin() const {
d140 1
a140 1
const_iterator iterintvec::cbegin() const {
d144 1
a144 1
iterator iterintvec::end() {
d148 1
a148 1
const_iterator iterintvec::end() const {
d152 1
a152 1
const_iterator iterintvec::cend() const {
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: intvec.cpp,v 1.20 2013-07-05 19:32:37-07 - - $
d27 1
a27 1
      typedef const int &reference;
d45 6
d132 24
@

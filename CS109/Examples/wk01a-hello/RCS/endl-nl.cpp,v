head	1.14;
access;
symbols;
locks;
comment	@// @;


1.14
date	2013.01.04.03.11.36;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.01.04.03.07.48;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.04.02.22.10.46;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.04.02.22.09.45;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.04.02.22.09.18;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.04.02.22.04.37;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.04.02.21.51.22;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.04.02.21.49.16;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.04.02.21.46.50;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.04.02.21.44.30;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.04.02.21.43.47;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.04.02.21.37.48;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.02.21.36.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.02.21.33.30;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// $Id: endl-nl.cpp,v 1.13 2013-01-03 19:07:48-08 - - $

//
// NAME
//    endl-nl - print out messages to stdout and stderr
//
// SYNOPSIS
//    endl-nl [arg]
//
// DESCRIPTION
//    Illustrate difference between printing end of line with
//    '\n' vs endl.  endl flushes the buffer, while '\n' does not
//    when written to a pipe or a file.
//

#include <cstdlib>
#include <iostream>

using namespace std;

int main (int argc, char **argv) {
   bool want_endl = argc > 1 && *argv[1] & 1;
   bool want_flush = argc > 1 && *argv[1] & 2;
   cout << "want_endl = " << want_endl << endl;
   cout << "want_flush = " << want_flush << endl;
   cout.flush ();
   for (int count = 0; count < 5; ++count) {
      cout << "stdout " << count << ":";
      if (want_endl) cout << endl; else cout << '\n';
      if (want_flush) cout << flush;
      cerr << "stderr " << count << ":";
      if (want_endl) cerr << endl; else cerr << '\n';
      if (want_flush) cerr << flush;
   }
   return EXIT_SUCCESS;
}

//TEST// ./endl-nl 0 >endl-nl.lis.0 2>&1
//TEST// ./endl-nl 1 >endl-nl.lis.1 2>&1
//TEST// ./endl-nl 2 >endl-nl.lis.2 2>&1
//TEST// ./endl-nl 3 >endl-nl.lis.3 2>&1
//TEST// mkpspdf endl-nl.ps endl-nl.cpp* endl-nl.lis.?

@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.12 2012-04-02 15:10:46-07 - - $
d42 1
a42 1
//TEST// mkpspdf endl-nl.ps endl-nl.cpp endl-nl.lis.?
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.11 2012-04-02 15:09:45-07 - - $
d43 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.10 2012-04-02 15:09:18-07 - - $
d30 1
a30 1
      if (want_flush) cout.flush ();
d33 1
a33 1
      if (want_flush) cerr.flush ();
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.9 2012-04-02 15:04:37-07 - - $
d38 4
a41 4
//TEST// ./endl-nl 0 >endl-nl.lis.0
//TEST// ./endl-nl 1 >endl-nl.lis.1
//TEST// ./endl-nl 2 >endl-nl.lis.2
//TEST// ./endl-nl 3 >endl-nl.lis.3
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.8 2012-04-02 14:51:22-07 - - $
d38 5
a42 1
//TEST// 
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.7 2012-04-02 14:49:16-07 - - $
d26 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.6 2012-04-02 14:46:50-07 - - $
d29 1
a29 1
      if (want_flush) cout << flush;
d32 1
a32 1
      if (want_flush) cerr << flush;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.5 2012-04-02 14:44:30-07 - - $
d27 1
a27 1
      cout << count << ": stdout";
d30 1
a30 1
      cerr << count << ": stderr";
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.4 2012-04-02 14:43:47-07 - - $
d24 2
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.3 2012-04-02 14:37:48-07 - - $
d22 2
a23 2
   bool want_endl = argc > 1 && argv[1] & 1;
   bool want_flush = argc > 1 && argv[1] & 2;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.2 2012-04-02 14:36:29-07 - - $
d22 2
a23 1
   bool want_endl = argc > 1;
d27 1
d30 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: endl-nl.cpp,v 1.1 2012-04-02 14:33:30-07 - - $
d25 1
a25 1
      cout << want_endl ? endl : '\n';
d27 1
d31 2
@


1.1
log
@-
@
text
@d1 14
a14 1
// $Id$
d22 1
d24 3
a26 2
      cout << "stdout\n";
      cerr << "stderr\n";
@

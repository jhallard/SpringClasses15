head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2014.05.05.23.23.32;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.05.23.22.45;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.05.23.21.34;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.05.23.21.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.05.23.20.02;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.05.23.19.16;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.07.24.01.00.25;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.07.24.01.00.04;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.07.24.00.58.30;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: demangletest.cpp,v 1.8 2014-05-05 16:22:45-07 - - $

// Demangle a typeid(X).name() string

#include <iostream>
#include <list>
#include <map>
#include <string>
#include <typeinfo>
#include <vector>

using namespace std;

#include <cxxabi.h>
template <typename type>
string demangle (const type &object) {
   const char *const name = typeid (object).name();
   int status;
   char *demangled = abi::__cxa_demangle (name, NULL, 0, &status);
   if (status != 0 || demangled == NULL) return name;
   string result = demangled;
   free (demangled);
   return result;
}

class foo { }; 
class bar: foo { }; 
class baz: bar { }; 
class qux: baz { };
template <typename T> class tmpl { T x; };

template <typename type>
void print_demangled (const string &str, const type &obj) {
   cout << str << " => " << sizeof obj << endl;
   cout << "   mangled:   " << typeid(obj).name() << endl;
   cout << "   demangled: " << demangle (obj) << endl;
}

#define DEMANGLE(X) print_demangled (#X, X())
int main() {
   typedef signed char schar;
   typedef unsigned char uchar;
   typedef signed int sint;
   typedef unsigned int uint;
   typedef unsigned long ulong;
   typedef map<string,int> map_string_int;
   DEMANGLE (char);
   DEMANGLE (uchar);
   DEMANGLE (schar);
   DEMANGLE (int);
   DEMANGLE (sint);
   DEMANGLE (uint);
   DEMANGLE (double);
   DEMANGLE (long);
   DEMANGLE (ulong);
   DEMANGLE (size_t);
   DEMANGLE (foo);
   DEMANGLE (bar);
   DEMANGLE (baz);
   DEMANGLE (qux);
   DEMANGLE (tmpl<int>);
   DEMANGLE (vector<string>);
   DEMANGLE (vector<int>);
   DEMANGLE (list<vector<long>>);
   DEMANGLE (map_string_int);
   return 0;
}

//TEST// demangletest >demangletest.out
//TEST// mkpspdf demangletest.ps demangletest.cpp* demangletest.out

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: demangletest.cpp,v 1.7 2014-05-05 16:21:34-07 - - $
a9 1
#include <cmath>
a65 2
   DEMANGLE (sqrt);
   DEMANGLE (pow);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: demangletest.cpp,v 1.6 2014-05-05 16:21:06-07 - - $
d10 1
d67 2
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: demangletest.cpp,v 1.5 2014-05-05 16:20:02-07 - - $
d51 2
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: demangletest.cpp,v 1.4 2014-05-05 16:19:16-07 - - $
d43 2
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: demangletest.cpp,v 1.3 2013-07-23 18:00:25-07 - - $
d41 3
d46 2
a47 2
   DEMANGLE (unsigned char);
   DEMANGLE (signed char);
d51 1
a51 1
   DEMANGLE (unsigned long);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: demangletest.cpp,v 1.2 2013-07-23 18:00:04-07 - - $
a40 1
   typedef unsigned long ulong;
d43 2
d47 3
a49 1
   DEMANGLE (ulong);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: demangletest.cpp,v 1.1 2013-07-23 17:58:30-07 - - $
d46 1
a46 1
   DEMANGLE (ulonglong);
d55 1
a55 1
   DEMANGLE (mapstringint);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: demangletest.cpp,v 1.13 2013-07-23 17:56:01-07 - - $
a14 1

d26 5
a30 16
class foo {
};

class bar: foo {
};

class baz: bar {
};

class qux: baz {
};

template <typename T>
class tmpl {
   T x;
};
a39 1

d41 2
a42 2
   typedef unsigned long long ulonglong;
   typedef map<string,int> mapstringint;
@

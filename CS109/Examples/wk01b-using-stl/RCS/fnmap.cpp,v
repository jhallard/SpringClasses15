head	1.26;
access;
symbols;
locks;
comment	@// @;


1.26
date	2014.06.21.05.30.54;	author -;	state -;
branches;
next	1.25;

1.25
date	2014.06.21.05.30.14;	author -;	state -;
branches;
next	1.24;

1.24
date	2014.06.21.05.29.32;	author -;	state -;
branches;
next	1.23;

1.23
date	2014.06.21.05.27.13;	author -;	state -;
branches;
next	1.22;

1.22
date	2014.06.21.05.25.18;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.06.21.05.23.56;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.05.30.23.49.24;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.03.28.02.31.21;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.06.27.00.14.22;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.06.27.00.13.32;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.06.27.00.13.14;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.06.27.00.12.39;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.06.27.00.11.55;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.06.27.00.09.29;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.06.22.02.39.51;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.06.22.02.39.24;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.06.22.02.38.56;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.06.22.02.38.15;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.06.22.02.37.53;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.06.22.02.36.51;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.06.22.02.36.13;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.06.22.02.34.52;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.01.08.03.05.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.03.30.05.59.19;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.03.30.05.58.56;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.01.05.05.19.46;	author -;	state -;
branches;
next	;


desc
@@


1.26
log
@-
@
text
@// $Id: fnmap.cpp,v 1.25 2014-06-20 22:30:14-07 - - $

#include <cstdlib>
#include <iostream>
#include <map>
#include <stdexcept>
#include <string>
#include <vector>
using namespace std;

using function = void (*)(int);
using commandmap = map<string,function>;

void fn_foo (int index) {
   cout << "Function foo index " << index << endl;
}

void fn_bar (int index) {
   cout << "This is function bar index " << index << endl;
}

void fn_qux (int index) {
   cout << "Why would you call qux? index " << index << endl;
}

commandmap cmdmap = {
   {"foo", fn_foo},
   {"bar", fn_bar},
   {"qux", fn_qux},
};

string basename (const string &name) {
   return name.substr (name.rfind ('/') + 1);
}

int main (int argc, char **argv) {
   int exit_status = EXIT_SUCCESS;
   string progname = basename (argv[0]);
   vector<string> args (&argv[1], &argv[argc]);
   for (const auto& cmd: args) {
      int index = &cmd - &args[-1];
      try {
         function fn = cmdmap.at(cmd);
         fn (index);
      }catch (out_of_range &exn) {
         cerr << progname << ": " << cmd << ": not found index "
              << index << endl;
         exit_status = EXIT_FAILURE;
      }
   }
   return exit_status;
}

//TEST// ./fnmap foo bar baz qux quux >fnmap.lis 2>&1
//TEST// mkpspdf fnmap.ps fnmap.cpp* fnmap.lis

@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.24 2014-06-20 22:29:32-07 - - $
d46 2
a47 1
         cerr << progname << ": " << cmd << ": not found" << endl;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.23 2014-06-20 22:27:13-07 - - $
d15 1
a15 1
   cout << ": Function foo index " << index << endl;
d19 1
a19 1
   cout << ": This is function bar index " << index << endl;
d23 1
a23 1
   cout << ": Why would you call qux? index " << index << endl;
d41 1
a41 1
      int index = &cmd - &args[0];
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.22 2014-06-20 22:25:18-07 - - $
d15 1
a15 1
   cout << index << ": Function foo" << endl;
d19 1
a19 1
   cout << index << ": This is function bar" << endl;
d23 1
a23 1
   cout << index << ": Why would you call qux?" << endl;
d41 1
d44 1
a44 1
         fn (&cmd - &args[0]);
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.21 2014-06-20 22:23:56-07 - - $
d43 1
a43 1
         fn (&cmd - args.begin());
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.20 2014-05-30 16:49:24-07 - - $
d43 1
a43 1
         fn (argi);
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.19 2014-03-27 19:31:21-07 - - $
d8 1
a8 1

d39 2
a40 2
   for (int argi = 1; argi < argc; ++argi) {
      string cmd = argv[argi];
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.18 2013-06-26 17:14:22-07 - - $
d11 2
a12 2
typedef void (*function) (int);
typedef map <string, function> commandmap;
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.17 2013-06-26 17:13:32-07 - - $
d52 1
a52 1
//TEST// runprogram.perl -x fnmap.lis ./fnmap foo bar baz qux quux
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.16 2013-06-26 17:13:14-07 - - $
d45 1
a45 1
         cerr << progname << ": " << cmd << ": " << exn.what() << endl;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.15 2013-06-26 17:12:39-07 - - $
a35 1

@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.14 2013-06-26 17:11:55-07 - - $
d26 1
a26 1
commandmap map = {
d43 1
a43 1
         function fn = map.at(cmd);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.13 2013-06-26 17:09:29-07 - - $
d6 1
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.12 2013-06-21 19:39:51-07 - - $
d25 4
a28 6
class commands {
   private:
      commandmap map;
   public:
      commands ();
      function operator[] (const string &cmd);
a30 15
commands::commands(): map (commandmap()) {
   map["foo"] = fn_foo;
   map["bar"] = fn_bar;
   map["qux"] = fn_qux;
}

function commands::operator[] (const string& cmd) {
   //return map[cmd];
   //map[cmd] will always add a new element with a default value
   //when not found.
   commandmap::const_iterator value_itor = map.find (cmd);
   //return value_itor == map.end() ? NULL : *value_itor;
   return value_itor == map.end() ? NULL : value_itor->second;
}

a38 1
   commands cmdmap;
d42 1
a42 1
         function fn = cmdmap.at(cmd);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.11 2013-06-21 19:39:24-07 - - $
d59 5
a63 3
      function fn = cmdmap[cmd];
      if (fn == NULL) {
         cerr << progname << ": " << cmd << ": no such command" << endl;
a64 1
         continue;
a65 1
      fn (argi);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.10 2013-06-21 19:38:56-07 - - $
d45 1
a45 2
   if (value_itor == map.end()) return NULL;
   return value_itor->second;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.9 2013-06-21 19:38:15-07 - - $
d46 1
a46 1
   return *value_itor;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.8 2013-06-21 19:37:53-07 - - $
d44 3
a46 1
   return value_itor == map.end() ? NULL : *value_itor;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.7 2013-06-21 19:36:51-07 - - $
d44 1
a44 1
   return result == map.end() ? NULL : *value_itor;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.6 2013-06-21 19:36:13-07 - - $
d43 2
a44 3
   commandmap::const_iterator result = map.find (cmd);
   if (result == map.end()) return NULL;
   return result;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.5 2013-06-21 19:34:52-07 - - $
d44 2
a45 1
   return result == map.end() ? 0 : result;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.4 2013-01-07 19:05:36-08 - - $
d44 1
a44 1
   return result == map.end() ? NULL : result;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.3 2012-03-29 22:59:19-07 - - $
d40 5
a44 1
   return map[cmd];
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.2 2012-03-29 22:58:56-07 - - $
d66 1
a66 1
//TEST// mkpspdf fnmap.ps fnmap.cpp fnmap.lis
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cpp,v 1.1 2011-01-04 21:19:46-08 - - $
d47 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: fnmap.cc,v 1.7 2010-01-08 13:00:47-08 - - $
d43 4
d49 1
d55 1
a55 1
         cerr << argv[0] << ": " << cmd << ": no such command" << endl;
@

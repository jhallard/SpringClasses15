head	1.23;
access;
symbols;
locks;
comment	@// @;


1.23
date	2012.04.05.23.49.36;	author -;	state -;
branches;
next	1.22;

1.22
date	2012.04.05.23.48.22;	author -;	state -;
branches;
next	1.21;

1.21
date	2012.04.05.23.47.20;	author -;	state -;
branches;
next	1.20;

1.20
date	2012.04.05.00.23.19;	author -;	state -;
branches;
next	1.19;

1.19
date	2012.04.05.00.20.10;	author -;	state -;
branches;
next	1.18;

1.18
date	2012.04.05.00.18.28;	author -;	state -;
branches;
next	1.17;

1.17
date	2012.04.05.00.17.54;	author -;	state -;
branches;
next	1.16;

1.16
date	2012.04.05.00.12.34;	author -;	state -;
branches;
next	1.15;

1.15
date	2012.04.05.00.11.36;	author -;	state -;
branches;
next	1.14;

1.14
date	2012.04.05.00.10.34;	author -;	state -;
branches;
next	1.13;

1.13
date	2012.04.05.00.10.01;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.04.05.00.09.37;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.04.05.00.08.42;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.04.05.00.03.01;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.04.05.00.01.53;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.01.05.05.23.25;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.01.05.05.19.27;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.01.05.05.18.07;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.01.05.05.17.32;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.01.05.05.16.52;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.01.05.05.14.14;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.01.05.05.11.58;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.01.05.05.09.25;	author -;	state -;
branches;
next	;


desc
@@


1.23
log
@-
@
text
@// $Id: arrayptr.cpp,v 1.22 2012-04-05 16:48:22-07 - - $

//
// Print out addresses of array elements.  Show how to use a 
// pointer to iterate over an array instead of an index.  Show
// how to get the index by subtracting pointers.
//
// Note:  + and - have higher precedences than << and >>.
//

#include <cstdlib>
#include <iomanip>
#include <iostream>

using namespace std;

int main (int argc, char **argv) {
   cout << "argv = " << static_cast<void*> (argv) << endl;
   for (char **itor = argv; itor != argv + argc; ++itor) {
      cout << "argv[" << itor - argv << "] = "
           << static_cast<void*> (*itor)
           << " -> \"" << *itor << "\"" << endl;
   }
   cout << "main = " << reinterpret_cast<void*> (main) << endl;
   return EXIT_SUCCESS;
}

//TEST// runprogram.perl -x arrayptr.lis ./arrayptr foo bar baz qux quux
//TEST// mkpspdf arrayptr.ps arrayptr.cpp arrayptr.lis

@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.21 2012-04-05 16:47:20-07 - - $
d21 1
a21 1
           << static_cast<void*> (itor)
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.20 2012-04-04 17:23:19-07 - - $
d18 1
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.19 2012-04-04 17:20:10-07 - - $
a16 13
void print_macros () {
   cout << "__FILE__ = \"" << __FILE__ << "\"" << endl;
   cout << "__LINE__ = \"" << __LINE__ << "\"" << endl;
   cout << "__func__ = \"" << __func__ << "\"" << endl;
   cout << "__DATE__ = \"" << __DATE__ << "\"" << endl;
   cout << "__TIME__ = \"" << __TIME__ << "\"" << endl;
   cout << "__STDC__ = \"" << __STDC__ << "\"" << endl;
   cout << "__cplusplus = \"" << __cplusplus << "\"" << endl;
   cout << "__unix__ = \"" << __unix__ << "\"" << endl;
   cout << "__linux__ = \"" << __linux__ << "\"" << endl;
   cout << "__x86_64__ = \"" << __x86_64__ << "\"" << endl;
}

a23 3
   cout << "print_macros = " << reinterpret_cast<void*> (print_macros)
        << endl;
   print_macros ();
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.18 2012-04-04 17:18:28-07 - - $
d27 1
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.17 2012-04-04 17:17:54-07 - - $
a22 1
   cout << "__TIMESTAMP__ = \"" << __TIMESTAMP__ << "\"" << endl;
d25 2
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.16 2012-04-04 17:12:34-07 - - $
d20 1
d23 1
a23 1
   cout << "__func__ = \"" << __func__ << "\"" << endl;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.15 2012-04-04 17:11:36-07 - - $
d23 1
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.14 2012-04-04 17:10:34-07 - - $
d18 6
a23 5
   cout << "__FILE__ = " << __FILE__ << endl;
   cout << "__LINE__ = " << __LINE__ << endl;
   cout << "__DATE__ = " << __DATE__ << endl;
   cout << "__TIME__ = " << __TIME__ << endl;
   cout << "__func__ = " << __func__ << endl;
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.13 2012-04-04 17:10:01-07 - - $
d18 5
a22 4
   cout << "__FILE__ = " << __FILE__ << ", __LINE__ = " << __LINE__ 
        << ", __func__ = " << __func__ << endl;
   cout << "__DATE__ = " << __DATE__ << ", __TIME__ = " << __TIME__
        << endl;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.12 2012-04-04 17:09:37-07 - - $
d31 2
a32 1
   cout << "print_macros = " << reinterpret_cast<void*> (print_macros) << endl;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.11 2012-04-04 17:08:42-07 - - $
d30 2
a31 2
   cout << "main = " << reinterpret_cast<void*> (&main) << endl;
   cout << "print_macros = " << reinterpret_cast<void*> (&print_macros) << endl;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.10 2012-04-04 17:03:01-07 - - $
d26 2
a27 2
      cout << "argv[" << itor - argv << "] = " << static_cast<void*>
(itor)
d30 2
a31 2
   cout << "main = " << static_cast<void*> (&main) << endl;
   cout << "print_macros = " << static_cast<void*> (&print_macros) << endl;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.9 2012-04-04 17:01:53-07 - - $
d30 2
a31 2
   cout << "main = " << static_cast<void*> (main) << endl;
   cout << "print_macros = " << static_cast<void*> (print_macros) << endl;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.8 2011-01-04 21:23:25-08 - - $
d26 2
a27 1
      cout << "argv[" << itor - argv << "] = " << (void *) itor
d30 2
a31 2
   cout << "main = " << main << endl;
   cout << "print_macros = " << print_macros << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.7 2011-01-04 21:19:27-08 - - $
d17 1
a17 2
void function () {
   cout << "(void*) function " << (void*) function << endl;
d25 3
a27 4
   (void) argc; // SUPPRESS: warning: unused parameter 'argc' 
   for (char **itor = argv; *itor != NULL; ++itor) {
      cout << itor - argv << " " << (void*) itor
           << " \"" << *itor << "\"" << endl;
d29 3
a31 1
   function();
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.6 2011-01-04 21:18:07-08 - - $
d20 1
a20 1
        << ", __func__ =  " << __func__ << endl;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.5 2011-01-04 21:17:32-08 - - $
d19 4
a22 3
   cout << "file " << __FILE__ << " line " << __LINE__ 
        << " function " << __func__ << endl;
   cout << "compiled " << __DATE__ << " " << __TIME__ << endl;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.4 2011-01-04 21:16:52-08 - - $
d20 1
a20 1
        << function " << __func__ << endl;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.3 2011-01-04 21:14:14-08 - - $
d19 1
a19 1
   cout << "file " << __FILE__ << " line " << __LINE__ "
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.2 2011-01-04 21:11:58-08 - - $
d19 3
a21 1
   cout << "function " << __func__ << endl;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.1 2011-01-04 21:09:25-08 - - $
d19 1
a19 1
   cout << "function " << function << endl;
d23 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cc,v 1.1 2010-01-07 20:16:51-08 - - $
a16 4
ostream &operator<< (ostream &out, bool boolean) {
   return out << (boolean ? "true" : "false");
}

@

head	1.35;
access;
symbols;
locks;
comment	@// @;


1.35
date	2014.03.28.02.17.41;	author -;	state -;
branches;
next	1.34;

1.34
date	2013.01.08.03.04.37;	author -;	state -;
branches;
next	1.33;

1.33
date	2012.11.29.04.55.35;	author -;	state -;
branches;
next	1.32;

1.32
date	2012.04.06.01.20.59;	author -;	state -;
branches;
next	1.31;

1.31
date	2012.04.06.01.19.38;	author -;	state -;
branches;
next	1.30;

1.30
date	2012.04.06.01.18.41;	author -;	state -;
branches;
next	1.29;

1.29
date	2012.04.06.01.18.03;	author -;	state -;
branches;
next	1.28;

1.28
date	2012.04.06.01.17.25;	author -;	state -;
branches;
next	1.27;

1.27
date	2012.04.06.01.15.35;	author -;	state -;
branches;
next	1.26;

1.26
date	2012.04.06.01.15.19;	author -;	state -;
branches;
next	1.25;

1.25
date	2012.04.06.01.14.33;	author -;	state -;
branches;
next	1.24;

1.24
date	2012.04.06.01.14.11;	author -;	state -;
branches;
next	1.23;

1.23
date	2012.04.06.01.11.36;	author -;	state -;
branches;
next	1.22;

1.22
date	2012.04.06.01.11.03;	author -;	state -;
branches;
next	1.21;

1.21
date	2012.04.06.01.00.46;	author -;	state -;
branches;
next	1.20;

1.20
date	2012.04.06.01.00.12;	author -;	state -;
branches;
next	1.19;

1.19
date	2012.04.06.00.57.10;	author -;	state -;
branches;
next	1.18;

1.18
date	2012.04.06.00.57.02;	author -;	state -;
branches;
next	1.17;

1.17
date	2012.04.06.00.56.49;	author -;	state -;
branches;
next	1.16;

1.16
date	2012.04.06.00.56.12;	author -;	state -;
branches;
next	1.15;

1.15
date	2012.04.06.00.49.52;	author -;	state -;
branches;
next	1.14;

1.14
date	2012.04.06.00.49.15;	author -;	state -;
branches;
next	1.13;

1.13
date	2012.04.06.00.48.37;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.04.06.00.47.11;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.04.06.00.46.20;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.04.06.00.45.30;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.04.06.00.45.10;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.04.06.00.44.38;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.04.06.00.04.35;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.04.06.00.02.04;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.04.06.00.00.54;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.04.05.23.59.07;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.04.05.23.57.25;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.05.23.57.03;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.05.23.51.22;	author -;	state -;
branches;
next	;


desc
@@


1.35
log
@-
@
text
@// $Id: predefmacros.cpp,v 1.34 2013-01-07 19:04:37-08 - - $

//
// Print out the valuas of various macros and test whether some
// compiler and operating system flags are present.
//
// References:
// http://sourceforge.net/apps/mediawiki/predef/
// See links to Compilers and Operating Systems
//

#include <cassert>
#include <cstdlib>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <string>

using namespace std;

#ifdef __unix__

#include <cerrno>
#include <cstdio>
#include <cstring>

const string uname_args[] = {
   "kernel-name", 
   "nodename", 
   "kernel-release", 
   "kernel-version", 
   "machine", 
   "processor", 
   "hardware-platform", 
   "operating-system", 
};
const unsigned uname_size = sizeof uname_args / sizeof *uname_args;

void print_unames () {
   const string *const end = uname_args + uname_size;
   string command = "date\n";
   for (const string *itor = uname_args; itor < end; ++itor) {
      command += "echo uname --" + *itor
               + " = `uname --" + *itor + "`\n";
   }
   system (command.c_str());
}

#else

void print_unames () {
   throw "Praeterea, censeo Microflaccidem esse delendam.";
}

#endif


int main () {
   print_unames ();

   cout << "__FILE__ = \"" << __FILE__ << "\"" << endl;
   cout << "__LINE__ = \"" << __LINE__ << "\"" << endl;
   cout << "__func__ = \"" << __func__ << "\"" << endl;
   cout << "__DATE__ = \"" << __DATE__ << "\"" << endl;
   cout << "__TIME__ = \"" << __TIME__ << "\"" << endl;
   cout << "__STDC__ = \"" << __STDC__ << "\"" << endl;
   cout << "__cplusplus = \"" << __cplusplus << "\"" << endl;

   #ifdef __unix__
   cout << "__unix__ = \"" << __unix__ << "\"" << endl;
   #endif

   #ifdef __linux__
   cout << "__linux__ = \"" << __linux__ << "\"" << endl;
   #endif

   #ifdef __x86_64__
   cout << "__x86_64__ = \"" << __x86_64__ << "\"" << endl;
   #endif

   #ifdef __GNUC__
   cout << "__GNUC__ = \"" << __GNUC__ << "\"" << endl;
   cout << "__GNUC_MINOR__ = \"" << __GNUC_MINOR__ << "\"" << endl;
   cout << "__GNUC_PATCHLEVEL__ = \"" << __GNUC_PATCHLEVEL__ << "\""
        << endl;
   #endif

   return 0;
}

//TEST// ./predefmacros >predefmacros.lis 2>&1
//TEST// mkpspdf predefmacros.ps predefmacros.cpp* predefmacros.lis

@


1.34
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.33 2012-11-28 20:55:35-08 - - $
a87 3
   cout << "_POSIX_VERSION = \"" << _POSIX_VERSION << "\"" << endl;
   cout << "_XOPEN_VERSION = \"" << _XOPEN_VERSION << "\"" << endl;

d91 1
a91 1
//TEST// runprogram.perl -x predefmacros.lis ./predefmacros
@


1.33
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.32 2012-04-05 18:20:59-07 - - $
d95 1
a95 1
//TEST// mkpspdf predefmacros.ps predefmacros.cpp predefmacros.lis
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.31 2012-04-05 18:19:38-07 - - $
d4 2
a5 3
// Print out addresses of array elements.  Show how to use a 
// pointer to iterate over an array instead of an index.  Show
// how to get the index by subtracting pointers.
d7 3
a9 3
// Note:  + and - have higher precedences than << and >>.
//
// Reference: http://sourceforge.net/apps/mediawiki/predef/
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.30 2012-04-05 18:18:41-07 - - $
d42 1
a42 1
   string command;
d58 1
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.29 2012-04-05 18:18:03-07 - - $
d58 1
a58 5
string basename (string str) {
   return str.substr (str.rfind ("/"));
}

int main (int argc, char **argv) {
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.27 2012-04-05 18:15:35-07 - - $
d44 2
a45 1
      command += "echo uname --" + *itor + " = `uname --" + *itor + "`\n";
d47 1
a47 1
   cout << command;
@


1.28
log
@-
@
text
@d44 1
a44 1
      command += "echo uname " + *itor + "`uname --" + *itor + "`\n";
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.26 2012-04-05 18:15:19-07 - - $
d42 1
d44 1
a44 1
      system (("uname --" + *itor).c_str());
d46 1
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.25 2012-04-05 18:14:33-07 - - $
d43 1
a43 1
      system (("popen --" + *itor).c_str());
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.24 2012-04-05 18:14:11-07 - - $
d60 1
a60 1
   assert (argc == argc); // Avoid: warning: unused parameter 'argc'
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.23 2012-04-05 18:11:36-07 - - $
d43 1
a43 1
      system ("popen --" + *itor);
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.22 2012-04-05 18:11:03-07 - - $
a21 7
#include <boost/iostreams/device/file_descriptor.hpp>
#include <boost/iostreams/stream.hpp>
namespace io = boost::iostreams;

string execname = "";
int exit_status = 0;

d43 1
a43 17
      string command = "popen --" + *itor;
      FILE *pipe = popen (command.c_str(), "r");
      if (pipe == NULL) {
         cout << flush;
         cerr << execname << ": popen (" << command << "): "
              << strerror (errno) << endl;
         exit_status = 1;
      }else {
         io::stream_buffer<io::file_descriptor_source> fpstream (fileno(pipe));
         std::istream input(&fpstream);
         while (input.good ()) {
            string line;
            getline (input, line);
            cout << line << endl;
         }
         fclose (pipe);
      }
a61 2
   execname = basename (argv[0]);

d92 1
a92 1
   return exit_status;
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.21 2012-04-05 18:00:46-07 - - $
d22 1
a22 1
#include boost/iostreams/device/file_descriptor.hpp>
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.20 2012-04-05 18:00:12-07 - - $
d22 4
d58 3
a60 2
         ifstream file (fileno (pipe));
         while (file.good ()) {
d62 2
a63 2
            getline (file, line);
            cout << line << flush; // Already has a \n at EOL.
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.19 2012-04-05 17:57:10-07 - - $
d54 1
a54 1
         ifstream file (fileno (file));
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.17 2012-04-05 17:56:49-07 - - $
d15 1
@


1.18
log
@-
@
text
@d13 1
a15 1
#include <assert>
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.16 2012-04-05 17:56:12-07 - - $
d15 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.15 2012-04-05 17:49:52-07 - - $
d76 2
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.14 2012-04-05 17:49:15-07 - - $
d72 1
a72 1
   return str.substr (str.lastpos ("/"));
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.11 2012-04-05 17:46:20-07 - - $
d60 1
@


1.13
log
@-
@
text
@d45 1
a45 1
      FILE *pipe = popen (command.cstr(), "r");
@


1.12
log
@-
@
text
@d39 1
d42 1
a42 1
   const string *const end = uname_args + sizeof uname_args / sizeof *uname_args;
d45 1
a45 1
      FILE *pipe = popen (command.str(), "r");
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.10 2012-04-05 17:45:30-07 - - $
d41 2
a42 2
   string *end = uname_args + sizeof uname_args / sizeof *uname_args;
   for (string *itor = uname_args; itor < end; ++itor) {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.9 2012-04-05 17:45:10-07 - - $
d29 1
a29 1
const string unames[] = {
d41 2
a42 2
   string *end = string + sizeof string / sizeof *string;
   for (string *itor = unames; itor < end; ++itor) {
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.8 2012-04-05 17:44:38-07 - - $
d16 1
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.7 2012-04-05 17:04:35-07 - - $
d42 1
a42 1
      string command = "popen --" + *itor";
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.6 2012-04-05 17:02:04-07 - - $
d19 53
d73 1
d105 1
a105 1
   return EXIT_SUCCESS;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.5 2012-04-05 17:00:54-07 - - $
d19 2
a20 1
void print_macros () {
d44 2
a45 1
   cout << "__GNUC_PATCHLEVEL__ = \"" << __GNUC_PATCHLEVEL__ << "\"" << endl;
a49 1
}
a50 10
int main (int argc, char **argv) {
   for (char **itor = argv; itor != argv + argc; ++itor) {
      cout << "argv[" << itor - argv << "] = "
           << static_cast<void*> (itor)
           << " -> \"" << *itor << "\"" << endl;
   }
   cout << "main = " << reinterpret_cast<void*> (main) << endl;
   cout << "print_macros = " << reinterpret_cast<void*> (print_macros)
        << endl;
   print_macros ();
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.4 2012-04-05 16:59:07-07 - - $
d42 2
a43 2
   cout << "__GNUC_MINOR_ = \"" << __GNUC_MINOR_ << "\"" << endl;
   cout << "__GNUC_PATCHLEVEL_ = \"" << __GNUC_PATCHLEVEL_ << "\"" << endl;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.3 2012-04-05 16:57:25-07 - - $
d42 2
d45 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.2 2012-04-05 16:57:03-07 - - $
d40 3
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: predefmacros.cpp,v 1.1 2012-04-05 16:51:22-07 - - $
d28 1
a28 1
   #ifdefined __unix__
d32 1
a32 1
   #ifdefined __linux__
d36 1
a36 1
   #ifdefined __x86_64__
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: arrayptr.cpp,v 1.20 2012-04-04 17:23:19-07 - - $
d10 2
d27 2
d30 3
d34 3
d38 4
d57 2
a58 2
//TEST// runprogram.perl -x .lis ./arrayptr foo bar baz qux quux
//TEST// mkpspdf arrayptr.ps arrayptr.cpp arrayptr.lis
@

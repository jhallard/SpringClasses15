head	1.8;
access;
symbols;
locks;
comment	@// @;


1.8
date	2012.03.30.06.06.48;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.03.30.06.05.54;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.03.30.06.05.04;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.01.06.03.48.57;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.01.06.03.48.40;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.01.06.03.46.57;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.01.05.05.20.39;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.01.05.05.20.01;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: mapitor.cpp,v 1.5 2011-01-05 19:48:57-08 - - $

//
// mapitor - put argv values into a map and iterate over them
//

#include <cstdlib>
#include <iostream>
#include <map>
#include <string>

using namespace std;

typedef map <string, int> strintmap;

void load_map (strintmap &map, const char *const *const argv) {
   for (const char *const *itor = argv; *itor != NULL; ++itor) {
      map[*itor] = itor - argv;
   }
}

void print_map (const strintmap &map) {

   cout << endl << "Forward iterator:" << endl;
   strintmap::const_iterator fwd_itor = map.begin();
   strintmap::const_iterator fwd_end = map.end();
   for (; fwd_itor != fwd_end; ++fwd_itor) {
      cout << "   " << fwd_itor->first
           << " " << fwd_itor->second << endl;
   }

   cout << endl << "Reverse iterator:" << endl;
   strintmap::const_reverse_iterator rev_itor = map.rbegin();
   strintmap::const_reverse_iterator rev_end = map.rend();
   for (; rev_itor != rev_end; ++rev_itor) {
      cout << "   " << rev_itor->first
           << " " << rev_itor->second << endl;
   }
}

int main (int argc, char **argv) {
   strintmap map;
   load_map (map, argv);
   print_map (map);
   return EXIT_SUCCESS;
}

//TEST// runprogram.perl -x mapitor.lis ./mapitor foo bar baz qux quux
//TEST// mkpspdf mapitor.ps mapitor.cpp mapitor.lis

@


1.7
log
@-
@
text
@a41 2
   (void) argc; // SUPPRESS:40: warning: unused parameter 'argc'

@


1.6
log
@-
@
text
@d17 1
a17 1
   for (char **itor = argv; *itor != NULL; ++itor) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: mapitor.cpp,v 1.4 2011-01-05 19:48:40-08 - - $
d14 1
a14 1
typedef map <string, int> strstrmap;
d16 1
a16 1
void load_map (strstrmap &map, char **argv) {
d22 1
a22 1
void print_map (strstrmap &map) {
d25 2
a26 2
   strstrmap::const_iterator fwd_itor = map.begin();
   strstrmap::const_iterator fwd_end = map.end();
d33 2
a34 2
   strstrmap::const_reverse_iterator rev_itor = map.rbegin();
   strstrmap::const_reverse_iterator rev_end = map.rend();
d44 1
a44 1
   strstrmap map;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: mapitor.cpp,v 1.3 2011-01-05 19:46:57-08 - - $
a35 1
   while (rev_itor != map.rbegin()) {
d38 1
a38 1
   };
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: mapitor.cpp,v 1.2 2011-01-04 21:20:39-08 - - $
d26 2
a27 1
   for (; fwd_itor != map.end(); ++fwd_itor) {
d33 4
a36 3
   strstrmap::const_reverse_iterator rev_itor = map.end();
   while (rev_itor != map.begin()) {
      --rev_itor;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: mapitor.cpp,v 1.1 2011-01-04 21:20:01-08 - - $
d32 1
a32 1
   strstrmap::const_iterator rev_itor = map.end();
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: mapitor.cc,v 1.1 2010-01-07 20:16:51-08 - - $
d41 2
@

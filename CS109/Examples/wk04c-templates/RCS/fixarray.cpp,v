head	1.13;
access;
symbols;
locks;
comment	@// @;


1.13
date	2013.07.31.02.32.23;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.07.29.20.56.44;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.05.11.02.25.37;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.05.11.02.25.23;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.05.11.02.24.46;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.05.11.02.22.08;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.05.11.02.20.31;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.05.11.02.19.07;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.05.11.02.18.51;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.05.11.02.18.32;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.05.11.02.18.01;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.05.11.02.17.39;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.05.11.02.06.42;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@// $Id: fixarray.cpp,v 1.12 2013-07-29 13:56:44-07 - - $

//
// Illustrate inline fixed-size array that does not use any heap.
// Useful only for embedded systems, and only if the type parameter
// also does not use any heap.  C.f. valarray in the STL.
//

#include <iostream>
#include <stdexcept>

using namespace std;

/////////////////////////////////////////////////////////////////
// fixarray.h
/////////////////////////////////////////////////////////////////

template <typename item_t, size_t _size>
class fixarray {
   private:
      item_t _data[_size];
   public:
      explicit fixarray (item_t def = item_t());
      // Three other deffault members OK to default.
      inline size_t size() const { return _size; }
      inline const item_t &operator[] (size_t pos) const { // x = a[i];
         return _data[pos];
      }
      inline item_t &operator[] (size_t pos) { // a[i] = x;
         return _data[pos];
      }
};

/////////////////////////////////////////////////////////////////
// fixarray.cpp
/////////////////////////////////////////////////////////////////

template <typename item_t, size_t _size>
fixarray<item_t,_size>::fixarray (item_t def) {
   for (size_t pos = 0; pos < _size; ++pos) _data[pos] = def;
}


/////////////////////////////////////////////////////////////////
// main.cpp
/////////////////////////////////////////////////////////////////

template <size_t size>
void printarray (fixarray<double, size> &fd) {
   cout << "fixarray:";
   for (size_t i = 0; i < fd.size(); ++i) cout << " " << fd[i];
   cout << endl;
}

int main() {
   fixarray<double,10> fd1;
   for (size_t i = 2; i < 7; ++i) fd1[i] = i * 9999;
   printarray<10> (fd1);
   fixarray<double,10> fd2 (3.1415926535);
   for (size_t i = 2; i < 9; ++i) fd2[i] = i;
   printarray<10> (fd2);
   return 0;
}

/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=fixarray.out.grind \
//TEST//       fixarray >fixarray.out 2>&1
//TEST// mkpspdf fixarray.ps fixarray.cpp* fixarray.out*
*/

@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.11 2012-05-10 19:25:37-07 - - $
a21 1
      void range_check (size_t pos) const;
d25 7
a31 3
      size_t size() const { return _size; }
      const item_t &operator[] (size_t pos) const; // x = a[i];
      item_t &operator[] (size_t pos); // a[i] = x;
a38 5
void fixarray<item_t,_size>::range_check (size_t pos) const {
   if (pos >= _size) throw out_of_range ("fixarray::range_check");
}

template <typename item_t, size_t _size>
a42 12
template <typename item_t, size_t _size>
const item_t &fixarray<item_t,_size>::operator[] (size_t pos) const {
   range_check (pos);
   return _data[pos];
}

template <typename item_t, size_t _size>
item_t &fixarray<item_t,_size>::operator[] (size_t pos) {
   range_check (pos);
   return _data[pos];
}

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.10 2012-05-10 19:25:23-07 - - $
d6 1
a6 1
// also does not use any heap.
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.9 2012-05-10 19:24:46-07 - - $
d57 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.8 2012-05-10 19:22:08-07 - - $
d70 1
a70 1
   for (size_t i = 2; i < 9; ++i) fd1[i] = i * 9999;
d73 1
a73 1
   for (size_t i = 2; i < 9; ++i) fd2[i] = i * 9999;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.7 2012-05-10 19:20:31-07 - - $
d61 7
d69 6
a74 6
   fixarray<double,10> fd;
   for (size_t i = 2; i < 9; ++i) fd[i] = i * 9999;
   for (size_t i = 0; i < fd.size(); ++i) cout << " " << fd[i] << endl;
   fixarray<double,10> fd (99);
   for (size_t i = 2; i < 9; ++i) fd[i] = i * 9999;
   for (size_t i = 0; i < fd.size(); ++i) cout << " " << fd[i] << endl;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.6 2012-05-10 19:19:07-07 - - $
d63 4
a66 1
   for (size_t i = 2; i < 5; ++i) fd[i] = i * 3;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.5 2012-05-10 19:18:51-07 - - $
d52 1
a52 1
item_t &fixarray<item_t,_size>::operator[] (size_t pos); // a[i] = x {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.4 2012-05-10 19:18:32-07 - - $
d42 1
a42 1
   for (size_t pos = 0; pos < _size; ++pos) data[pos] = def;
d48 1
a48 1
   return data[pos];
d54 1
a54 1
   return data[pos];
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.3 2012-05-10 19:18:01-07 - - $
d41 1
a41 1
void fixarray<item_t,_size>::fixarray (item_t def) {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.2 2012-05-10 19:17:39-07 - - $
d24 1
a24 1
      explicit fixarray (item_t default = item_t());
d41 2
a42 2
void fixarray<item_t,_size>::fixarray (item_t default) {
   for (size_t pos = 0; pos < _size; ++pos) data[pos] = default;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: fixarray.cpp,v 1.1 2012-05-10 19:06:42-07 - - $
d20 1
a20 1
   private;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d15 1
a15 1
// 
d18 57
@

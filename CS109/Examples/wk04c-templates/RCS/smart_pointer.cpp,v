head	1.20;
access;
symbols;
locks;
comment	@// @;


1.20
date	2014.04.23.02.21.58;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.04.23.02.17.38;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.07.29.20.38.00;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.07.29.20.36.16;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.07.29.20.32.27;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.07.29.20.30.32;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.07.27.03.42.39;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.07.27.03.41.06;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.07.27.03.40.45;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.07.27.03.40.15;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.07.27.03.39.18;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.07.27.03.18.28;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.07.27.00.56.49;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.07.27.00.38.04;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.07.27.00.37.25;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.07.27.00.28.29;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.07.27.00.28.14;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.07.27.00.27.32;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.07.27.00.27.02;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.07.26.22.45.40;	author -;	state -;
branches;
next	;


desc
@@


1.20
log
@-
@
text
@// $Id: smart_pointer.cpp,v 1.19 2014-04-22 19:17:38-07 - - $

//
// Smart pointer class encapsulating a pointer, like shared_ptr.
//

#include <iostream>
using namespace std;

/////////////////////////////////////////////////////////////////
// pointer.h
/////////////////////////////////////////////////////////////////

template <typename Type>
class pointer {
      template <typename U>
      friend ostream& operator<< (ostream& , const pointer<U>& );

   private:

      // Invariant: ref_count == obj_ptr == NULL
      //            ref_count->count on heap, obj_ptr->object itself

      size_t* ref_count;
      Type* obj_ptr;

      // Auxiliary functions.

      inline void increment_count() {
         if (ref_count) ++*ref_count;
      }

      inline void copy_that (size_t* ref, Type* obj) {
         if (ref_count and --*ref_count == 0) {
            delete ref_count;
            delete obj_ptr;
         }
         ref_count = ref;
         obj_ptr = obj;
      }

      inline void clear_that (pointer& that) const {
         that.ref_count = NULL;
         that.obj_ptr = NULL;
      }


   public:
      // Replace implicitly generated functions.

      pointer(): ref_count (NULL), obj_ptr (NULL) {}

      pointer (const pointer& that):
         ref_count (that.ref_count),
         obj_ptr (that.obj_ptr)
      {
         increment_count();
      }

      pointer (pointer&& that):
         ref_count (that.ref_count),
         obj_ptr (that.obj_ptr)
      {
         clear_that (that);
      }

      pointer& operator= (const pointer& that) {
         if (this == &that) return *this;
         copy_that (that.ref_count, that.obj_ptr);
         increment_count();
         return *this;
      }

      pointer& operator= (pointer&& that) {
         if (this == &that) return *this;
         copy_that (that.ref_count, that.obj_ptr);
         clear_that (that);
         return *this;
      }

      ~pointer() { copy_that (NULL, NULL); }

      // Other constructors.


      pointer (Type* p_obj_ptr): ref_count (new size_t (1)),
                              obj_ptr (p_obj_ptr) {
      }

      // Mutators (non-const functions).

      inline Type& operator*() { return *obj_ptr; }

      inline Type* operator->() { return obj_ptr; }


      // Accessors (const functions).

      inline const Type& operator*() const { return *obj_ptr; }

      inline const Type* operator->() const { return obj_ptr; }

      inline operator bool() { return obj_ptr; }

      inline bool operator== (const pointer& that) const {
         return obj_ptr == that.obj_ptr;
      }

      inline bool operator!= (const pointer& that) const {
         return not (*this == that);
      }

      size_t users() const { return ref_count ? *ref_count : 0; }

      size_t unique() const { return users() == 1; }

      size_t empty() const { return users() == 0; }
};

template <typename Type>
ostream& operator<< (ostream& out, const pointer<Type>& that) {
   out << that.obj_ptr << "[" << *that.ref_count << "]";
   return out;
}


/////////////////////////////////////////////////////////////////
// Main program.
/////////////////////////////////////////////////////////////////

struct node {
   string str;
   pointer<node> link;
   node (const char* s, pointer<node> p = nullptr): str (s), link (p) {
   }
};

int main (int argc, char** argv) {
   pointer<node> head, tail;
   for (int i = 0; i < argc; ++i) {
      pointer<node> tmp = pointer<node> (new node (argv[i]));
      if (head == nullptr) head = tmp;
                      else tail->link = tmp;
      tail = tmp;
   }
   for (pointer<node> p = head; p != nullptr; p = p->link) {
      cout << p << "->\"" << p->str << "\"" << endl;
   }
   return 0;
}

//TEST// ./smart_pointer hello world foo bar baz >smart_pointer.out 2>&1
//TEST// mkpspdf smart_pointer.ps smart_pointer.cpp* smart_pointer.out

@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.18 2013-07-29 13:38:00-07 - - $
d17 1
a17 1
      friend ostream &operator<< (ostream &, const pointer<U> &);
d24 2
a25 2
      size_t *ref_count;
      Type *obj_ptr;
d33 2
a34 2
      inline void copy_that (size_t *ref, Type *obj) {
         if (ref_count && --*ref_count == 0) {
d42 1
a42 1
      inline void clear_that (pointer &&that) const {
d53 1
a53 1
      pointer (const pointer &that):
d60 1
a60 1
      pointer (pointer &&that):
d67 1
a67 1
      pointer &operator= (const pointer &that) {
d74 1
a74 1
      pointer &operator= (pointer &&that) {
d86 1
a86 1
      pointer (Type *p_obj_ptr): ref_count (new size_t (1)),
d92 1
a92 1
      inline Type &operator*() { return *obj_ptr; }
d94 1
a94 1
      inline Type *operator->() { return obj_ptr; }
d99 1
a99 1
      inline const Type &operator*() const { return *obj_ptr; }
d101 1
a101 1
      inline const Type *operator->() const { return obj_ptr; }
d105 1
a105 1
      inline bool operator== (const pointer &that) const {
d109 1
a109 1
      inline bool operator!= (const pointer &that) const {
d121 1
a121 1
ostream &operator<< (ostream &out, const pointer<Type> &that) {
d134 1
a134 1
   node (const char *s, pointer<node> p = nullptr): str (s), link (p) {
d138 1
a138 1
int main (int argc, char **argv) {
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.17 2013-07-29 13:36:16-07 - - $
a7 1

a10 12
// nilptr.h
/////////////////////////////////////////////////////////////////

// nilptr_t and nilptr used instead of C++11 nullptr_t and nullptr
// because the current compiler does not support nullptr.

static const struct nilptr_t{
   inline operator bool() { return false; }
} nilptr{};


/////////////////////////////////////////////////////////////////
a84 2
      pointer (const nilptr_t &): ref_count (NULL), obj_ptr (NULL) {
      }
a91 6
      pointer &operator= (const nilptr_t &) {
         // nilptr_t can not be *this.
         copy_that (NULL, NULL);
         return *this;
      }

a108 4
      inline bool operator== (const nilptr_t &) const {
         return obj_ptr == NULL;
      }

a112 4
      inline bool operator!= (const nilptr_t &) const {
         return not (*this == nilptr);
      }

a120 10
bool operator== (const nilptr_t &, const pointer<Type> &that) {
   return that == nilptr;
}

template <typename Type>
bool operator!= (const nilptr_t &, const pointer<Type> &that) {
   return that != nilptr;
}

template <typename Type>
d134 1
a134 1
   node (const char *s, pointer<node> p = nilptr): str (s), link (p) {
d142 2
a143 2
      if (head == nilptr) head = tmp;
                     else tail->link = tmp;
d146 1
a146 1
   for (pointer<node> p = head; p != nilptr; p = p->link) {
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.16 2013-07-29 13:32:27-07 - - $
d27 1
a27 1
template <typename T>
d38 1
a38 1
      T *obj_ptr;
d46 1
a46 1
      inline void copy_that (size_t *ref, T *obj) {
d101 1
a101 1
      pointer (T *p_obj_ptr): ref_count (new size_t (1)),
d113 1
a113 1
      T &operator*() { return *obj_ptr; }
d115 1
a115 1
      T *operator->() { return obj_ptr; }
d120 1
a120 1
      const T &operator*() const { return *obj_ptr; }
d122 1
a122 1
      const T *operator->() const { return obj_ptr; }
d124 1
a124 1
      operator bool() { return obj_ptr; }
d126 1
a126 1
      bool operator== (const pointer &that) const {
d130 1
a130 1
      bool operator== (const nilptr_t &) const {
d134 1
a134 1
      bool operator!= (const pointer &that) const {
d138 1
a138 1
      bool operator!= (const nilptr_t &) const {
d142 1
a142 1
      size_t users() const { return *ref_count; }
d149 2
a150 2
template <typename T>
bool operator== (const nilptr_t &, const pointer<T> &that) {
d154 2
a155 2
template <typename T>
bool operator!= (const nilptr_t &, const pointer<T> &that) {
d159 2
a160 2
template <typename T>
ostream &operator<< (ostream &out, const pointer<T> &that) {
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.15 2013-07-29 13:30:32-07 - - $
d107 6
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.14 2013-07-26 20:42:39-07 - - $
d46 1
a46 1
      inline void replace_this (size_t *ref, T *obj) {
d82 1
a82 1
         replace_this (that.ref_count, that.obj_ptr);
d89 1
a89 1
         replace_this (that.ref_count, that.obj_ptr);
d94 1
a94 1
      ~pointer() { replace_this (NULL, NULL); }
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.13 2013-07-26 20:41:06-07 - - $
d42 1
a42 1
      void increment_count() {
d46 1
a46 1
      void decrement_count() {
d51 2
d55 1
a55 1
      void clear_that (pointer &&that) const {
a59 6
      void copy_that (const pointer &that) {
         decrement_count();
         ref_count = that.ref_count;
         obj_ptr = that.obj_ptr;
      }

d82 1
a82 1
         copy_that (that);
d89 1
a89 1
         copy_that (that);
d94 1
a94 1
      ~pointer() { decrement_count(); }
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.12 2013-07-26 20:40:45-07 - - $
d115 1
d163 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.11 2013-07-26 20:40:15-07 - - $
d158 1
a158 1
   out << that.obj_ptr << "[" << *that.ref << "]";
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.10 2013-07-26 20:39:18-07 - - $
d94 1
a94 1
         clear_that (that)
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.9 2013-07-26 20:18:28-07 - - $
d11 4
d22 1
d64 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.8 2013-07-26 17:56:49-07 - - $
d11 2
a12 3
/////////////////////////////////////////////////////////////////
// pointer.h
/////////////////////////////////////////////////////////////////
d18 4
d26 1
d28 4
a31 1
      // Invariant: ref_count==obj_ptr==NULL or both point at data.
d34 25
a58 4
      void incr() { if (ref_count) ++*ref_count; }
      void decr() { if (ref_count && --*ref_count == 0) { delete ref_count; delete obj_ptr; }}
      void clear (pointer &&p) const { that.ref_count = NULL; that.obj_ptr = NULL; }
      void copy (const pointer &p) { decr(); ref_count = that.ref_count; obj_ptr = that.obj_ptr; }
d61 21
a81 5
      pointer(): ref_count(NULL), obj_ptr(NULL) {}
      pointer (const pointer &p): ref_count(that.ref_count), obj_ptr(that.obj_ptr) { incr(); }
      pointer (pointer &&p): ref_count(that.ref_count), obj_ptr(that.obj_ptr) { clear(p); }
      pointer &operator= (const pointer &p) {
         if (this != &p) { copy(p); incr(); }
d84 5
a88 2
      pointer &operator= (pointer &&p) {
         if (this != &p) { copy(p); clear(p); }
d91 14
a104 4
      ~pointer() { decr(); }
      // Add member functions.
      pointer(const nilptr_t &): ref_count(NULL), obj_ptr(NULL) {}
      pointer (T *p_obj_ptr): ref_count(new size_t(1)), obj_ptr(p_obj_ptr) {}
d106 5
d112 1
a112 1
      T *operator->() { return obj_ptr; }
d114 1
d116 17
a132 4
      bool operator== (const pointer &p) { return obj_ptr == that.obj_ptr; }
      bool operator!= (const pointer &p) { return not (*this == p); }
      bool operator== (const nilptr_t &) { return obj_ptr == NULL; }
      bool operator!= (const nilptr_t &) { return obj_ptr != NULL; }
d134 1
d136 1
d141 2
a142 2
bool operator== (const nilptr_t &n, const pointer<T> &p) {
   return p == n;
d146 2
a147 2
bool operator!= (const nilptr_t &n, const pointer<T> &p) {
   return p != n;
d151 1
a151 1
ostream &operator<< (ostream &out, const pointer<T> &p) {
d163 2
a164 1
   node (const char *s, pointer<node> p = nilptr): str(s), link(p) {};
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.6 2013-07-26 17:37:25-07 - - $
d15 3
a17 1
static const class nilptr_t{} nilptr{};
d24 7
a30 7
      // Invariant: ref==obj==NULL or both point at data.
      size_t *ref; // Reference count
      T *obj;   // Object pointed at
      void incr() { if (ref) ++*ref; }
      void decr() { if (ref && --*ref == 0) { delete ref; delete obj; }}
      void clear (pointer &&p) const { p.ref = NULL; p.obj = NULL; }
      void copy (const pointer &p) { decr(); ref = p.ref; obj = p.obj; }
d33 3
a35 3
      pointer(): ref(NULL), obj(NULL) {}
      pointer (const pointer &p): ref(p.ref), obj(p.obj) { incr(); }
      pointer (pointer &&p): ref(p.ref), obj(p.obj) { clear(p); }
d46 8
a53 8
      pointer(const nilptr_t &): ref(NULL), obj(NULL) {}
      pointer (T *p_obj): ref(new size_t(1)), obj(p_obj) {}
      T &operator*() { return *obj; }
      const T &operator*() const { return *obj; }
      T *operator->() { return obj; }
      const T *operator->() const { return obj; }
      operator bool() { return obj; }
      bool operator== (const pointer &p) { return obj == p.obj; }
d55 5
a59 2
      bool operator== (const nilptr_t &) { return obj == NULL; }
      bool operator!= (const nilptr_t &) { return obj != NULL; }
d74 1
a74 1
   out << p.obj << "[" << *p.ref << "]";
@


1.7
log
@-
@
text
@d28 1
a28 1
      void copy (pointer &p) { decr(); ref = p.ref; obj = p.obj; }
d30 1
d43 2
d52 3
a54 3
      bool operator== (const nilptr_t &) { return obj == nilptr; }
      bool operator!= (const pointer &p) { return obj != p.obj; }
      bool operator!= (const nilptr_t &) { return obj != nilptr; }
d58 10
d77 6
a83 7
   struct node;
   typedef pointer<node> nodeptr;
   struct node {
      string str;
      nodeptr link;
      node (const char *s, nodeptr p = nilptr): str(s), link(p) {};
   };
d85 5
a89 3
   head = tail = node (argv[0]);
   for (int i = 1; i < argc; ++i) {
      tail = tail->link = node (argv[i]);
d91 1
a91 1
   for (nodeptr p = head; p != nilptr; p = p->link) {
d96 4
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.5 2013-07-26 17:28:29-07 - - $
d15 1
a15 1
static const class nilptr_t{} nilptr;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.4 2013-07-26 17:28:14-07 - - $
a10 2
#define nullptr NULL

d15 2
d19 2
a20 1
   friend ostream &operator<< (ostream &, const pointer &);
a28 1
      static const pointer nil;
d30 1
a30 1
      pointer(): ref(nullptr), obj(nullptr) {}
d49 1
d51 1
d65 1
d70 1
a70 1
      node (const char *s, nodeptr p = nil): str(s), link(p) {};
d77 1
a77 1
   for (nodeptr p = head; p != nil; p = p->link) {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.3 2013-07-26 17:27:32-07 - - $
d53 1
a53 1
ostream &operator<< (ostream &out, const pointer<T> &p);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.2 2013-07-26 17:27:02-07 - - $
d34 1
a34 1
         if (this != &that) { copy(p); incr(); }
d38 1
a38 1
         if (this != &that) { copy(p); clear(p); }
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: smart_pointer.cpp,v 1.1 2013-07-26 15:45:40-07 - - $
d52 2
a53 1
ostream &operator<< (ostream &out, const pointer &p);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d11 2
d19 1
d22 1
a22 1
      int *ref; // Reference count
d26 3
d31 19
d51 27
@

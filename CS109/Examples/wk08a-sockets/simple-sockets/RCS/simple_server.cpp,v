head	1.13;
access;
symbols;
locks;
comment	@// @;


1.13
date	2014.05.22.01.05.21;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.05.22.00.46.53;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.05.21.01.37.39;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.20.01.31.39;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.20.00.28.41;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.20.00.07.17;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.19.23.29.24;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.19.23.28.15;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.19.20.12.08;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.17.06.06.12;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.17.04.30.04;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.17.04.14.41;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.17.04.08.34;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@//$Id: simple_server.cpp,v 1.12 2014-05-21 17:46:53-07 - - $

#include <iostream>
#include <string>
#include <vector>
using namespace std;

#include "hostinfo.h"
#include "socket.h"

int main (int argc, char** argv) {
   string progname (argv[0]);
   vector<string> args (&argv[1], &argv[argc]);
   cout << progname << ": " << to_string (hostinfo()) << endl;
   in_port_t port = args.size() < 1 ? 50000 : stoi (args[0]);
   try {
      // Create the socket
      server_socket server (port);
      cout << progname << ": listening on port "
           << to_string (port) << endl;
      for (;;) {
         accepted_socket client_sock;
         server.accept (client_sock);
         cout << progname << ": accepted "
              << to_string (client_sock) << endl;
         try {
            for (;;) {
               string data;
               ssize_t nbytes = client_sock.recv (data);
               if (nbytes == 0) break;
               cout << progname << ": received \"" << data << "\""
                    << endl;
               client_sock.send (data);
            }
         }catch (socket_error& error) {
            cout << progname << ": " << error.what() << endl;
         }
         cout << progname << ": client is gone" << endl;
      }
   }catch (socket_error& error) {
      cout << progname << ": " << error.what() << endl;
   }
   return 0;
}
@


1.12
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.11 2014-05-20 18:37:39-07 - - $
d14 1
a14 1
   cout << progname << ": " << hostinfo().to_string() << endl;
d20 1
a20 1
           << to_string (ZZport) << endl;
d25 1
a25 1
              << client_sock.to_string() << endl;
@


1.11
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.12 2014-05-20 18:35:04-07 - - $
d9 1
a9 2
#include "server_socket.h"
#include "socket_error.h"
d20 1
a20 1
           << to_string (port) << endl;
d22 1
a22 1
         server_socket client_sock;
d35 1
a35 1
         }catch (runtime_error& error) {
d40 1
a40 1
   }catch (runtime_error& error) {
@


1.10
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.9 2014-05-19 17:28:41-07 - - $
d8 1
d15 1
a15 1
   cout << progname << " running..." << endl;
d25 2
a26 1
         cout << progname << ": accepted connection" << endl;
d36 2
a37 2
         }catch (socket_error& error) {
            SOCKET_TRACE (progname, error);
d41 2
a42 2
   }catch (socket_error& error) {
      SOCKET_TRACE (progname, error);
@


1.9
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.8 2014-05-19 17:07:17-07 - - $
d19 2
a20 1
      cout << progname << ": listening on port " << port << endl;
d24 1
a24 2
         cout << progname << ": accepted connection from "
              << string(client_sock) << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.7 2014-05-19 16:29:24-07 - - $
d23 2
@


1.7
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.6 2014-05-19 16:28:15-07 - - $
d19 1
@


1.6
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.5 2014-05-19 13:12:08-07 - - $
a21 2
         cout << progname << ": accepted call from client "
              << string(client_sock) << endl;
@


1.5
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.4 2014-05-16 23:06:12-07 - - $
d20 4
a23 2
         server_socket new_sock;
         server.accept (new_sock);
d27 1
a27 1
               ssize_t nbytes = new_sock.recv (data);
d31 1
a31 1
               new_sock.send (data);
@


1.4
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.3 2014-05-16 21:30:04-07 - - $
d15 1
d18 1
a18 1
      server_socket server (30000);
@


1.3
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.2 2014-05-16 21:14:41-07 - - $
d24 2
a25 1
               new_sock >> data;
d28 1
a28 1
               new_sock << data;
d33 1
@


1.2
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.1 2014-05-16 21:08:34-07 - - $
a20 1

d25 2
d30 1
a30 2
            cout << progname << ": socket_error(" << error.what() << ")"
                 << endl;
d34 1
a34 2
      cout << progname << ": socket_error(" << error.what() << ")"
           << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.1 2014-05-16 21:07:27-07 - - $
d3 1
d5 1
d13 1
d29 1
a29 1
            cout << progname << ": socket_error(" << error.what << ")"
d34 1
a34 1
      cout << progname << ": socket_error(" << error.what << ")"
@

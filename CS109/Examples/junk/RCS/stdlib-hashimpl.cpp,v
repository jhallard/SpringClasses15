head	1.11;
access;
symbols;
locks;
comment	@// @;


1.11
date	2013.08.13.01.44.03;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.08.13.01.36.57;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.08.13.01.36.39;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.08.13.01.34.53;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.08.13.01.34.33;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.08.13.01.34.26;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.08.13.01.33.48;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.08.13.01.27.27;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.08.13.01.25.32;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.08.13.01.25.12;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.08.09.19.23.14;	author -;	state -;
branches;
next	;


desc
@@


1.11
log
@-
@
text
@// $Id: stdlib-hashimpl.cpp,v 1.10 2013-08-12 18:36:57-07 - - $

#include <iomanip>
#include <iostream>
using namespace std;

// libsupc++/hash_bytes.h

size_t  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);

// include/bits/functional_hash.h

struct _Hash_impl { 
   static size_t hash(const void* __ptr, size_t __clength,
                      size_t __seed = static_cast<size_t>(0xC70F6907UL))
   { return _Hash_bytes(__ptr, __clength, __seed); }
    
   template<typename _Tp>
   static size_t hash(const _Tp& __val)
   { return hash(&__val, sizeof(__val)); }
    
   template<typename _Tp>
   static size_t __hash_combine(const _Tp& __val, size_t __hash) 
   { return hash(&__val, sizeof(__val), __hash); }
};

// libsupc++/hash_bytes.cc

inline std::size_t unaligned_load(const char* p) {
   std::size_t result;
   __builtin_memcpy(&result, p, sizeof(result));
   return result;
}

// Loads n bytes, where 1 <= n < 8.
inline std::size_t load_bytes(const char* p, int n) {
   std::size_t result = 0;
   --n;
   do
      result = (result << 8) + static_cast<unsigned char>(p[n]);
   while (--n >= 0);
   return result;
}

inline std::size_t shift_mix(std::size_t v) {
   return v ^ (v >> 47);
}


// Implementation of Murmur hash for 64-bit size_t. 
size_t _Hash_bytes(const void* ptr, size_t len, size_t seed) {
   static const size_t mul = (((size_t) 0xc6a4a793UL) << 32UL)
                             + (size_t) 0x5bd1e995UL;
   const char* const buf = static_cast<const char*>(ptr);
   
   // Remove the bytes not divisible by the sizeof(size_t).  This
   // allows the main loop to process the data as 64-bit integers.
   const int len_aligned = len & ~0x7; 
   const char* const end = buf + len_aligned;
   size_t hash = seed ^ (len * mul); 
   for (const char* p = buf; p != end; p += 8) {
      const size_t data = shift_mix(unaligned_load(p) * mul) * mul;
      hash ^= data;
      hash *= mul; 
   }
   if ((len & 0x7) != 0) {
      const size_t data = load_bytes(end, len & 0x7); 
      hash ^= data;
      hash *= mul; 
   }
   hash = shift_mix(hash) * mul;
   hash = shift_mix(hash);
   return hash;
} 

// TESTING.

size_t hash (const string &str) {
   return _Hash_impl::hash (str.c_str(), str.size());
}

int main (int argc, char **argv) {
   const size_t width = 20;
   for (char **argp = &argv[1]; argp != &argv[argc]; ++argp) {
      string str {*argp};
      size_t hashnr = hash (str);
      cout << setw(width) << hashnr << " = hash(\"" << str << "\")"
           << endl;
   }
   const size_t max = static_cast<size_t> (-1);
   cout << setw(width) << max << " = 0x" << hex << uppercase << max
        << " = " << static_cast<long double> (max) << endl;
}
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: stdlib-hashimpl.cpp,v 1.9 2013-08-12 18:36:39-07 - - $
d15 1
a15 1
                      size_t __seed = static_cast<size_t>(0xc70f6907UL))
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: stdlib-hashimpl.cpp,v 1.8 2013-08-12 18:34:53-07 - - $
d92 1
a92 1
        << static_cast<long double> (max) << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: stdlib-hashimpl.cpp,v 1.7 2013-08-12 18:34:33-07 - - $
d91 2
a92 2
   cout << setw(width) << max << " = " << hex << uppercase << max
        << endl;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: stdlib-hashimpl.cpp,v 1.6 2013-08-12 18:34:26-07 - - $
d84 1
a84 1
   for (char **argp = &argv[1]; *argp; ++argp) {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: stdlib-hashimpl.cpp,v 1.5 2013-08-12 18:33:48-07 - - $
d90 1
a90 1
   const size_t max = static_cats<size_t> (-1);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: stdlib-hashimpl.cpp,v 1.4 2013-08-12 18:27:27-07 - - $
d87 1
a87 1
      cout << setw(width) << hashnr << = hash(\"" << str << "\")"
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: stdlib-hashimpl.cpp,v 1.3 2013-08-12 18:25:32-07 - - $
d3 1
d76 18
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: stdlib-hashimpl.cpp,v 1.2 2013-08-12 18:25:12-07 - - $
d28 21
@


1.2
log
@-
@
text
@d1 4
a4 1
// $Id: stdlib-hashimpl.cpp,v 1.1 2013-08-09 12:23:14-07 - - $
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d3 1
a3 2
#include <iostream>
using namespace std;
d5 19
a23 1
// libstdc++-v3/hash_bytes.cc
d26 1
a26 1
size_t  _Hash_bytes(const void* ptr, size_t len, size_t seed) { 
d49 1
a49 13
}

// Implementation of FNV hash for 64-bit size_t. 
size_t  _Fnv_hash_bytes(const void* ptr, size_t len, size_t hash) {
   const char* cptr = static_cast<const char*>(ptr);
   for (; len; --len) {
     hash ^= static_cast<size_t>(*cptr++);
     hash *= static_cast<size_t>(1099511628211ULL);
   }
   return hash;
}


@

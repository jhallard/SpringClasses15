head	1.10;
access;
symbols;
locks;
comment	@// @;


1.10
date	2013.08.21.03.03.02;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.08.21.03.02.41;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.08.21.03.02.19;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.08.21.02.59.11;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.08.21.02.58.57;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.08.21.02.55.29;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.08.21.02.54.53;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.08.21.02.54.37;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.06.06.04.00.59;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.06.06.03.59.25;	author -;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@// $Id: numlimits.cpp,v 1.9 2013-08-20 20:02:41-07 - - $

#include <iomanip>
#include <iostream>
#include <limits>
#include <typeinfo>

#include <cxxabi.h>

using namespace std;

template <typename T>
void show (const string &label) {
   const char *const mangled = typeid (T).name();
   int status;
   char *unmangled = abi::__cxa_demangle (mangled, 0, 0, &status);
   cout << label << ":" << endl
        << unmangled << "(" << mangled << ") [" << sizeof (T) << "] "
        << setprecision (numeric_limits<T>::digits10)
        << numeric_limits<T>::min() << " .. "
        << numeric_limits<T>::max() << endl;
   free (unmangled); // C code allocated by malloc.

}

#define SHOW(T) show<T>(#T)

int main() {
   SHOW (bool);
   SHOW (char);
   SHOW (signed char);
   SHOW (unsigned char);
   SHOW (short);
   SHOW (signed short);
   SHOW (unsigned short);
   SHOW (int);
   SHOW (signed int);
   SHOW (unsigned int);
   SHOW (long);
   SHOW (signed long);
   SHOW (unsigned long);
   SHOW (long long);
   SHOW (signed long long);
   SHOW (unsigned long long);
   SHOW (float);
   SHOW (double);
   SHOW (long double);
   return 0;
}

//TEST// ./numlimits >numlimits.out 2>&1
//TEST// mkpspdf numlimits.ps numlimits.cpp* numlimits.out*

@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: numlimits.cpp,v 1.8 2013-08-20 20:02:19-07 - - $
d17 1
a17 1
   cout << label << ":" << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: numlimits.cpp,v 1.7 2013-08-20 19:59:11-07 - - $
d17 1
a17 1
   cout << label << ": "
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: numlimits.cpp,v 1.6 2013-08-20 19:58:57-07 - - $
d13 1
a13 1
void show() {
d17 4
a20 3
   cout << setprecision (numeric_limits<T>::digits10);
   cout << unmangled << "(" << mangled << ") [" << sizeof (T) 
        << "] " << numeric_limits<T>::min() << " .. "
d26 2
d29 19
a47 19
   show<bool>();
   show<char>();
   show<signed char>();
   show<unsigned char>();
   show<short>();
   show<signed short>();
   show<unsigned short>();
   show<int>();
   show<signed int>();
   show<unsigned int>();
   show<long>();
   show<signed long>();
   show<unsigned long>();
   show<long long>();
   show<signed long long>();
   show<unsigned long long>();
   show<float>();
   show<double>();
   show<long double>();
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: numlimits.cpp,v 1.5 2013-08-20 19:55:29-07 - - $
d17 1
a17 1
   cout << setprecision (numeric_limits<T>::digits10;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: numlimits.cpp,v 1.4 2013-08-20 19:54:53-07 - - $
d3 1
d17 1
d19 2
a20 2
        << "] " << numeric_limits<T>::min () << " .. "
        << numeric_limits<T>::max () << endl;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: numlimits.cpp,v 1.3 2013-08-20 19:54:37-07 - - $
a2 3
#include <cctype>
#include <cstdlib>
#include <iomanip>
d17 2
a18 2
        << "] " << numeric_limits<type>::min () << " .. "
        << numeric_limits<type>::max () << endl;
d43 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: numlimits.cpp,v 1.2 2012-06-05 21:00:59-07 - - $
d18 1
a18 1
   char *unmangled = abi::__cxa_demangle (typecode, 0, 0, &status);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: numlimits.cpp,v 1.7 2011-02-04 20:22:02-08 - - $
d14 3
a16 3
template <typename type>
void print_limits (const string &label) {
   const char *const typecode = typeid (type).name();
d19 2
a20 4
   cout << label << ": sizeof = " << sizeof (type) << ", type = "
        << typecode << ", " << unmangled << endl;
   cout << "            range = "
        << numeric_limits<type>::min () << " .. "
a25 3
#define PRINT(TYPE) print_limits<TYPE> (#TYPE)


d27 19
a45 19
   PRINT (bool);
   PRINT (char);
   PRINT (signed char);
   PRINT (unsigned char);
   PRINT (short);
   PRINT (signed short);
   PRINT (unsigned short);
   PRINT (int);
   PRINT (signed int);
   PRINT (unsigned int);
   PRINT (long);
   PRINT (signed long);
   PRINT (unsigned long);
   PRINT (long long);
   PRINT (signed long long);
   PRINT (unsigned long long);
   PRINT (float);
   PRINT (double);
   PRINT (long double);
@


1.1
log
@-
@
text
@d17 2
a18 1
   char *unmangled = abi::__cxa_demangle (name, 0, 0, &status);
d20 2
a21 1
        << typecode << ", " << unmangled << endl << "    range = "
d31 1
a31 1
int main (int argc, char **argv) {
@

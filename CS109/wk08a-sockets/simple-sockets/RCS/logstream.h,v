head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2014.05.23.19.44.08;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.23.00.52.10;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.22.23.33.32;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: logstream.h,v 1.2 2014-05-22 17:52:10-07 - - $

//
// class logstream
// replacement for initial cout so that each call to a logstream
// will prefix the line of output with an identification string
// and a process id.  Template functions must be in header files
// and the others are trivial.
//

#ifndef __LOGSTREAM_H__
#define __LOGSTREAM_H__

#include <cassert>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

#include <sys/types.h>
#include <unistd.h>

class logstream {
   private:
      ostream& out;
      string execname;
   public:

      // Constructor may or may not have the execname available.
      logstream (ostream& out, const string& execname = ""):
                 out (out), execname (execname) {
      }

      // First line of main should set_execname if logstream is global.
      void set_execname (const string& name) { execname = name; }

      // First call should be the logstream, not cout.
      // Then forward result to the standard ostream.
      template <typename T>
      ostream& operator<< (const T& obj) {
         assert (execname.size() > 0);
         out << execname << "(" << getpid() << "): " << obj;
         return out;
      }

};

#endif

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: logstream.h,v 1.1 2014-05-22 16:33:32-07 - - $
d38 1
d40 4
a43 4
      friend ostream& operator<< (const logstream& log, const T& obj) {
         assert (log.execname.size() > 0);
         log.out << log.execname << "(" << getpid() << "): " << obj;
         return log.out;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: logstream.h,v 1.1 2014-05-22 16:16:14-07 - - $
d11 3
d47 2
@

head	1.9;
access;
symbols;
locks;
comment	@// @;


1.9
date	2014.05.23.20.25.17;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.23.19.45.23;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.23.03.04.53;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.23.02.00.24;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.23.00.23.40;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.22.23.33.32;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.22.01.35.34;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.22.01.14.52;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.22.01.06.45;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@//$Id: server.cpp,v 1.8 2014-05-23 12:45:23-07 - - $

#include <iostream>
#include <string>
#include <vector>
using namespace std;

#include <libgen.h>

#include "logstream.h"
#include "sockets.h"

int main (int argc, char** argv) {
   logstream clog (cout, basename (argv[0]));
   vector<string> args (&argv[1], &argv[argc]);
   in_port_t port = args.size() < 1 ? 50000 : stoi (args[0]);
   try {
      if (port <= IPPORT_USERRESERVED) {
         throw socket_error ("unprivileged server port ("
               + to_string (port) + ") <= IPPORT_USERRESERVED ("
               + to_string (IPPORT_USERRESERVED) + ")");
      }
      // Create the socket
      server_socket listener (port);
      for (;;) {
         clog << to_string (hostinfo())
              << " accepting port " << to_string (port) << endl;
         accepted_socket client_sock;
         listener.accept (client_sock);
         clog << "accepted " << to_string (client_sock) << endl;
         try {
            for (;;) {
               string data;
               ssize_t nbytes = client_sock.recv (data);
               if (nbytes == 0) break;
               clog << "received \"" << data << "\"" << endl;
               client_sock.send (data);
            }
         }catch (socket_error& error) {
            clog << error.what() << endl;
         }
         clog << "client is gone" << endl;
      }
   }catch (socket_error& error) {
      clog << error.what() << endl;
   }
   return 0;
}
@


1.8
log
@-
@
text
@d1 1
a1 1
//$Id: server.cpp,v 1.7 2014-05-22 20:04:53-07 - - $
d11 1
a11 1
#include "socket.h"
@


1.7
log
@-
@
text
@d1 1
a1 1
//$Id: server.cpp,v 1.6 2014-05-22 19:00:24-07 - - $
d8 2
d14 1
a14 1
   logstream clog (cout, argv[0]);
d19 2
a20 2
         throw socket_error ("server port (" + to_string (port)
               + ") not > IPPORT_USERRESERVED ("
@


1.6
log
@-
@
text
@d1 1
a1 1
//$Id: server.cpp,v 1.5 2014-05-22 17:23:40-07 - - $
d16 5
@


1.5
log
@-
@
text
@d1 1
a1 1
//$Id: server.cpp,v 1.4 2014-05-22 16:33:32-07 - - $
a7 1
#include "hostinfo.h"
@


1.4
log
@-
@
text
@d1 1
a1 1
//$Id: server.cpp,v 1.3 2014-05-21 18:35:34-07 - - $
d18 1
a18 1
      server_socket server (port);
d23 1
a23 1
         server.accept (client_sock);
@


1.3
log
@-
@
text
@d1 1
a1 1
//$Id: server.cpp,v 1.2 2014-05-21 18:14:52-07 - - $
d9 1
d13 1
a13 1
   string progname (argv[0]);
d20 1
a20 1
         cout << progname << ": " << to_string (hostinfo())
d24 1
a24 2
         cout << progname << ": accepted "
              << to_string (client_sock) << endl;
d30 1
a30 2
               cout << progname << ": received \"" << data << "\""
                    << endl;
d34 1
a34 1
            cout << progname << ": " << error.what() << endl;
d36 1
a36 1
         cout << progname << ": client is gone" << endl;
d39 1
a39 1
      cout << progname << ": " << error.what() << endl;
@


1.2
log
@-
@
text
@d1 1
a1 1
//$Id: server.cpp,v 1.1 2014-05-21 18:06:45-07 - - $
a14 2
   cout << progname << ": " << to_string (hostinfo())
        << " listening on port " << to_string (port) << endl;
d19 2
@


1.1
log
@-
@
text
@d1 1
a1 1
//$Id: simple_server.cpp,v 1.13 2014-05-21 18:05:21-07 - - $
a13 1
   cout << progname << ": " << to_string (hostinfo()) << endl;
d15 2
a19 2
      cout << progname << ": listening on port "
           << to_string (port) << endl;
@

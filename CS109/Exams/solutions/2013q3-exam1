$Id: 2013q3-test1,v 1.1 2013-07-17 16:59:24-07 - - $
Answers to 2013q3-test1, page 1

________________________________________________________________________
Question 1.

class foo {
   foo ();
   foo (const foo &);
   foo &operator= (const foo &);
   ~foo ();

________________________________________________________________________
Question 2.

for (vector<int>::const_iterator i = vec.cbegin();
     i != vec.cend(); ++i) {
   cout << *i << endl;
}

// OR: soln using auto:
for (auto i = vec.cbegin(); i != vec.cend(); ++i) {
   cout << *i << endl;

________________________________________________________________________
Question 3.

typedef map<string,string> mapss;
void print_mapss (const mapss &themap) {
   for (mapss::const_iterator i = themap.cbegin();
        i != themap.cend(); ++i) {
      cout << i->first << " " << i->second << endl;
}

________________________________________________________________________
Question 4.

double inner_product (vector<double> a, vector<double> b) {
   if (a.size() != b.size()) throw length_error ("inner_product");
   double p = 0.0;
   for (size_t i = 0; i < a.size(); ++i) {
      p += a[i] * b[i];
   }
   return p;
}


Answers to 2013q3-test1, page 2

________________________________________________________________________
Question 5.

typedef bool (*predicate) (const string &);
typedef list<string>::const_iterator list_citor;
vector<string> list_to_vector (const list_citor &begin,
               const list_citor &end, predicate approved) {
   vector<string> vs;
   for (list_citor i = begin; i != end; ++i) {
      if (approved (*i)) vs.push_back (*i);
   }
   return vs;
}

________________________________________________________________________
Question 6.

#include <iostream>
#include <cstdlib>
using namespace std;
int main (int argc, char **argv) {
   string word;
   map<string,int> words;
   while (cin >> word) ++words[word];
   for (auto i = words.cbegin(); i != words.cend(); ++i) {
      cout << i->first << " " << i->second << endl;
   }
   return EXIT_SUCCESS;
}

________________________________________________________________________
Question 7.

class intstack {
   private:
      vector<int> vec;
   public:
      void push (int i) { vec.push_back (i); }
      int pop () {
         if (empty()) throw out_of_range ("intstack::pop");
         int i = vec.back(); vec.pop_back(); return i;
      }
      bool empty () { return vec.empty(); }
}

________________________________________________________________________
Question 8.


Answers to 2013q3-test1, page 3

 1.    (B) b == e

 2.    (A) ++i

 3.    (C) $ roman "{" x suchthat a <= x < b roman "}" $

 4.    (C) i->second

 5.    (D) void f (T x);

 6.    (B) friend

 7.    (D) ||

 8.    (B) #ifndef __FOO_H__

 9.    (B) foo::foo (const string &x): s(x) {}

10.    (C) node *p = new node();

11.    (B) void swap (int &a, int &b);


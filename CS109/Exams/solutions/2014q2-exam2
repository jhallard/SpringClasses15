$Id: 2014q2-test2,v 1.1 2014-05-15 12:50:53-07 - - $
Answers to 2013q3-test1, page 1

________________________________________________________________________
Question 1.

template <typename iter, typename oiter, typename Less>
void merge (iter b1, iter e1, iter b2, iter e2, oiter ob, Less less) {
   while (b1 != e1 and b2 != e2) {
      if (less (*b1, *b2)) *ob++ = *b1++;
                      else *ob++ = *b2++;
   }
   while (b1 != e1) *ob++ = *b1++;
   while (b2 != e2) *ob++ = *b2++;
}

________________________________________________________________________
Question 2.

struct complex {
   double real {0}; // or == 0, (i)
   double imag {0};
   complex (double r); real(r), imag(0){} // (ii)
   complex (double r, double i); real(r), imag(i){} // (iii)
   complex operator+ (complex c) { // (iv)
      return complex (real + c.real, imag + c.imag);
   }
   complex &operator+= (complex c) { // (v)
      real += c.real; imag += c.imag;
      return *this;
   }
}
ostream& operator<< (ostream &out, const complex c) { // (vi)
   out << "(" << c.real << "," << c.imag << "i)";
   return out;
}


Answers to 2013q3-test1, page 2

________________________________________________________________________
Question 3.

void execute (const funmap& map, const string& key) {
   const auto& itor = map.find (key);
   if (itor == map.end()) cerr << key << ": invalid key" << endl;
                     else p->second();
}

________________________________________________________________________
Question 4.

template <typename T, typename itor>
T accumulate (itor begin, itor end, T identity, T(*f)(T,T)) {
   while (begin != end) identity = f (identity, *begin++);
   return identity;
}

________________________________________________________________________
Question 5.

template <typename iterator>
void print (ostream& out, iterator begin, iterator end) {
   bool space = false;
   while (begin != end) {
      if (space) out << " ";
      cout << *begin++;
      space = true;
   }
}

________________________________________________________________________
Question 6.

vector<string> filter (const vector<string>& v, predicate p) {
   vector<string> r;
   for (const auto& i: v) if (p(i)) r.push_back(i);
   return r;
}

________________________________________________________________________
Question 7.

int main (int argc, char** argv) {
   vector<string> args (&argv[1], &argv[argc]);   
// alternate:
   vector<string> args;
   for (int i = 1; i < argc; ++i) args.push_back (argv[i]);


Answers to 2013q3-test1, page 3

 1.     (C) unordered_map

 2.     (D) Reference counting.

 3.     (A) = 0

 4.     (C) reinterpret_cast

 5.     (D) size_t

 6.     (B) (x) = private, (y) = public

 7.     (D) vector

 8.     (D) v.size()==v.end()-v.begin()

 9.     (B) inheritance

10.     (C) $ roman "{" ~ x suchthat a <= x < b ~ roman "}" $

11.     (B) cout << i->second;

12.     (C) destructor


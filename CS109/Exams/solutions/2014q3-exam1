$Id: 2014q3-exam1,v 1.4 2014-07-11 18:00:45-07 - - $
Answers to 2013q3-test1, page 1

________________________________________________________________________
Question 1. [1]

Any one of three answers (and a few more possibilies, too):
vector<string> args (&argv[1], &argv[argc]);
vector<string> args (argv+1, argv+argc);
vector<string> args; for (i=1;i<argc;++i) args.push_back(argv[i]);

________________________________________________________________________
Question 2. [3]

foo ();
foo (const foo&);
foo (foo&&);
foo& operator= (const foo&);
foo& operator= (foo&&);
~foo ();

________________________________________________________________________
Question 3. [2]

template <typename Iterator>
double sum (Iterator begin, Iterator end) {
   double s {0.0};
   while (begin != end) s += *begin++;
   return s;
}


________________________________________________________________________
Question 4. [4]

#ifndef __STACK__
#define __STACK__

#include <vector>

template <typename value_type>
class stack {
   private:
      vector<value_type> vec;
   public:
      void push (const value_type& x) { vec.push_back (x); }
      void pop() { vec.pop_back(); }
      value_type& top() { return vec.back(); }
      size_t size() { return vec.size(); }
      bool empty() { return vec.empty(): }
}

#endif


Answers to 2013q3-test1, page 2

________________________________________________________________________
Question 5. [1]

complex (double re = 0.0, double im = 0.0): real(re), imag(im) {}

________________________________________________________________________
Question 6. [2]

Itor smallest (Itor begin, Itor end) {
   Itor smallest = begin;
   for (; begin != end; ++begin) {
      if (*begin < *smallest) smallest = begin;
   }
   return smallest;
}

________________________________________________________________________
Question 7. [3]

void copy (Iterator begin, Iterator end, Container& out) {
   for (; begin != end; ++begin) {
      out.push_back (*begin);
   }
}
// since begin is a value argument, can modify it.
// Or can use a separate variable.

________________________________________________________________________
Question 8. [2]

// Instead of auto, pr is of type pair<const string,int>
for (auto& pr: si_map) {
   cout << pr.first << " " << pr.second << endl;
}

________________________________________________________________________
Question 9. [2]

for (int i = 1; i < argc; ++i) {
   map.insert ({argv[i], i});
}
// Or could use map.insert (pair<string,int> (argv[i],i));
// Or could use emplace instead of insert.


Answers to 2013q3-test1, page 3

________________________________________________________________________
Question 10. [2]

void trim (vector<char> vec) {

void trim (vector<char> vec) {
   while (vec.size() > 0 and vec.back() == 0) {
      vec.pop_back();
   }
}
// Could use vec[vec.size() - 1] instead of vec.back()

________________________________________________________________________
Question 11. [4]

vecpair split (const intvec& in) {
   intvec out1;
   intvec out2;
   bool flipflop = true;
   for (auto& i: in) {
      if (flipflop) out1.push_back (i);
               else out2.push_back (i);
      flipflop = not flipflop;
   }
   return {out1, out2}
}


________________________________________________________________________
Question 12. [4]

void execute (const string& command) {
   vector<string> cmd = split (command);
   auto begin = cmd.begin();
   if (begin == cmd.end()) throw bad_command();
   auto fn = fnmap.find (*begin);
   if (fn == fnmap.end()) throw bad_command();
   ++begin;
   (fn->second) (begin, cmd.end());
}


Answers to 2013q3-test1, page 4

 1.     (B) heap

 2.     (B) foo (const foo&);

 3.     (C) int c {3.6};  // Note:  braces.

 4.     (C) vector<int>::iterator

 5.     (D) Simula

 6.     (C) operator<>

 7.     (B) foo() = delete;

 8.     (B) shared_ptr<T>

 9.     (B) cyclic graph

10.     (A) ++i

11.     (D) return *this;

12.     (D) Prevents one-argument constructors from behaving
            as automatic type conversions.


Answers to 2013q3-test1, page 5

 1.     (D) vector

 2.     (B) &p[i]

 3.     (D) ||

 4.     (A) $ O ( 1 ) $

 5.     (D) &v[n]

 6.     (C) delete[] p;

 7.     (D) i.second

 8.     (C) cout << *i;

 9.     (C) hash table

10.     (C) ostream& operator<< (ostream&, const foo&);

11.     (B) pointer

12.     (C) foo& operator++ ();


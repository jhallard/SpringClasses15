$Id: 2013q1-test2,v 1.4 2013-02-22 18:15:29-08 - - $
Answers to 2013q2-test1, page 1

________________________________________________________________________
Question 1(a).

intvector::iterator begin() { //////// 2 pts
   return intvector::iterator (data);
}
intvector::iterator end() { //////// 2 pts
   return intvector::iterator (data + size);
}

________________________________________________________________________
Question 1(b).

class iterator {
   friend class intvector;
   private:
      int *pointer;
      iterator (int *init): pointer(init) { } //////// 1 pt
   public:
      bool operator!= (const intvector::iterator &that) { //////// 2 pts
         return pointer != that.pointer;
      }
      intvector::iterator &operator++ () { //////// 2 pts
         ++pointer;
         return *this;
      }
      int &operator* () { //////// 1 pt
         return *pointer;
      }
};


Answers to 2013q2-test1, page 2

________________________________________________________________________
Question 2.

template <typename itor>
void printthem (const itor &begin, const itor &end) {
   for (itor curr = begin; curr != end; ++curr) {
      cout << *curr << endl;
   }
}

________________________________________________________________________
Question 3.

template <typename item_t>
vector<item_t> copyreversre (const vector<item_t> &v) {
   vector<item_t> vr;
   for (vector<item_t>::iterator i = v.rbegin(); i != v.rend(); ++i) {
      vr.push_back (*i);
   }
   return vr
}

________________________________________________________________________
Question 4(a).

class base {
   protected:
      int serial;
      static int next;
      base(): serial(++next) {}
   public:
      virtual double area() = 0;
      virtual ~base(){} // no point deduct if missing virtual dtor
};
int base::next = 0;

________________________________________________________________________
Question 4(b).

class circle: base {
   private:
      double diameter;
   public:
      circle (double diam): diameter (diam) {}
      virtual double area() {
         double radius = diameter / 2;
         return M_PI * radius * radius;
      }
      virtual ~circle(){}; // no point deduct if missing virtual dtor
};

________________________________________________________________________
Question 4(c).
class rectangle: base {
   private:
      double length, width;
   public:
      rectangle (double len, double wid): length(len), width(wid) {}
      virtual double area() { return length * width; }
      virtual ~rectangle(){}; // no point deduct if missing virtual dtor
};


Answers to 2013q2-test1, page 3

 1.    (B) generic

 2.    (A) class stack: private vector<int> {

 3.    (B) void f (foo &);

 4.    (C) #ifndef __FOO_H__

 5.    (C) member function is virtual

 6.    (C) complex (double r = 0, double i = 0);

 7.    (B) = delete

 8.    (A) $ O ( 1 ) $

 9.    (B) sizeof(*p) // Either answer is correct.
       (C) sizeof(foo) // Either answer is correct.

10.    (A) bidirectional

11.    (B) (x) = private, and (y) = public


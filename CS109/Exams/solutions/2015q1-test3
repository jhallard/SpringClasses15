$Id: 2015q1-test3,v 1.3 2015-03-17 22:21:02-07 - - $
Answers to 2015q1-test3, page 1

________________________________________________________________________
Question 1.

foo();                        // both C++98 and C++11
foo (const foo&);             // both C++98 and C++11
foo& operator= (const foo&);  // both C++98 and C++11
~foo();                       // both C++98 and C++11

foo (foo&&);                  // C++11 but not C++98
foo& operator= (foo&&);       // C++11 but not C++98

________________________________________________________________________
Question 2.

void blue_triangle() {
   glBegin (GL_POLYGON);
   glColor3ub (0, 0, 255);
   glVertex2f (0, 0);
   glVertex2f (4, 0);
   glVertex2f (4, 4);
   glEnd();
}

________________________________________________________________________
Question 3.

template <typename Itor1, typename Itor2>
void copy (Itor1 b1, Itor1 e1, Itor2 b2, Itor2 e2) {
   while (b1 != e1) *b2++ = *b1++;
}

________________________________________________________________________
Question 4.

template <typename T, typename Func>
vector<T> zipwith (const vector<T>& v1, const vector<T>& v2, Func f) {
   if (v1.size() != v2.size()) throw domain_error ("zipwith");
   vector<T> out;
   auto i1 = v1.begin();
   auto i2 = v2.begin();
   while (i1 != v1.end()) out.push_back (f (*i1++, *i2++));
   return out; 
}


Answers to 2015q1-test3, page 2

________________________________________________________________________
Question 5.

template <typename T>
class queue {
   private:
      deque<T> deq;
   public:
      void clear() { deq.clear(); }
      size_t size() { return deq.size(); }
      bool empty() { return deq.empty(); }
      void push_back (const T& x) { deq.push_back (x); }
      void pop_front() { deq.pop_front(); }
      T& front() { return deq.front(); }
}

________________________________________________________________________
Question 6(a).

class shape {
   protected:
      shape() {}
   public:
      virtual double circumference() const = 0;
      virtual double area() const = 0;
      ~shape() {}
}

________________________________________________________________________
Question 6(b).

class circle {
   private:
      double radius {};
   public:
      circle (double d): radius(d) {}
      virtual double circumference() const override {
                  return 2 * M_PI * radius; }
      virtual double area() const override {
                  return M_PI * radius * radius; }
}

________________________________________________________________________
Question 6(c).

class square {
   private:
      double length {};
   public:
      square (double e): length(e) {}
      virtual double circumference() const override {
                  return 4 * length: }
      virtual double area() const override { return length * length; }
}

Answers to 2015q1-test3, page 3

________________________________________________________________________
Question 7.

using polynomial = vector<double>;
polynomial differentiate (const polynomial& p) {
   polynomial r;
   for (size_t i = 1; i < v.size(); ++i) {
      r.push_back (v[i] * i);
   }
   return r;
}

________________________________________________________________________
Question 8.

void draw_circle() {
   glBegin (GL_POLYGON);
   glColor3ub (0x00, 0x00, 0xFF);
   constexpr double delta = 2 * M_PI / 32;
   for (GLfloat theta = 0; theta < 2 * M_PI; theta += delta) {
      GLfloat xpos = cos (theta);
      GLfloat ypos = sin (theta);
      glVertex2f (xpos, ypos);
   }
   glEnd();
}

________________________________________________________________________
Question 9.

template <typename Itor>
void print (Itor begin, Itor end, ostream& out) {
   out << "{";
   string comma = "";
   while (begin != end) {
      out << comma << *begin++;
      comma = ",";
   }
   out << "}";
}

________________________________________________________________________
Question 10.

struct leaf: public tree {
   virtual void print (ostream& out) override { out << var; }
}
struct interior: public tree {
   virtual void print (ostream& out) override {
      left->print (out);
      right->print (out);
      out << oper;
   }
}

Answers to 2015q1-test3, page 4

 1.    (D) $2 n + 2$

 2.    (C) connect(2)

 3.    (C) 74.125.239.50

 4.    (B) upper right

 5.    (C) $ O ( n ) $

 6.    (B) race condition

 7.    (B) x is a function with no arguments which returns a foo.

 8.    (B) catch (domain_error& error)

 9.    (A) deque

10.    (A) int* a = &*v.begin();

11.    (B) foo::~foo(){}

12.    (D) void f (const foo&);


Answers to 2015q1-test3, page 5

 1.    (D) &argv[argc]

 2.    (B) delete[] p;

 3.    (B) 16

 4.    (B) explicit

 5.    (C) operator->

 6.    (A) for (auto i = c.begin(); i != c.end(); ++i) f(*i);

 7.    (B) auto_ptr<T>

 8.    (B) $ O ( log n ) $

 9.    (A) $ O ( 1 ) $

10.    (C) $ left { x suchthat a <= x < b right } $

11.    (D) universal parametric

12.    (C) cout << **i;



head	1.19;
access;
symbols;
locks;
comment	@// @;


1.19
date	2013.01.24.03.35.49;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.01.24.03.35.23;	author -;	state -;
branches;
next	1.17;

1.17
date	2012.04.27.19.35.13;	author -;	state -;
branches;
next	1.16;

1.16
date	2012.04.27.19.34.44;	author -;	state -;
branches;
next	1.15;

1.15
date	2012.04.27.19.34.30;	author -;	state -;
branches;
next	1.14;

1.14
date	2012.04.27.19.25.18;	author -;	state -;
branches;
next	1.13;

1.13
date	2012.04.27.02.30.26;	author -;	state -;
branches;
next	1.12;

1.12
date	2012.04.27.02.28.50;	author -;	state -;
branches;
next	1.11;

1.11
date	2012.04.27.02.28.27;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.04.26.21.58.46;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.04.26.21.50.45;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.04.26.21.48.00;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.04.26.21.46.39;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.04.26.21.43.25;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.04.26.21.41.30;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.04.26.21.40.51;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.04.26.21.39.59;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.26.21.37.42;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.26.21.37.13;	author -;	state -;
branches;
next	;


desc
@@


1.19
log
@-
@
text
@// $Id: thingstack.cpp,v 1.18 2013-01-23 19:35:23-08 - - $

#include <iostream>
#include <list>

using namespace std;

#include "iterstack.h"

int serial = 0;

#define PRINT(FUNC) print(FUNC, __LINE__)

struct thing {
   int ser;
   int val;
   explicit thing(int v = int());
   thing (const thing &that);
   thing &operator= (const thing &that);
   ~thing();
   void print (const char *name, int line);
};

thing::thing(int v): ser(++serial), val(v) {
   PRINT("thing(int)");
}

thing::thing (const thing &that): ser(++serial), val(that.val) {
   PRINT("thing(const thing &)");
}

thing &thing::operator= (const thing &that) {
   if (this != &that) {
      val = that.val;
   }
   PRINT("operator=(const thing &)");
   return *this;
}

thing::~thing() {
   PRINT("~thing()");
}

void thing::print (const char *name, int line) {
   cout << name << "[" << line << "]: " << this << "-> ser="
        << ser << ", val=" << val << endl;
}


#define SCOPE(X) cout << endl << X << " scope " << __LINE__ << endl
   
int main() {
   iterstack<thing> stk;
   for (int i = 0; i < 3; ++i) {
      SCOPE("enter");
      thing t(i);
      cout << endl << "stk.push (t);" << endl;
      stk.push (t);
      SCOPE("leave");
   }
   while (! stk.empty()) {
      SCOPE("enter");
      thing t = stk.top();
      t.PRINT("stk.top()");
      cout << endl << "stk.pop();" << endl;
      stk.pop();
      SCOPE("leave");
   }
   return 0;
}

/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=thingstack.out.grind \
//TEST//       thingstack >thingstack.out 2>&1
//TEST// mkpspdf thingstack.ps thingstack.cpp* iterstack.h \
//TEST//       thingstack.out*
*/

@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.17 2012-04-27 12:35:13-07 - - $
d76 1
a76 1
//TEST// mkpspdf thingstack.ps iterstack.h thingstack.cpp* \
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.16 2012-04-27 12:34:44-07 - - $
d76 2
a77 1
//TEST// mkpspdf thingstack.ps thingstack.cpp* thingstack.out*
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.15 2012-04-27 12:34:30-07 - - $
d40 1
a40 1
~thing::thing() {
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.14 2012-04-27 12:25:18-07 - - $
d24 1
a24 1
thing::thing(int v = int()): ser(++serial), val(v) {
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.13 2012-04-26 19:30:26-07 - - $
d17 17
a33 7
   explicit thing(int v = int()): ser(++serial), val(v) {
      PRINT("thing(int)");
   }
   thing (const thing &that): ser(++serial), val(that.val) {
      PRINT("thing(const thing &)");
   }
   thing &operator= (const thing &that) {
a34 2
      PRINT("operator=(const thing &)");
      return *this;
d36 12
a47 8
   ~thing() {
      PRINT("~thing()");
   }
   void print (const char *name, int line) {
      cout << name << "[" << line << "]: " << this << "-> ser="
           << ser << ", val=" << val << endl;
   }
};
d49 1
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.12 2012-04-26 19:28:50-07 - - $
d59 7
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.11 2012-04-26 19:28:27-07 - - $
d51 1
a51 1
      t.PRINT;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.10 2012-04-26 14:58:46-07 - - $
d12 1
a12 1
#define PRINT print(__func__, __LINE__)
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.9 2012-04-26 14:50:45-07 - - $
d18 1
a18 1
      PRINT;
d21 1
a21 1
      PRINT;
d25 1
a25 1
      PRINT;
d29 1
a29 1
      PRINT;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.8 2012-04-26 14:48:00-07 - - $
d50 1
a50 1
      thing &t = stk.top();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.7 2012-04-26 14:46:39-07 - - $
d36 2
d42 1
d46 1
a46 1
      cout << endl << "}" << endl;
d49 1
d54 1
a54 1
      cout << endl << "}" << endl;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: thingstack.cpp,v 1.6 2012-04-26 14:43:25-07 - - $
d43 1
d50 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id$
d32 1
a32 1
      cout << name << "[" << line << "]: " << thing << "-> ser="
d39 4
a42 4
   for (int i = 0; i < 5; ++i) {
      thing t = i;
      cout << "stk.push (t);" << endl;
      stk.push (i);
d47 1
a47 1
      cout << "stk.pop();" << endl;
@


1.5
log
@-
@
text
@d1 1
d40 2
a41 1
      cout << "stk.push (" << i << ");" << endl;
@


1.4
log
@-
@
text
@a35 3
void thing::print (const char *name, int line) {
}

d48 1
d50 1
@


1.3
log
@-
@
text
@d7 2
d48 1
@


1.2
log
@-
@
text
@d9 1
a9 1
#define PRT print(__func__, __LINE__);
d14 6
a19 2
   explicit thing(int v = int()): ser(++serial), val(v) {PRT};
   thing (const thing &that): ser(++serial), val(that.val) {PRT}
d21 10
a30 1
      val = that.val; PRT; return *this
a31 2
   ~thing() {PRT}
   void print (const char *name, int line);
a34 2
   cout << name << "[" << line << "]: " << thing << "-> ser="
        << ser << ", val=" << val << endl;
d45 1
a45 1
      t.print (__func__, __LINE__);
@


1.1
log
@-
@
text
@d16 3
a18 1
   thing &operator= (const thing &that) {val = that.val; PRT}
@

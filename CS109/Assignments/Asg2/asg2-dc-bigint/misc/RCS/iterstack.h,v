head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2014.05.30.20.47.32;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.04.11.19.39.56;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.10.00.26.07;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.24.03.48.04;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.01.24.03.47.08;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: iterstack.h,v 1.4 2014-04-11 12:39:56-07 - - $

// 
// The class std::stack does not provide an iterator, which is
// needed for this class.  So, like std::stack, class iterstack
// is implemented on top of a container.
// 
// We use private inheritance because we want to restrict
// operations only to those few that are approved.  All functions
// are merely inherited from the container, with only ones needed
// being exported as public.
// 
// No implementation file is needed because all functions are
// inherited, and the convenience functions that are added are
// trivial, and so can be inline.
//
// Any underlying container which supports the necessary operations
// could be used, such as vector, list, or deque.
// 

#ifndef __ITERSTACK_H__
#define __ITERSTACK_H__

#include <vector>
using namespace std;

template <typename value_type>
class iterstack: private vector<value_type> {
   private:
      using vector<value_type>::crbegin;
      using vector<value_type>::crend;
      using vector<value_type>::push_back;
      using vector<value_type>::pop_back;
      using vector<value_type>::back;
      using const_iterator = typename
            vector<value_type>::const_reverse_iterator;
   public:
      using vector<value_type>::clear;
      using vector<value_type>::empty;
      using vector<value_type>::size;
      const_iterator begin() { return crbegin(); }
      const_iterator end() { return crend(); }
      void push (const value_type& value) { push_back (value); }
      void pop() { pop_back(); }
      const value_type& top() const { return back(); }
};

#endif

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.3 2014-04-09 17:26:07-07 - - $
d35 2
a36 2
      typedef typename vector<value_type>::const_reverse_iterator
              const_iterator;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.9 2014-04-08 19:04:03-07 - - $
a37 1
      using vector<value_type>::const_reference;
d39 1
a40 1
      using vector<value_type>::empty;
d43 3
a45 3
      inline void push (const value_type& value) { push_back (value); }
      inline void pop() { pop_back(); }
      inline const value_type& top() const { return back(); }
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.8 2013-01-23 19:47:39-08 - - $
a24 1

d29 8
a38 3
      using vector<value_type>::const_reverse_iterator;
      using vector<value_type>::push_back;
      using vector<value_type>::pop_back;
a39 1
      using vector<value_type>::back;
d42 3
a44 3
      using vector<value_type>::rbegin;
      using vector<value_type>::rend;
      inline void push (const value_type &value) { push_back (value); }
d46 1
a46 1
      inline const value_type &top() const { return back(); }
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.6 2012-04-12 19:32:54-07 - - $
d16 3
@

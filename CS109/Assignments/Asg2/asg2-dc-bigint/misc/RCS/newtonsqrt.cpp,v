head	1.20;
access;
symbols;
locks;
comment	@// @;


1.20
date	2014.04.10.01.01.19;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.04.10.01.00.47;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.04.10.00.56.34;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.04.10.00.46.48;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.04.10.00.46.07;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.04.10.00.45.11;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.04.10.00.42.56;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.01.24.03.33.54;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.01.24.03.26.54;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.01.24.03.24.02;	author -;	state -;
branches;
next	1.10;

1.10
date	2012.04.18.02.38.03;	author -;	state -;
branches;
next	1.9;

1.9
date	2012.04.18.02.36.20;	author -;	state -;
branches;
next	1.8;

1.8
date	2012.04.18.02.35.50;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.04.18.02.35.26;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.04.18.02.32.20;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.04.18.02.31.36;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.04.18.02.31.16;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.04.18.02.26.28;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.18.02.09.45;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.18.02.06.26;	author -;	state -;
branches;
next	;


desc
@@


1.20
log
@-
@
text
@// $Id: newtonsqrt.cpp,v 1.19 2014-04-09 18:00:47-07 - - $

//
// Newton's method to extract square root.
//

#include <cmath>
#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <limits>
#include <sstream>
#include <stdexcept>
#include <string>

using namespace std;

const double EPSILON = numeric_limits<double>::epsilon();
const double NOTNUMBER = numeric_limits<double>::quiet_NaN();
const int DIGITS = numeric_limits<double>::digits10 + 6;

bool are_close (double num1, double num2) {
   return fabs (num1 - num2) <= num1 * EPSILON;
}

double from_string (const string &arg) {
   stringstream stream {arg};
   double result{};
   if (stream >> result and stream.eof()) return result;
   return NOTNUMBER;
}


double newton_sqrt (double number) {
   if (number < 0) throw domain_error ("newton_sqrt");
   if (number == 0) return 0;
   if (std::isnan (number) or std::isinf (number)) return number;
   int exponent;
   double fraction = frexp (number, &exponent);
   cout << number << " = "
        << fraction << " * 2 ** " << exponent << endl;
   double guess = ldexp (fraction, exponent / 2);
   double result;
   for (int count = 0;; ++count) {
      cout << "approx(" << count << ") = " << guess << endl;
      result = (number / guess + guess) / 2.0;
      if (are_close (result, guess)) break;
      guess = result;
   }
   return result;
}

int main (int argc, char **argv) {
   cout << setprecision (DIGITS);
   for (int argi = 1; argi < argc; ++argi) {
      string arg = argv[argi];
      double number = from_string (arg);
      cout << endl << "argv[" << argi << "] = \"" << arg << "\" => "
           << number << endl;
      try {
         double value = newton_sqrt (number);
         cout << "sqrt (" << number << ") = " << value << endl;
      }catch (domain_error &error) {
         cout << "domain_error (" << error.what() << ")" << endl;
      }
   }
   return EXIT_SUCCESS;
}

/*
//TEST// valgrind --leak-check=full --show-reachable=yes \
//TEST//       --log-file=newtonsqrt.out.grind \
//TEST//       newtonsqrt 2 10 100 1000 1e6 1e1000 foo \
//TEST//       >newtonsqrt.out 2>&1
//TEST// mkpspdf newtonsqrt.ps newtonsqrt.cpp* newtonsqrt.out*
*/

@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.18 2014-04-09 17:56:34-07 - - $
d37 1
a37 1
   if (std::isnan (fraction) or std::isinf (number)) return number;
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.17 2014-04-09 17:46:48-07 - - $
d18 1
a19 1
const double EPSILON = numeric_limits<double>::epsilon();
d37 1
a41 1
   if (std::isnan (fraction) || std::isinf (fraction)) return NOTNUMBER;
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.16 2014-04-09 17:46:07-07 - - $
d41 1
a41 1
   if (isnan (fraction) || isinf (fraction)) return NOTNUMBER;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.15 2014-04-09 17:45:11-07 - - $
d28 1
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.14 2014-04-09 17:42:56-07 - - $
d41 1
a41 2
   exponent /= 2;
   double guess = ldexp (fraction, exponent);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.13 2013-01-23 19:33:54-08 - - $
a25 6
string to_string (double number) {
   ostringstream result;
   result << number;
   return result.str();
}

d28 2
a29 3
   double result = NOTNUMBER;
   stream >> result;
   return result;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.12 2013-01-23 19:26:54-08 - - $
d20 1
a20 1
const int DIGITS = numeric_limits<double>::digits10;
d29 1
a29 1
   return result.str ();
d33 1
a33 2
   stringstream stream;
   stream << arg;
d39 1
a59 1

d61 1
a61 1
   cout << setprecision (DIGITS + 5);
d71 1
a71 1
         cout << "domain_error (" << error.what () << ")" << endl;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.11 2013-01-23 19:24:02-08 - - $
d42 1
d50 1
a50 1
   double result = 0;
d53 1
a54 1
      result = (number / guess + guess) / 2.0;
d66 2
a67 1
      cout << endl << arg << " => " << number << endl;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.10 2012-04-17 19:38:03-07 - - $
d49 1
a49 1
   double result;
a50 1
      result = (number / guess + guess) / 2.0;
d53 1
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.9 2012-04-17 19:36:20-07 - - $
d23 1
a23 1
   return fabs (num1 - num2) < num1 * EPSILON;
d44 1
a44 1
   cout << "sqrt: " << number << " = "
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.8 2012-04-17 19:35:50-07 - - $
d65 1
a65 1
      cout << endl << arg << "=>" << number << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.7 2012-04-17 19:35:26-07 - - $
d70 1
a70 1
         cout << "domain_error (" + error.what () + ")" << endl;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.6 2012-04-17 19:32:20-07 - - $
d59 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.5 2012-04-17 19:31:36-07 - - $
d62 3
a64 2
      double number = from_string (argv[argi]);
      string value;
d66 2
a67 1
         value = to_string (newton_sqrt (number));
d69 1
a69 1
         value = string ("domain_error (") + error.what () + ")";;
a70 1
      cout << "sqrt (" << number << ") = " << value << endl;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.4 2012-04-17 19:31:16-07 - - $
d46 1
a46 1
   if (isnan (fraction)) return NOTNUMBER;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.3 2012-04-17 19:26:28-07 - - $
d46 1
a46 2
   if (isnan (fraction)) return;
return;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: newtonsqrt.cpp,v 1.1 2012-04-17 19:06:26-07 - - $
a41 1
   double fraction;
d43 1
a43 1
   fraction = frexp (number, &exponent);
d46 2
@


1.2
log
@-
@
text
@d7 1
d11 1
a11 1
#include <numeric_limits>
d13 1
d18 3
a20 1
const double NAN = numeric_limits<double>::quiet_NaN()
d23 1
a23 1
   return fabs (num1 - num2) < num1 * DBL_EPSILON;
d26 1
a26 1
string tostring (double number) {
d32 1
a32 1
double fromstring (const string &arg) {
d34 2
a35 2
   stream << that;
   double result = 0.0/0.0;
d41 1
a41 2
   if (number < 0) throw
                   domain_error ("sqrt (" + tostring (number) + ")");
d60 1
a60 1
   cout << setprecision (DBL_DIG + 1);
d62 1
a62 1
      double number = fromstring (argv[argi]);
d65 1
a65 1
         value = tostring (newton_sqrt (number));
d77 2
a78 1
//TEST//       newtonsqrt 2 10 100 1000 1e6 >newtonsqrt.out 2>&1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: sqrt.cc,v 1.1 2012-04-12 20:34:43-07 - - $
a6 2
#include <cfloat>
#include <cmath>
d10 1
d16 1
a16 1
const double NAN = nan("");
@

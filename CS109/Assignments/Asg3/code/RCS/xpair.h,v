head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2014.06.28.00.39.08;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.25.01.02.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.07.31.00.09.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.07.30.22.46.04;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: xpair.h,v 1.3 2014-04-24 18:02:55-07 - - $

#ifndef __XPAIR_H__
#define __XPAIR_H__

#include <iostream>

using namespace std;

//
// Class xpair works like pair(c++).
//
// The implicitly generated members will work, because they just
// send messages to the first and second fields, respectively.
// Caution:  xpair() does not initialize its fields unless
// First and Second do so with their default ctors.
//

template <typename First, typename Second>
struct xpair {
   First first{};
   Second second{};
   xpair(){}
   xpair (const First& first, const Second& second):
               first(first), second(second) {}
};

template <typename First, typename Second>
ostream& operator<< (ostream& out, const xpair<First,Second>& pair) {
   out << "{" << pair.first << "," << pair.second << "}";
   return out;
}

#endif

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: xpair.h,v 1.2 2013-07-30 17:09:20-07 - - $
d21 3
a23 3
   First first;
   Second second;
   xpair(): first(First()), second(Second()) {}
d30 1
a30 1
   out << "[" << pair.first << "," << pair.second << "]";
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: xpair.h,v 1.1 2013-07-30 15:46:04-07 - - $
d24 1
a24 1
   xpair (const First &first, const Second &second):
d29 1
a29 1
ostream &operator<< (ostream &out, const xpair<First,Second> &pair) {
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: xpair.h,v 1.1 2013-02-12 14:51:41-08 - - $
d6 4
d11 1
a11 1
// Class xpair works like pair(3c++).
d16 1
a16 1
// first_t and second_t do so with their default ctors.
d19 1
a19 1
template <typename first_t, typename second_t>
d21 5
a25 4
   first_t first;
   second_t second;
   xpair: first(first_t()), second(second_t()) {}
   xpair (const first_t &, const second_t &);
d28 5
a32 3
template <typename first_t, typename second_t>
ostream &operator<< (ostream &, const xpair <first_t, second_t> &);

@

head	1.3;
access;
symbols;
locks;
comment	@// @;


1.3
date	2014.05.30.02.20.19;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.04.25.01.14.51;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.07.30.22.46.04;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: trace.cpp,v 1.2 2014-04-24 18:14:51-07 - - $

#include <climits>
#include <iostream>
#include <limits>
#include <vector>

using namespace std;

#include "trace.h"

using boolvec = vector<char>;
boolvec traceflags::flags (UCHAR_MAX + 1, false);
const boolvec trueflags (UCHAR_MAX + 1, true);

void traceflags::setflags (const string& optflags) {
   for (char flag: optflags) {
      if (flag == '@@') {
         flags = trueflags;
      }else {
         flags[flag] = true;
      }
   }
   // Note that TRACE can trace setflags.
   TRACE ('t',  "optflags = " << optflags);
}

//
// getflag -
//    Check to see if a certain flag is on.
//

bool traceflags::getflag (char flag) {
   // Bug alert:
   // Don't TRACE this function or the stack will blow up.
   bool result = flags[flag];
   return result;
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: trace.cpp,v 1.1 2013-07-30 15:46:04-07 - - $
d12 1
a12 1
typedef vector<char> boolvec;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: trace.cpp,v 1.2 2013-02-21 18:17:08-08 - - $
d16 3
a18 5
void traceflags::setflags (const string &optflags) {
   string::const_iterator itor = optflags.begin();
   string::const_iterator end = optflags.end();
   for (; itor != end; ++itor) {
      if (*itor == '@@') {
d21 1
a21 1
         flags[*itor] = true;
@

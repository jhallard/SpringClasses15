head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2014.06.28.00.49.07;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.04.25.01.14.51;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.04.25.01.02.55;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: util.tcc,v 1.2 2014-04-24 18:14:51-07 - - $

#include <sstream>
#include <typeinfo>
using namespace std;

template <typename item_t>
ostream& operator<< (ostream& out, const list<item_t>& vec) {
   bool want_space = false;
   for (const auto& item: vec) {
      if (want_space) cout << " ";
      cout << item;
      want_space = true;
   }
   return out;
}

template <typename Type>
string to_string (const Type& that) {
   ostringstream stream;
   stream << that;
   return stream.str();
}

template <typename Type>
Type from_string (const string& that) {
   stringstream stream;
   stream << that;
   Type result;
   if (not (stream >> result and stream.eof())) {
      throw domain_error (string (typeid (Type).name())
            + " from_string (" + that + ")");
   }
   return result;
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: util.tcc,v 1.1 2014-04-24 18:02:55-07 - - $
d18 2
a19 2
template <typename type_t>
string to_string (const type_t& that) {
d25 2
a26 2
template <typename type_t>
type_t from_string (const string& that) {
d29 3
a31 6
   type_t result;
   if (not (stream >> result   // Can we read type from string?
        and stream >> std::ws  // Flush trailing white space.
        and stream.eof())      // Must now be at end of stream.
   ) {
      throw domain_error (string (typeid (type_t).name())
@


1.1
log
@-
@
text
@d1 5
a5 1
// $Id$
d8 6
a13 9
ostream &operator<< (ostream &out, const list<item_t> &vec) {
   typename list<item_t>::const_iterator itor = vec.begin();
   typename list<item_t>::const_iterator end = vec.end();
   // If the list is empty, do nothing.
   if (itor != end) {
      // Print out the first element without a space.
      out << *itor++;
      // Print out the rest of the elements each preceded by a space.
      while (itor != end) out << " " << *itor++;
d19 1
a19 1
string to_string (const type_t &that) {
d22 1
a22 1
   return stream.str ();
d26 1
a26 1
type_t from_string (const string &that) {
d31 2
a32 2
         && stream >> std::ws  // Flush trailing white space.
         && stream.eof ())     // Must now be at end of stream.
d34 1
a34 1
      throw domain_error (string (typeid (type_t).name ())
@

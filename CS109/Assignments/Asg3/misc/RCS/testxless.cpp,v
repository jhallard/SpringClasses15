head	1.22;
access;
symbols;
locks;
comment	@// @;


1.22
date	2015.02.07.00.22.06;	author -;	state -;
branches;
next	1.21;

1.21
date	2014.04.25.00.42.23;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.04.25.00.42.09;	author -;	state -;
branches;
next	1.19;

1.19
date	2014.04.25.00.39.49;	author -;	state -;
branches;
next	1.18;

1.18
date	2014.04.25.00.22.22;	author -;	state -;
branches;
next	1.17;

1.17
date	2014.04.25.00.05.32;	author -;	state -;
branches;
next	1.16;

1.16
date	2014.04.25.00.04.10;	author -;	state -;
branches;
next	1.15;

1.15
date	2014.04.24.21.25.08;	author -;	state -;
branches;
next	1.14;

1.14
date	2014.04.24.21.24.55;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.04.24.21.24.21;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.04.24.21.22.00;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.04.24.21.21.41;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.04.24.21.21.20;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.07.31.01.21.40;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.07.30.23.30.36;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.07.30.23.30.01;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.07.30.23.28.27;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.07.30.23.28.15;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.07.30.23.28.04;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.07.30.23.25.31;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.07.30.23.24.58;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.07.30.23.24.24;	author -;	state -;
branches;
next	;


desc
@@


1.22
log
@-
@
text
@// $Id: testxless.cpp,v 1.21 2014-04-24 17:42:23-07 - - $

// Example of how to use xless object on a pair of strings.

#include <iomanip>
#include <iostream>
#include <string>

using namespace std;

template <typename Type>
struct xless {
   bool operator() (const Type &left, const Type &right) const {
      return left < right;
   }
};

template <typename Type, class Less=xless<Type>>
void compare (const Type &left, const Type &right) {
   Less less;
   cout << boolalpha;
   bool is_less = less (left, right);
   bool is_equal = not less (left, right) and not less (right, left);
   bool is_greater = not is_less and not is_equal;
   cout << left << " <  " << right << " = " << is_less << endl;
   cout << left << " == " << right << " = " << is_equal << endl;
   cout << left << " >  " << right << " = " << is_greater << endl;
   cout << endl;
}

int main () {
   compare (string ("hello"), string ("world"));
   compare (string ("qwert"), string ("qwert"));
   compare (string ("zxcvb"), string ("asdfg"));
   return 0;
}

//TEST// testxless >testxless.out 2>&1
//TEST// mkpspdf testxless.ps testxless.cpp* testxless.out

@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.20 2014-04-24 17:42:09-07 - - $
d32 3
a34 3
   compare ("hello", "world");
   compare ("qwert", "qwert");
   compare ("zxcvb", "asdfg");
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.17 2014-04-24 17:05:32-07 - - $
d32 3
a34 3
   compare ("hello"), "world");
   compare ("qwert"), "qwert");
   compare ("zxcvb"), "asdfg");
@


1.19
log
@-
@
text
@d21 1
d23 2
a24 1
   cout << boolalpha;
a25 2
   bool is_equal = not less (left, right)
               and not less (right, left);;
d27 1
a27 2
   cout << left << " >  " << right << " = "
        << not (is_less || is_equal) << endl;
d32 3
a34 3
   compare (string ("hello"), string ("world"));
   compare (string ("qwert"), string ("qwert"));
   compare (string ("zxcvb"), string ("asdfg"));
@


1.18
log
@-
@
text
@a18 7
struct xequal {
   bool operator() (const Type &left, const Type &right) const {
      return not Less (left, right) and not Less (right < left);
   }
};

template <typename Type, class Less=xless<Type>>
d24 2
a25 1
   bool is_equal = xequal (left, right);
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.15 2014-04-24 14:25:08-07 - - $
d31 1
a31 1
   bool is_equal = xequal<Type> (left, right);
@


1.16
log
@-
@
text
@d39 3
a41 3
   compare ("hello", "world");
   compare ("qwert", "qwert");
   compare ("zxcvb", "asdfg");
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.14 2014-04-24 14:24:55-07 - - $
d18 1
a18 1
template <typename Type, Less=xless<Type>>
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.13 2014-04-24 14:24:21-07 - - $
d31 1
a31 1
   bool is_equal = equal<Type> (left, right);
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.12 2014-04-24 14:22:00-07 - - $
d25 1
a25 2
template <typename Type, class Less=xless<Type>,
                         class Equal=xequal<Type,Less>>
d31 1
a31 1
   bool is_equal = Equal (left, right);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.11 2014-04-24 14:21:41-07 - - $
d25 2
a26 1
template <typename Type, class Less=xless<Type>>
d32 1
a32 1
   bool is_equal = xequal (left, right);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.10 2014-04-24 14:21:20-07 - - $
d23 1
a23 1
}
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.9 2013-07-30 18:21:40-07 - - $
d18 1
a18 1
template <typename Type, Less=xless<type>>
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.8 2013-07-30 16:30:36-07 - - $
d18 7
d31 1
a31 1
   bool is_equal = not is_less && not less (right, left);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.7 2013-07-30 16:30:01-07 - - $
d11 6
a16 1
#include "../code/xless.h"
a37 1
/*
d39 1
a39 3
//TEST// mkpspdf testxless.ps \
//TEST//     ../code/xless.h testxless.cpp* testxless.out
*/
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.6 2013-07-30 16:28:27-07 - - $
d22 1
a22 1
        << not (is_equal && is_less> << endl;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.5 2013-07-30 16:28:15-07 - - $
d21 3
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.4 2013-07-30 16:28:04-07 - - $
d30 1
d34 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.3 2013-07-30 16:25:31-07 - - $
d20 1
a20 1
   cout << left << " == " << right << " = " << is_less << endl;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.2 2013-07-30 16:24:58-07 - - $
d18 3
a20 1
   cout left << " < " << right << " = " << is_less << endl;
d30 4
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: testxless.cpp,v 1.1 2013-07-30 16:24:24-07 - - $
d13 1
a13 1
template <typename Type, Less=xless<Type>>
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: testxcompare.cpp,v 1.3 2012-04-26 17:41:26-07 - - $
d11 1
a11 1
#include "../xless.h"
@

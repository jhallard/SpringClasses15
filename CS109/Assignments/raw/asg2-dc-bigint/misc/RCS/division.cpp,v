head	1.6;
access;
symbols;
locks;
comment	@// @;


1.6
date	2014.05.30.02.11.29;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.04.18.02.28.37;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.04.18.02.28.22;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.18.02.25.43;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.04.18.02.22.31;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.04.18.02.21.50;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: division.cpp,v 1.5 2014-04-17 19:28:37-07 - - $

#include <cstdlib>
#include <iostream>
#include <stdexcept>

using namespace std;

using ulong = unsigned long;
using uupair = pair<ulong,ulong>;

uupair divide (const ulong &dividend, const ulong &divisor) {
   if (divisor == 0) throw domain_error ("divide(_,0)");
   ulong powerof2 = 1;
   ulong divisor_ = divisor;
   while (divisor_ < dividend) {
      divisor_ *= 2;
      powerof2 *= 2;
   }
   ulong quotient = 0;
   ulong remainder = dividend;
   while (powerof2 > 0) {
      if (divisor_ <= remainder) {
         remainder -= divisor_;
         quotient += powerof2;
      }
      divisor_ /= 2;
      powerof2 /= 2;
   }
   return uupair (quotient, remainder);
}


ostream &operator<< (ostream &out, const uupair &pair) {
   out << pair.first << " R " << pair.second;
   return out;
}

uupair tests[] = {
   {             0L, 1024L},
   {             5L,    7L},
   {           100L,    0L},
   {           100L,   50L},
   {           320L,   20L},
   {           963L,   71L},
   {12345678912345L, 9876L},
};

int main (int argc, char **argv) {
   (void) argc; // warning: unused parameter 'argc'
   (void) argv; // warning: unused parameter 'argv'
   uupair *testend = tests + sizeof tests / sizeof *tests;
   for (uupair *itor = tests; itor < testend; ++itor) {
      ulong dividend = itor->first;
      ulong divisor = itor->second;
      cout << dividend << " / " << divisor << " = ";
      try {
         uupair result = divide (dividend, divisor);
         cout << result;
         uupair tested = uupair (dividend / divisor,
                                 dividend % divisor);
         if (tested != result) {
            cout << ": wrong " << tested;
         }
      }catch (domain_error &error) {
         cout << "domain_error: " << error.what();
      }
      cout << endl;
   }
   return EXIT_SUCCESS;
}

//TEST// ./division 2>&1 >division.output
//TEST// mkpspdf division.ps division.cpp* division.output

@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: division.cpp,v 1.4 2014-04-17 19:28:22-07 - - $
d9 2
a10 2
typedef unsigned long ulong;
typedef pair<ulong,ulong> uupair;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: division.cpp,v 1.3 2014-04-17 19:25:43-07 - - $
a15 1
   SHOW3 (dividend, divisor_, powerof2);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: division.cpp,v 1.2 2014-04-17 19:22:31-07 - - $
d16 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: division.cpp,v 1.1 2014-04-17 19:21:50-07 - - $
a8 3
#define SHOW(A,B) cout << #A << " = " << A << ", " \
                       << #B << " = " << B << endl;

a12 1
   SHOW (dividend, divisor);
d15 3
a17 4
   ulong divisor_copy = divisor;
   SHOW (divisor_copy, powerof2);
   while (divisor_copy < dividend) {
      divisor_copy *= 2;
a18 1
      SHOW (divisor_copy, powerof2);
a21 1
   SHOW (quotient, remainder);
d23 2
a24 2
      if (divisor_copy <= remainder) {
         remainder -= divisor_copy;
d27 1
a27 1
      divisor_copy /= 2;
a28 2
      SHOW (divisor_copy, powerof2);
      SHOW (quotient, remainder);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: divisioncpp.cpp,v 1.6 2013-06-27 13:24:33-07 - - $
d82 2
a83 2
//TEST// ./divisioncpp 2>&1 >divisioncpp.output
//TEST// mkpspdf divisioncpp.ps divisioncpp.cpp* divisioncpp.output
@

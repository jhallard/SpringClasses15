head	1.10;
access;
symbols;
locks;
comment	@// @;


1.10
date	2014.04.09.23.45.33;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.04.09.01.45.09;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.04.09.01.44.41;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.04.09.01.43.33;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.04.09.01.42.02;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.04.09.01.41.30;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.04.09.01.34.00;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.04.09.01.29.12;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.06.27.19.39.10;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.11.03.43.21;	author -;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@// $Id: util.cpp,v 1.9 2014-04-08 18:45:09-07 - - $

#include <cstdlib>
#include <sstream>
using namespace std;

#include "util.h"

ydc_exn::ydc_exn (const string& what): runtime_error (what) {
}

const string octal (long decimal) {
   ostringstream ostring;
   ostring.setf (ios::oct);
   ostring << decimal;
   return ostring.str();
}

string sys_info::execname_; // Must be initialized from main().
int sys_info::status_ = EXIT_SUCCESS;

void sys_info::execname (const string& argv0) {
   execname_ = argv0;
   cout << boolalpha;
   cerr << boolalpha;
   DEBUGF ('Y', "execname = " << execname_);
}

ostream& complain() {
   sys_info::status (EXIT_FAILURE);
   cerr << sys_info::execname() << ": ";
   return cerr;
}

@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: util.cpp,v 1.8 2014-04-08 18:44:41-07 - - $
d19 1
a20 1
string sys_info::execname_; // Must be initialized from main().
a34 10
template <typename item_t>
ostream& operator<< (ostream& out, const vector<item_t>& vec) {
   bool want_space = false;
   for (const auto& elem: vec) {
      out << (want_space ? " " : "") <<elem;
      want_space = true;
   }
   return out;
}

@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: util.cpp,v 1.7 2014-04-08 18:43:33-07 - - $
d20 1
a20 1
string sys_info::execname; // Must be initialized from main().
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: util.cpp,v 1.6 2014-04-08 18:42:02-07 - - $
d19 1
a19 1
int sys_info::exit_status = EXIT_SUCCESS;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: util.cpp,v 1.5 2014-04-08 18:41:30-07 - - $
d16 1
a16 1
   return ostring.str ();
d31 1
a31 1
   cerr << sys_info::get_execname () << ": ";
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: util.cpp,v 1.4 2014-04-08 18:34:00-07 - - $
d30 1
a30 1
   sys_info::set_status (EXIT_FAILURE);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: util.cpp,v 1.3 2014-04-08 18:29:12-07 - - $
a4 1

d22 2
a23 2
void sys_info::set_execname (const string& argv0) {
   execname = argv0;
d26 1
a26 1
   DEBUGF ('Y', "execname = " << execname);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: util.cpp,v 1.2 2013-06-27 12:39:10-07 - - $
d39 1
a39 1
   for (const auto elem: vec) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: util.cpp,v 1.1 2012-04-10 20:43:21-07 - - $
d10 1
a10 1
ydc_exn::ydc_exn (const string &what): runtime_error (what) {
d23 1
a23 1
void sys_info::set_execname (const string &argv0) {
d27 1
a27 1
   TRACE ('Y', "execname = " << execname);
d30 1
a30 1
ostream &complain() {
d37 5
a41 10
ostream &operator<< (ostream &out, const vector<item_t> &vec) {
   typename vector<item_t>::const_iterator itor = vec.begin();
   typename vector<item_t>::const_iterator end = vec.end();

   // If the vector is empty, do nothing.
   if (itor != end) {
      // Print out the first element without a space.
      out << *itor++;
      // Print out the rest of the elements each preceded by a space.
      while (itor != end) out << " " << *itor++;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: util.cc,v 1.1 2011-01-18 22:17:09-08 - - $
d13 1
a13 1
const string octal (int decimal) {
@

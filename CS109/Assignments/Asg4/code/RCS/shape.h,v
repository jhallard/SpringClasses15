head	1.7;
access;
symbols;
locks;
comment	@ * @;


1.7
date	2014.06.05.23.11.09;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.21.22.44.26;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.09.01.32.56;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.08.23.47.56;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.08.23.22.43;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.08.05.28.44;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.07.20.30.34;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: shape.h,v 1.6 2014-05-21 15:44:26-07 - - $

#ifndef __SHAPE_H__
#define __SHAPE_H__

#include <iomanip>
#include <iostream>
#include <memory>
#include <utility>
#include <vector>
using namespace std;

#include "rgbcolor.h"

//
// Shapes constitute a single-inheritance hierarchy, summarized
// here, with the superclass listed first, and subclasses indented
// under their immediate superclass.
//
// shape
//    text
//    ellipse
//       circle
//    polygon
//       rectangle
//          square
//       diamond
//       triangle
//          right_triangle
//          isosceles
//          equilateral
//

class shape;
struct vertex {GLfloat xpos; GLfloat ypos; };
using vertex_list = vector<vertex>;
using shape_ptr = shared_ptr<shape>; 

//
// Abstract base class for all shapes in this system.
//

class shape {
   friend ostream& operator<< (ostream& out, const shape&);
   private:
      shape (const shape&) = delete; // Prevent copying.
      shape& operator= (const shape&) = delete; // Prevent copying.
      shape (shape&&) = delete; // Prevent moving.
      shape& operator= (shape&&) = delete; // Prevent moving.
   protected:
      inline shape(); // Only subclass may instantiate.
   public:
      virtual ~shape() {}
      virtual void draw (const vertex&, const rgbcolor&) const = 0;
      virtual void show (ostream&) const;
};


//
// Class for printing text.
//

class text: public shape {
   protected:
      void* glut_bitmap_font = nullptr;
      // GLUT_BITMAP_8_BY_13
      // GLUT_BITMAP_9_BY_15
      // GLUT_BITMAP_HELVETICA_10
      // GLUT_BITMAP_HELVETICA_12
      // GLUT_BITMAP_HELVETICA_18 
      // GLUT_BITMAP_TIMES_ROMAN_10
      // GLUT_BITMAP_TIMES_ROMAN_24
      string textdata;
   public:
      text (void* glut_bitmap_font, const string& textdata);
      virtual void draw (const vertex&, const rgbcolor&) const override;
      virtual void show (ostream&) const override;
};

//
// Classes for ellipse and circle.
//

class ellipse: public shape {
   protected:
      vertex dimension;
   public:
      ellipse (GLfloat width, GLfloat height);
      virtual void draw (const vertex&, const rgbcolor&) const override;
      virtual void show (ostream&) const override;
};

class circle: public ellipse {
   public:
      circle (GLfloat diameter);
};

//
// Class polygon.
//

class polygon: public shape {
   protected:
      const vertex_list vertices;
   public:
      polygon (const vertex_list& vertices);
      virtual void draw (const vertex&, const rgbcolor&) const override;
      virtual void show (ostream&) const override;
};


//
// Classes rectangle, square, etc.
//

class rectangle: public polygon {
   public:
      rectangle (GLfloat width, GLfloat height);
};

class square: public rectangle {
   public:
      square (GLfloat width);
};

class diamond: public polygon {
   public:
      diamond (const GLfloat width, const GLfloat height);
};

ostream& operator<< (ostream& out, const shape&);

#endif

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: shape.h,v 1.5 2014-05-08 18:32:56-07 - - $
d35 3
a37 3
typedef struct {GLfloat xpos; GLfloat ypos; } vertex;
typedef vector<vertex> vertex_list;
typedef shared_ptr<shape> shape_ptr; 
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: shape.h,v 1.4 2014-05-08 16:47:56-07 - - $
d48 2
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: shape.h,v 1.3 2014-05-08 16:22:43-07 - - $
d56 1
d109 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: shape.h,v 1.2 2014-05-07 22:28:44-07 - - $
a13 1
#include "graphics.h"
d52 1
a52 1
      virtual void draw (const vertex&, rgbcolor) const = 0;
d73 1
a73 1
      virtual void draw (const vertex&, rgbcolor) const override;
d86 1
a86 1
      virtual void draw (const vertex&, rgbcolor) const override;
d104 1
a104 1
      virtual void draw (const vertex&, rgbcolor) const override;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: shape.h,v 1.1 2014-05-07 13:30:34-07 - - $
d13 1
a13 1
#include "colornames.h"
d31 2
a32 3
//          left_triangle
//          isosceles_triangle
//          equilateral_triangle
d86 1
a86 1
      ellipse (const GLfloat& width, const GLfloat& height);
d93 1
a93 1
      circle (const GLfloat& diameter);
d115 1
a115 1
      rectangle (const GLfloat& width, const GLfloat& height);
d120 1
a120 1
      square (const GLfloat& width);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: shape.h,v 1.4 2014-05-05 17:09:28-07 - - $
d13 1
d54 1
a54 1
      virtual void draw (const vertex& location) const = 0;
d75 1
a75 1
      virtual void draw (const vertex&) const override;
d87 2
a88 3
      ellipse (const GLfloat& width, const GLfloat& height,
               const GLfloat& thick);
      virtual void draw (const vertex&) const override;
d94 1
a94 1
      circle (const GLfloat& diameter, const GLfloat& thick);
a103 2
      polygon (const vertex_list& vertices, const GLfloat& thick,
               vertex center);
d105 2
a106 2
      polygon (const vertex_list& vertices, const GLfloat& thick);
      virtual void draw (const vertex&) const override;
d116 1
a116 2
      rectangle (const GLfloat& width, const GLfloat& height,
                 const GLfloat& thick);
d121 1
a121 1
      square (const GLfloat& width, const GLfloat& thick);
@

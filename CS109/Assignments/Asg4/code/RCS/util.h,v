head	1.10;
access;
symbols;
locks;
comment	@ * @;


1.10
date	2015.02.20.00.48.23;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.02.20.00.48.00;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.09.01.32.56;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.08.22.41.33;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.08.21.26.30;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.08.21.25.30;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.03.01.39.21;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.02.03.43.13;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.02.03.15.38;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.02.03.14.06;	author -;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@// $Id: util.h,v 1.9 2015-02-19 16:48:00-08 - - $

//
// util -
//    A utility class to provide various services not conveniently
//    included in other modules.
//

#ifndef __UTIL_H__
#define __UTIL_H__

#include <iostream>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>
using namespace std;

#include "debug.h"

//
// sys_info -
//    Keep track of execname and exit status.  Must be initialized
//    as the first thing done inside main.  Main should call:
//       sys_info::execname (argv[0]);
//    before anything else.
//

class sys_info {
   friend int main (int argc, char** argv);
   private:
      static string execname_;
      static int exit_status_;
      static void execname (const string& argv0);
      sys_info() = delete;
   public:
      static const string& execname();
      static void exit_status (int status);
      static int exit_status();
};

//
// datestring -
//    Return the current date, as printed by date(1).
//

const string datestring();


//
// split -
//    Split a string into a vector<string>..  Any sequence
//    of chars in the delimiter string is used as a separator.  To
//    Split a pathname, use "/".  To split a shell command, use " ".
//

vector<string> split (const string& line, const string& delimiter);

//
// complain -
//    Used for starting error messages.  Sets the exit status to
//    EXIT_FAILURE, writes the program name to cerr, and then
//    returns the cerr ostream.  Example:
//       complain() << filename << ": some problem" << endl;
//

ostream& complain();

//
// syscall_error -
//    Complain about a failed system call.  Argument is the name
//    of the object causing trouble.  The extern errno must contain
//    the reason for the problem.
//

void syscall_error (const string&);

//
// operator<< (vector) -
//    An overloaded template operator which allows vectors to be
//    printed out as a single operator, each element separated from
//    the next with spaces.  The item_t must have an output operator
//    defined for it.
//

template <typename item_t>
ostream& operator<< (ostream& out, const vector<item_t>& vec);


//
// operator<< (pair<iterator,iterator>) -
//    Allow a pair of iterators to be passed in and print all of the
//    values between the begin and end pair.
//

template <typename iterator>
ostream& operator<< (ostream& out, pair<iterator,iterator> range);

//
// string to_string (thing) -
//    Convert anything into a string if it has an ostream<< operator.
//

template <typename type>
string to_string (const type&);

//
// thing from_string (cons string&) -
//    Scan a string for something if it has an istream>> operator.
//

template <typename result_t>
result_t from_string (const string&);

//
// Demangle a C++ class name.
//
template <typename type>
string demangle (const type& object);

#include "util.tcc"
#endif


@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.8 2014-05-08 18:32:56-07 - - $
d35 1
a35 1
      sysinfo() = delete;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.7 2014-05-08 15:41:33-07 - - $
d35 1
a85 1

d89 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.6 2014-05-08 14:26:30-07 - - $
d48 1
d85 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.5 2014-05-08 14:25:30-07 - - $
d77 1
a77 1
// operator<< (list) -
d88 9
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.4 2014-05-02 18:39:21-07 - - $
d19 1
a19 1
#include "trace.h"
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.3 2014-05-01 20:43:13-07 - - $
d78 1
a78 1
//    An overloaded template operator which allows lists to be
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.2 2014-05-01 20:15:38-07 - - $
d25 1
a25 1
//       sys_info::set_execname (argv[0]);
d32 3
a34 3
      static string execname;
      static int exit_status;
      static void set_execname (const string& argv0);
d36 3
a38 3
      static const string& get_execname();
      static void set_exit_status (int status);
      static int get_exit_status();
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.1 2014-05-01 20:14:06-07 - - $
a12 1
#include <list>
d16 1
d50 1
a50 1
//    Split a string into a deque<string>..  Any sequence
d55 1
a55 1
deque<string> split (const string& line, const string& delimiter);
d85 1
a85 1
ostream& operator<< (ostream& out, const deque<item_t>& vec);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: util.h,v 1.6 2013-07-18 15:23:06-07 - - $
d50 1
a50 1
//    Split a string into a list<string>..  Any sequence
d55 1
a55 1
list<string> split (const string& line, const string& delimiter);
d85 1
a85 1
ostream& operator<< (ostream& out, const list<item_t>& vec);
@

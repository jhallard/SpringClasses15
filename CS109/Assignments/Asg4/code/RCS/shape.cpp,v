head	1.7;
access;
symbols;
locks;
comment	@// @;


1.7
date	2014.05.09.01.32.56;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.08.23.47.56;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.08.23.22.43;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.08.22.41.33;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.08.21.25.30;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.08.05.28.44;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.07.20.30.34;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: shape.cpp,v 1.6 2014-05-08 16:47:56-07 - - $

#include <typeinfo>
#include <unordered_map>
using namespace std;

#include "shape.h"
#include "util.h"

static unordered_map<void*,string> fontname {
   {GLUT_BITMAP_8_BY_13       , "Fixed-8x13"    },
   {GLUT_BITMAP_9_BY_15       , "Fixed-9x15"    },
   {GLUT_BITMAP_HELVETICA_10  , "Helvetica-10"  },
   {GLUT_BITMAP_HELVETICA_12  , "Helvetica-12"  },
   {GLUT_BITMAP_HELVETICA_18  , "Helvetica-18"  },
   {GLUT_BITMAP_TIMES_ROMAN_10, "Times-Roman-10"},
   {GLUT_BITMAP_TIMES_ROMAN_24, "Times-Roman-24"},
};

static unordered_map<string,void*> fontcode {
   {"Fixed-8x13"    , GLUT_BITMAP_8_BY_13       },
   {"Fixed-9x15"    , GLUT_BITMAP_9_BY_15       },
   {"Helvetica-10"  , GLUT_BITMAP_HELVETICA_10  },
   {"Helvetica-12"  , GLUT_BITMAP_HELVETICA_12  },
   {"Helvetica-18"  , GLUT_BITMAP_HELVETICA_18  },
   {"Times-Roman-10", GLUT_BITMAP_TIMES_ROMAN_10},
   {"Times-Roman-24", GLUT_BITMAP_TIMES_ROMAN_24},
};

ostream& operator<< (ostream& out, const vertex& where) {
   out << "(" << where.xpos << "," << where.ypos << ")";
   return out;
}

shape::shape() {
   DEBUGF ('c', this);
}

text::text (void* glut_bitmap_font, const string& textdata):
      glut_bitmap_font(glut_bitmap_font), textdata(textdata) {
   DEBUGF ('c', this);
}

ellipse::ellipse (GLfloat width, GLfloat height):
dimension ({width, height}) {
   DEBUGF ('c', this);
}

circle::circle (GLfloat diameter): ellipse (diameter, diameter) {
   DEBUGF ('c', this);
}


polygon::polygon (const vertex_list& vertices): vertices(vertices) {
   DEBUGF ('c', this);
}

rectangle::rectangle (GLfloat width, GLfloat height):
            polygon({}) {
   DEBUGF ('c', this << "(" << width << "," << height << ")");
}

square::square (GLfloat width): rectangle (width, width) {
   DEBUGF ('c', this);
}

void text::draw (const vertex& center, const rgbcolor& color) const {
   DEBUGF ('d', this << "(" << center << "," << color << ")");
}

void ellipse::draw (const vertex& center, const rgbcolor& color) const {
   DEBUGF ('d', this << "(" << center << "," << color << ")");
}

void polygon::draw (const vertex& center, const rgbcolor& color) const {
   DEBUGF ('d', this << "(" << center << "," << color << ")");
}

void shape::show (ostream& out) const {
   out << this << "->" << demangle (*this) << ": ";
}

void text::show (ostream& out) const {
   shape::show (out);
   out << glut_bitmap_font << "(" << fontname[glut_bitmap_font]
       << ") \"" << textdata << "\"";
}

void ellipse::show (ostream& out) const {
   shape::show (out);
   out << "{" << dimension << "}";
}

void polygon::show (ostream& out) const {
   shape::show (out);
   out << "{" << vertices << "}";
}

ostream& operator<< (ostream& out, const shape& obj) {
   obj.show (out);
   return out;
}

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: shape.cpp,v 1.5 2014-05-08 16:22:43-07 - - $
d53 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: shape.cpp,v 1.4 2014-05-08 15:41:33-07 - - $
d66 1
a66 1
void text::draw (const vertex& center, rgbcolor color) const {
d70 1
a70 1
void ellipse::draw (const vertex& center, rgbcolor color) const {
d74 1
a74 1
void polygon::draw (const vertex& center, rgbcolor color) const {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: shape.cpp,v 1.3 2014-05-08 14:25:30-07 - - $
d44 1
a44 1
ellipse::ellipse (const GLfloat& width, const GLfloat& height):
d49 1
a49 1
circle::circle (const GLfloat& diameter): ellipse (diameter, diameter) {
d57 1
a57 1
rectangle::rectangle (const GLfloat& width, const GLfloat& height):
d62 1
a62 1
square::square (const GLfloat& width): rectangle (width, width) {
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: shape.cpp,v 1.2 2014-05-07 22:28:44-07 - - $
a9 6
#define VOIDTHIS reinterpret_cast<const void*>(this)

#define WARNING_UNUSED_PARAMETER(X) \
        cout << "WARNING_UNUSED_PARAMETER(" << #X << ")" << endl; \
        (void) X;

d36 1
a36 1
   DEBUGF ('c', VOIDTHIS);
d41 1
a41 1
   DEBUGF ('c', VOIDTHIS);
d45 2
a46 2
      dimension ({width, height}) {
   DEBUGF ('c', VOIDTHIS);
d50 1
a50 1
   DEBUGF ('c', VOIDTHIS);
d54 1
a54 1
   DEBUGF ('c', VOIDTHIS);
d59 1
a59 3
   WARNING_UNUSED_PARAMETER(width);
   WARNING_UNUSED_PARAMETER(height);
   DEBUGF ('c', VOIDTHIS);
d63 1
a63 1
   DEBUGF ('c', VOIDTHIS);
d67 1
a67 3
   DEBUGF ('d', VOIDTHIS << "(" << center << ")");
   WARNING_UNUSED_PARAMETER(center);
   WARNING_UNUSED_PARAMETER(color);
d71 1
a71 3
   DEBUGF ('d', VOIDTHIS << "(" << center << ")");
   WARNING_UNUSED_PARAMETER(center);
   WARNING_UNUSED_PARAMETER(color);
d75 1
a75 3
   DEBUGF ('d', VOIDTHIS << "(" << center << ")");
   WARNING_UNUSED_PARAMETER(center);
   WARNING_UNUSED_PARAMETER(color);
d79 1
a79 1
   out << VOIDTHIS << "->" << demangle (*this) << ": ";
d90 1
a90 3
   out << "{";
   out << dimension;
   out << "}";
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: shape.cpp,v 1.1 2014-05-07 13:30:34-07 - - $
d42 1
a42 1
   TRACE ('c', VOIDTHIS);
d47 1
a47 1
   TRACE ('c', VOIDTHIS);
d52 1
a52 1
   TRACE ('c', VOIDTHIS);
d56 1
a56 1
   TRACE ('c', VOIDTHIS);
d60 1
a60 1
   TRACE ('c', VOIDTHIS);
d67 1
a67 1
   TRACE ('c', VOIDTHIS);
d71 1
a71 1
   TRACE ('c', VOIDTHIS);
d75 1
a75 1
   TRACE ('d', VOIDTHIS << "(" << center << ")");
d81 1
a81 1
   TRACE ('d', VOIDTHIS << "(" << center << ")");
d87 1
a87 1
   TRACE ('d', VOIDTHIS << "(" << center << ")");
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: shape.cpp,v 1.6 2014-05-02 18:39:21-07 - - $
a49 4
shape::shape(): {
   TRACE ('c', VOIDTHIS);
}

a58 6
polygon::polygon (const vertex_list& vertices) {
   TRACE ('c', VOIDTHIS);
   WARNING_UNUSED_PARAMETER(vertices);
}


d64 3
a66 1
      polygon (vertex_list ({{0, height}, {width, 0}, {0, -height}}) {
d74 1
a74 1
void text::draw (const vertex& center) const {
d77 1
d80 1
a80 1
void ellipse::draw (const vertex& center) const {
d83 1
d86 1
a86 1
void polygon::draw (const vertex& center) const {
d89 1
a101 4
void shape::show (ostream& out) const {
   shape::show (out);
}

@

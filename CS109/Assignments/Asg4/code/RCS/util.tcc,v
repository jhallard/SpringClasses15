head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2015.02.20.00.48.00;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.09.01.32.56;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.08.22.41.33;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.06.00.09.28;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.02.03.43.49;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: util.tcc,v 1.4 2014-05-08 18:32:56-07 - - $

template <typename item_t>
ostream& operator<< (ostream& out, const vector<item_t>& vec) {
   bool want_space = false;
   for (const auto& item: vec) {
      if (want_space) cout << " ";
      out << item;
      want_space = true;
   }
   return out;
}

template <typename iterator>
ostream& operator<< (ostream& out, pair<iterator,iterator> range) {
   bool want_space = false;
   while (range.first != range.second) {
      if (want_space) cout << " ";
      out << *range.first++;
      want_space = true;
   }
   return out;
}


template <typename item_t>
string to_string (const item_t& that) {
   ostringstream stream;
   stream << that;
   return stream.str();
}

template <typename item_t>
item_t from_string (const string& that) {
   stringstream stream;
   stream << that;
   item_t result;
   if (not (stream >> result and stream.eof())) {
      throw range_error (demangle (result)
            + " from_string (" + that + ")");
   }
   return result;
}


//
// Demangle a class name.
// For __GNUC__, use __cxa_demangle.
// As a fallback, just use typeid.name()
// The functions are fully specified in this header as non-inline
// functions in order to avoid the need for explicit instantiation.
// http://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html
//
#ifdef __GNUC__

#include <cxxabi.h>

template <typename type>
string demangle (const type& object) {
   const char* const name = typeid (object).name();
   int status; 
   char* demangled = abi::__cxa_demangle (name, NULL, 0,& status);
   if (status != 0 or demangled == NULL) return name;
   string result = demangled;
   free (demangled);
   return result; 
}

#else

template <typename type>
string demangle (const type& object) {
   return typeid (object).name();
}

#endif

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: util.tcc,v 1.3 2014-05-08 15:41:33-07 - - $
d19 1
a19 1
      out << *range.first;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: util.tcc,v 1.2 2014-05-05 17:09:28-07 - - $
d45 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: util.tcc,v 1.1 2014-05-01 20:43:49-07 - - $
d5 5
a9 6
   bool printed_one = false;
   for (typename vector<item_t>::const_iterator itor = vec.begin();
        itor != vec.end(); ++itor) {
      if (printed_one) cout << " ";
      out << *itor;
      printed_one = true;
d14 12
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d27 1
a27 4
   bool converted = stream >> result  // Is string is a valid item_t?
                and stream >> std::ws // Flush trailing white space.
                and stream.eof();     // Must now be at end of stream.
   if (! converted) {
@

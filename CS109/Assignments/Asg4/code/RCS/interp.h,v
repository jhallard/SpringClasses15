head	1.14;
access;
symbols;
locks;
comment	@ * @;


1.14
date	2015.02.20.00.48.00;	author -;	state -;
branches;
next	1.13;

1.13
date	2014.07.23.03.03.19;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.06.05.23.13.35;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.06.05.23.11.09;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.08.23.29.02;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.08.22.41.33;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.08.21.26.30;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.08.21.25.30;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.07.20.30.34;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.03.01.39.21;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.02.03.54.16;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.02.03.43.13;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.02.03.15.38;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.02.03.14.06;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// $Id: interp.h,v 1.13 2014-07-22 20:03:19-07 - - $

#ifndef __INTERP_H__
#define __INTERP_H__

#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

#include "debug.h"
#include "graphics.h"
#include "shape.h"

class interpreter {
   public:
      using shape_map = unordered_map<string,shape_ptr>;
      using parameters = vector<string>;
      using param = parameters::const_iterator;
      using range = pair<param,param>;
      void interpret (const parameters&);
      interpreter() {}
      ~interpreter();

   private:
      interpreter (const interpreter&) = delete;
      interpreter& operator= (const interpreter&) = delete;

      using interpreterfn = void (*) (param, param);
      using factoryfn = shape_ptr (*) (param, param);

      static unordered_map<string,interpreterfn> interp_map;
      static unordered_map<string,factoryfn> factory_map;
      static shape_map objmap;

      static void do_define (param begin, param end);
      static void do_draw (param begin, param end);

      static shape_ptr make_shape (param begin, param end);
      static shape_ptr make_text (param begin, param end);
      static shape_ptr make_ellipse (param begin, param end);
      static shape_ptr make_circle (param begin, param end);
      static shape_ptr make_polygon (param begin, param end);
      static shape_ptr make_rectangle (param begin, param end);
      static shape_ptr make_square (param begin, param end);
      static shape_ptr make_line (param begin, param end);
};

#endif

@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.12 2014-06-05 16:13:35-07 - - $
d7 1
a7 1
#include <map>
d17 1
a17 1
      using shape_map = map<string,shape_ptr>;
d32 2
a33 2
      static map<string,interpreterfn> interp_map;
      static map<string,factoryfn> factory_map;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.11 2014-06-05 16:11:09-07 - - $
d29 2
a30 2
      using interpreterfn = void (interpreter::*) (param, param);
      using factoryfn = shape_ptr (interpreter::*) (param, param);
d34 1
a34 1
      shape_map objmap;
d36 2
a37 2
      void do_define (param begin, param end);
      void do_draw (param begin, param end);
d39 8
a46 8
      shape_ptr make_shape (param begin, param end);
      shape_ptr make_text (param begin, param end);
      shape_ptr make_ellipse (param begin, param end);
      shape_ptr make_circle (param begin, param end);
      shape_ptr make_polygon (param begin, param end);
      shape_ptr make_rectangle (param begin, param end);
      shape_ptr make_square (param begin, param end);
      shape_ptr make_line (param begin, param end);
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.10 2014-05-08 16:29:02-07 - - $
d29 2
a30 4
      typedef void (interpreter::*interpreterfn)
                   (param begin, param end);
      typedef shape_ptr (interpreter::*factoryfn)
                        (param begin, param end);
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.9 2014-05-08 15:41:33-07 - - $
d17 4
a20 4
      typedef map <string, shape_ptr> shape_map;
      typedef vector<string> parameters;
      typedef parameters::const_iterator param;
      typedef pair<param,param> range;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.8 2014-05-08 14:26:30-07 - - $
d11 1
a13 1
#include "debug.h"
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.7 2014-05-08 14:25:30-07 - - $
d20 1
d29 4
a32 2
      typedef void (interpreter::*interpreterfn) (param begin, param end);
      typedef shape_ptr (interpreter::*factoryfn) (param begin, param end);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.6 2014-05-07 13:30:34-07 - - $
d13 1
a13 1
#include "trace.h"
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.5 2014-05-02 18:39:21-07 - - $
d20 1
a20 1
      void interpret (parameters&);
d28 2
a29 2
      typedef void (interpreter::*interpreterfn) (param&, param&);
      typedef shape_ptr (interpreter::*factoryfn) (param&, param&);
d35 2
a36 2
      void do_define (param&, param&);
      void do_draw (param&, param&);
d38 8
a45 8
      shape_ptr make_shape (param&, param&);
      shape_ptr make_text (param&, param&);
      shape_ptr make_ellipse (param&, param&);
      shape_ptr make_circle (param&, param&);
      shape_ptr make_polygon (param&, param&);
      shape_ptr make_rectangle (param&, param&);
      shape_ptr make_square (param&, param&);
      shape_ptr make_line (param&, param&);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.4 2014-05-01 20:54:16-07 - - $
d12 1
a12 1
#include "object.h"
d17 1
a17 1
      typedef map <string, object_ptr> object_map;
d29 1
a29 1
      typedef object_ptr (interpreter::*factoryfn) (param&, param&);
d33 1
a33 1
      object_map objmap;
d38 8
a45 8
      object_ptr make_object (param&, param&);
      object_ptr make_text (param&, param&);
      object_ptr make_ellipse (param&, param&);
      object_ptr make_circle (param&, param&);
      object_ptr make_polygon (param&, param&);
      object_ptr make_rectangle (param&, param&);
      object_ptr make_square (param&, param&);
      object_ptr make_line (param&, param&);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.3 2014-05-01 20:43:13-07 - - $
a5 3
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
d11 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.2 2014-05-01 20:15:38-07 - - $
d23 1
a23 1
      interpreter();
a38 1
      void do_dump (param&, param&);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.1 2014-05-01 20:14:06-07 - - $
d11 1
d20 2
a21 2
      typedef deque<string> parameters;
      interpreter (const string&);
d23 1
a26 1
      interpreter() = delete;
d30 2
a31 4
      typedef void (interpreter::*interpreterfn) (parameters&);
      typedef object_ptr (interpreter::*factoryfn) (parameters&);
      typedef map <string, interpreterfn> interp_map_t;
      typedef map <string, factoryfn> factory_map_t;
d33 2
a34 2
      static interp_map_t interp_map;
      static factory_map_t factory_map;
a35 1
      string infilename;
d37 12
a48 12
      void do_define (parameters&);
      void do_draw (parameters&);
      void do_dump (parameters&);

      object_ptr make_object (parameters&);
      object_ptr make_text (parameters&);
      object_ptr make_ellipse (parameters&);
      object_ptr make_circle (parameters&);
      object_ptr make_polygon (parameters&);
      object_ptr make_rectangle (parameters&);
      object_ptr make_square (parameters&);
      object_ptr make_line (parameters&);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: interp.h,v 1.11 2013-07-22 13:54:20-07 - - $
d19 1
a19 1
      typedef list<string> parameters;
@

head	1.5;
access;
symbols;
locks;
comment	@// @;


1.5
date	2014.05.08.01.05.15;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.08.01.04.48;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.08.01.03.54;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.08.01.03.07;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.08.01.02.55;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: ellipse.cpp,v 1.4 2014-05-07 18:04:48-07 - - $

#include <cmath>
#include <iostream>
#include <string>
using namespace std;

#include <GL/freeglut.h>
#include <libgen.h>

typedef unsigned char uchar;

// Characteristics of the window.
struct window {
   string name;
   int width {256};
   int height {192};
} window;

const uchar GREEN[] = {0x00, 0xFF, 0x00};
const uchar RED[] = {0xFF, 0x00, 0x00};

void draw_ellipse (int kind, const uchar* color) {
   glBegin (kind);
   glColor3ubv (color);
   const float delta = 2 * M_PI / 32;
   for (float theta = 0; theta < 2 * M_PI; theta += delta) {
      float xpos = window.width / 3 * cos (theta) + window.width / 2;
      float ypos = window.height / 3 * sin (theta) + window.height / 2;
      glVertex2f (xpos, ypos);
   }
   glEnd();
}

// Called by glutMainLoop to display window contents.
void display() {
   cout << __func__ << "()" << endl;
   glClearColor (0.25, 0.25, 0.25, 1.0);
   glClear (GL_COLOR_BUFFER_BIT);
   glLineWidth (5);
   draw_ellipse (GL_POLYGON, GREEN);
   draw_ellipse (GL_LINE_LOOP, RED);
   glutSwapBuffers();
}


void reshape (int width, int height) {
   cout << __func__ << "(" << width << "," << height << ")" << endl;
   window.width = width;
   window.height = height;
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity();
   glOrtho (0, window.width, 0, window.height, -1, +1);
   glMatrixMode (GL_MODELVIEW);
   glViewport (0, 0, window.width, window.height);
   glutPostRedisplay();
}

void close() {
   cout << __func__ << "()" << endl;
}

void entry (int state) {
   cout << __func__ << "(";
   switch (state) {
      case GLUT_LEFT: cout << "GLUT_LEFT"; break;
      case GLUT_ENTERED: cout << "GLUT_ENTERED"; break;
      default: cout << state; break;
   }
   cout << ")" << endl;
}

int main (int argc, char** argv) {
   window.name = basename (argv[0]);
   glutInit (&argc, argv);
   glutInitDisplayMode (GLUT_RGBA | GLUT_DOUBLE);
   glutInitWindowSize (window.width, window.height);
   glutCreateWindow (window.name.c_str());
   glutDisplayFunc (display);
   glutReshapeFunc (reshape);
   glutEntryFunc (entry);
   glutCloseFunc (close);
   glutMainLoop();
   return 0;
}

//TEST// mkpspdf hello-gl.ps hello-gl.cpp*
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: ellipse.cpp,v 1.3 2014-05-07 18:03:54-07 - - $
d26 1
a26 1
   const float delta = 2 * M_PI / 16;
d28 2
a29 2
      float xpos = window.width / 2 * cos (theta) + window.width / 2;
      float ypos = window.height / 2 * sin (theta) + window.height / 2;
d40 1
a40 1
   glLineWidth (3);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: ellipse.cpp,v 1.2 2014-05-07 18:03:07-07 - - $
d40 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: ellipse.cpp,v 1.1 2014-05-07 18:02:55-07 - - $
d38 2
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: hello-gl.cpp,v 1.24 2014-05-07 17:36:39-07 - - $
d3 1
@

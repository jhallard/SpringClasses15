head	1.3;
access;
symbols;
locks;
comment	@// @;


1.3
date	2014.05.09.02.12.32;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.09.02.12.08;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.09.02.11.33;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: rgb-vs-cmy.cpp,v 1.1 2014-05-08 19:11:33-07 - - $

#include <cmath>
#include <iostream>
#include <string>
using namespace std;

#include <GL/freeglut.h>

struct window {
   string name;
   int width {256};
   int height {256};
   bool rgb_on_top;
} window;

void reshape (int width, int height) {
   cout << __func__ << "(" << width << "," << height << ")" << endl;
   window.width = width;
   window.height = height;
   glMatrixMode (GL_PROJECTION);
   glLoadIdentity();
   gluOrtho2D (0, window.width, 0, window.height);
   glMatrixMode (GL_MODELVIEW);
   glViewport (0, 0, window.width, window.height);
   glClearColor (0.25, 0.25, 0.25, 1.0);
   glutPostRedisplay();
}

void draw_rgb() {
   float width = window.width * 0.75
   float height = sqrt (0.75 width);
   glColor3f (1, 0, 0);
   glVertex2f (window.width / 2.0, height + window.height / 8.0);
   glColor3f (0, 1, 0);
   glVertex2F (window.width / 8.0 + width, window.height / 8.0);
   glColor3f (0, 0, 1);
   glVertex2F (window.width / 8.0, window.height / 8.0);
}

void draw_cmy() {
}

void display() {
   glClear (GL_COLOR_BUFFER_BIT);
   if (window.rgb_on_top) {
      draw_cmy();
      draw_rgb();
   }else {
      draw_cmy();
      draw_rgb();
   }
   glutSwapBuffers();
}

int main (int argc, char** argv) {
   window.name = basename (argv[0]);
   glutInit (&argc, argv);
   glutInitDisplayMode (GLUT_RGBA | GLUT_DOUBLE);
   glutInitWindowSize (window.width, window.height);
   glutInitWindowPosition (64, 64);
   glutCreateWindow (window.name.c_str());
   glutReshapeFunc (reshape);
   glutDisplayFunc (display);
   glutMainLoop();
   return 0;
}
@


1.2
log
@-
@
text
@d4 1
@


1.1
log
@-
@
text
@d1 5
a5 1
// $Id$
a7 1
#include <cmath>
@

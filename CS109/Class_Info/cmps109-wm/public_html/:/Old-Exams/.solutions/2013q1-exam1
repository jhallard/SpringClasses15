$Id: 2013q1-test1,v 1.2 2013-01-31 15:06:59-08 - - $
Answers to 2013q2-test1, page 1

________________________________________________________________________
Question 1.

typedef vector<string>::const_iterator citer;
typedef bool (*isgood) (const string &);
list<string> filter (const citer &begin, const citer &end, isgood p) {
   list<string> result;
   for (citer itor = begin; itor != end; ++itor) {
      if (isgood (*itor)) result.push_back (*itor);
   }
   return result;
}


________________________________________________________________________
Question 2.

class queue {
   private:
      struct node {
         int value;
         node *next;
      };
      node *head;
      node *tail;
   public:
      friend ostream &operator<< (ostream &, const queue &);
      void push_back (const int &); // for int, ok to just have int
      void pop_front ();
      int font ();
      queue ();
      queue (const queue &);
      queue &operator+ (const queue &);
      ~queue ();
};
ostream &operator<< (ostream &, const queue &);

(a) all of the private section above. // 2 pts
(b) both operator<< definitions // 2 pts
(c) pop_front, front, push_back above // 2 pts
(d) def ctor, copy ctor, op+, dtor // 2 pts


Answers to 2013q2-test1, page 2

________________________________________________________________________
Question 3.

typedef double (*mathfn) (double);
map<string, mathfn> fnmap;
map["log"] = log;
map["sqrt"] = sqrt;
map["sin"] = sin;
Alternately:  map.at["log"] = log;, etc...
Alternately:  map.insert (pair<string,mathfn>("log",log)); ... etc...

________________________________________________________________________
Question 4.

void queue::push_back (const int &n) {
   node *tmp = new node();
   tmp->value = n;
   tmp->next = NULL; // or 0 or nullptr
   if (head == NULL) head = tmp;
                else tail->link = tmp;
   tail = t;
}

________________________________________________________________________
Question 5.

vector<string>::iterator least (
   vector<string>::const_iterator begin,
   vector<string>::const_iterator end)
{
   if (begin == end) return end;
   vector<string>::const_iterator itor = begin; // OK to use auto.
   vector<string>::const_iterator small = begin;
   while (++itor != end) {
      if (*itor < *small) small = itor;
   }
   return small;
}


________________________________________________________________________
Question 6.

int main (int argc, char **argv) {
   vector<string> argvec;
   for (char **p = argv + 1; p != argv + argc; ++p)
      argvec.push_back (*p);
   // or the more usual 
   for (int i = 1; i < argc; ++i) argvec.push_back (argv[i]);


Answers to 2013q2-test1, page 3

 1.    (B) i != c.end()

 2.    (D) v[10]

 3.    (A) ++i

 4.    (A) foo (const foo &);

 5.    (B) $ O ( log sub 2 n ) $

 6.    (C) foo (const bar &y): x (y) {}

 7.    (B) explicit

 8.    (B) n - p

 9.    (D) void f (const foo_t &);

10.    (A) ~foo(){}

11.    (A) Edsger Dijkstra


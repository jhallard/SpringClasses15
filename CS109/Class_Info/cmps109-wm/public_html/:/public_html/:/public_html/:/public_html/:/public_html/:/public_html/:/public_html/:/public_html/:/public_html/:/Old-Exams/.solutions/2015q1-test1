$Id: 2015q1-test1,v 1.7 2015-02-04 14:13:33-08 - - $
Answers to 2015q1-test1, page 1

________________________________________________________________________
Question 1.

#include <iostream>
using namespace std;
int main (int argc, char** argv) {
   if (argc != 1) {
      cerr << "Usage: hello" << endl;
      return 1;
   }
   cout << "Hello, World!" << endl;
   return 0;
}

________________________________________________________________________
Question 2.

#ifndef __QUEUE_H__
#define __QUEUE_H__
#include <deque>
#include <string>
class queue { // OK if using namespace std; but did not use std:: below.
   private:
      std::deque<std::string> deq;
   public:
      void push_back (const std::string&);
      void pop_front();
      std::string& front() const;
      bool empty() const;
};
#endif

________________________________________________________________________
Question 3.

ostream& operator<< (ostream& out, const queue& que) {
   string space = "";
   for (const auto& elt: que) {
      out << space << elt;
      space = " ";
   }
   return out;
}

________________________________________________________________________
Question 4.

ostream& operator<< (ostream& out, const bigint& big) {
   // IMPORTANT:  must be reverse iterator; other equivalent code OK
   for (auto it& = big.crbegin(); it != crend(); ++it) {
      cout << static_cast<unsigned> (*it);
   }
}


Answers to 2015q1-test1, page 2

________________________________________________________________________
Question 5.

using iter = vector<string>::const_iterator;
using isgood = bool (*) (const string&);
list<string> filter (iter begin, iter end, isgood p) {
   list<string> out;
   while (begin != end) if (p(*begin)) out.push_back (*begin);
}

________________________________________________________________________
Question 6.

class base {
   public:
   virtual size_t value() = 0;
};
class zero: public base {
   public:
   virtual size_t value() override { return 0; }
};
class str: public base {
   string s;
   public:
   virtual size_t value() override { return s.size(); }
};

________________________________________________________________________
Question 7.

template <typename Iter>
void reverse (Iter begin, Iter end) {
   while (begin != end && begin != --end) {
      swap (*begin, *end);
      ++begin;
   }
}
// auto t = *begin; *begin = *end; *end = t; // alternate to swap.
// Can also declare t as:      decltype(*begin) t = *begin;

________________________________________________________________________
Question 8.

void canonicalize (bigint& big) {
   while (big.size() > 0 and big.back() == 0) big.pop_back();
}


Answers to 2015q1-test1, page 3

 1.    (C) dereferencing a null pointer

 2.    (C) s < t

 3.    (D) vector<string> vs (&argv[1], &argv[argc]);

 4.    (D) using vs = vector<string>;

 5.    (D) using namespace std;

 6.    ERROR IN QUESTION.  ACCEPT ANY ANSWER.
       Also accept a Z answer as a CORRECT answer.
       (answer should be (D), but that does not CHANGE i.)

 7.    (D) nullptr

 8.    (B) shared_ptr

 9.    (B) inheritance

10.    (C) operator<<

11.    (D) vector

12.    (D) red-black tree


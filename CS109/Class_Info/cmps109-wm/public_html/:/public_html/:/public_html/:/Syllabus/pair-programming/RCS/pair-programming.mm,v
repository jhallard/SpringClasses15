head	1.21;
access;
symbols;
locks;
comment	@.\" @;


1.21
date	2014.01.04.01.11.48;	author -;	state -;
branches;
next	1.20;

1.20
date	2014.01.04.01.07.50;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.03.23.04.12.25;	author -;	state -;
branches;
next	1.18;

1.18
date	2012.09.12.01.21.04;	author -;	state -;
branches;
next	1.17;

1.17
date	2012.09.11.22.37.32;	author -;	state -;
branches;
next	1.16;

1.16
date	2012.01.06.02.04.44;	author -;	state -;
branches;
next	1.15;

1.15
date	2011.08.23.22.46.57;	author -;	state -;
branches;
next	1.14;

1.14
date	2011.08.23.22.41.41;	author -;	state -;
branches;
next	1.13;

1.13
date	2011.08.22.21.22.25;	author -;	state -;
branches;
next	1.12;

1.12
date	2011.08.22.21.20.44;	author -;	state -;
branches;
next	1.11;

1.11
date	2011.08.22.21.20.18;	author -;	state -;
branches;
next	1.10;

1.10
date	2011.08.22.20.12.43;	author -;	state -;
branches;
next	1.9;

1.9
date	2011.08.22.20.08.24;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.08.22.20.08.00;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.08.22.20.07.01;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.08.22.20.04.45;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.03.24.01.51.13;	author -;	state -;
branches;
next	1.4;

1.4
date	2010.12.10.02.47.47;	author -;	state -;
branches;
next	1.3;

1.3
date	2010.12.10.02.45.59;	author -;	state -;
branches;
next	1.2;

1.2
date	2010.03.24.22.36.59;	author -;	state -;
branches;
next	1.1;

1.1
date	2010.03.24.22.36.51;	author -;	state -;
branches;
next	;


desc
@@


1.21
log
@-
@
text
@.so Tmac.mm-etc
.if t .Newcentury-fonts
.TITLE "Pair Programming"
.RCS "$Id: pair-programming.mm,v 1.20 2014-01-03 17:07:50-08 - - $"
.PWD
.URL
.INITR* \n[.F]
.SIZE 12 14
.GETST* README Figure:README
.GETST* SCORE.pair Figure:SCORE.pair
.H 1 "Pair Programming"
Pair programming is a software development technique in which two
programmers work together at one keyboard.
One types in code while the other reviews each line of code as it's
typed in.
The person typing is called the
.E= driver .
The person reviewing the code is called the
.E= observer
or
.E= navigator .
The two programmers switch roles frequently (possibly every 30 minutes).
.P
While reviewing,
the observer also considers the strategic direction of the work,
coming up with ideas for improvements and likely future problems to
address.
This frees the driver to focus all of his or her attention on the
``tactical'' aspects of completing the current task, using the observer
as a safety net and guide.
.P
Some benefits of pair programming are\(::
design quality,
learning and training,
overvoming difficult problems.
You have another head to bounce problems off of without cheating.
Some drawbacks are\(::
work preferences,
difficulties in scheduling meetings,
working with an uncooperative partner.
.H 1 "Guidelines"
If you wish to do so,
you may use pair programming to develop your programs.
Following are some guidelines\(::
.ALX a ()
.LI
Pair programming is not compulsory.
You may choose a pair partner,
or you may work independently.
.LI
Before choosing a partner,
interview each other to verify that he or she has the necessary
knowledge and that your levels of accomplishment are roughlly the
same.
An A+ student will generally prefer to work with another A+ student,
but will not get a lot of help from a C\- student.
You are entirely responsible for you choice of partner,
or for you choice of working alone.
.LI
Spend 75% of your development time working together at the same
workstation.
.LI
After working alone each partner should review each line added by
the other partner.
Make use of
.V= diff (1)
or
.V= rcsdiff (1)
to check up on changes between various versions.
.LI
Alternate between driving and observing approximately after
every 30 minutes of programming time.
.LI
One partner submits the code and the other watches to verify that
the correct code has been submitted.
You might make use of the script
.V= testsubmit .
.LE
.DF L
.B1
.SP
.ft CR
.nf
.eo
.pso cat -n README | expand | sed 's/^/   /'
.ec
.fi
.ft R
.SP
.B2
.FG "\f[B]Pair programming \f[CB]README\f[P]" "" 0 README
.DE
.DF L
.B1
.SP
.ft CR
.nf
.eo
.pso cat -n SCORE.pair | expand | sed 's/^/   /'
.ec
.fi
.ft R
.SP
.B2
.FG "\f[CB]SCORE.pair\f[R]" "" 0 SCORE.pair
.SP
.DE
.H 1 "Requirements"
In addition to the requirements for students working alone,
pair programming teams have a few additional requirements.
.ALX a ()
.LI
Both partners must submit a
.V= README
and a
.V= PARTNER
file, but only one partner should submit the code.
.LI
Both partners name and username must appear in a comment at or
near to top of
.E= every
file submitted,
except for the 
.V= PARTNER
file.
.LI
If both partners have submitted the project,
then both partners must state in their
.V= README
which of the submissions is to be graded.
Only one partner's work will be graded.
.LI
The
.V= README
submitted by each partner must be the same and must agree.  See
Figure \*[Figure:README] for a sample of what it should look
like.
Substitute your names for Ada and Charles.
After the required notes shown in Figure \*[Figure:README]
that the grader should read before grading your work.
The line numbers are not actually present in the file\(;;
they are generated by this text formatter.
.LI
The 
.V= PARTNER
file must contain one single word, namely the partner's username.
So Ada should submit a 
.V= PARTNER
file containing the word
.V= cbabbage
and Charles should submit a 
.V= PARTNER
file containg the word
.V= abyron .
This is most easily done from the command line rather than using
an editor.
Ada creates her 
.V= PARTNER
file with the command
.VCODE* 1 "echo cbabbage >PARTNER"
Charles creates his
.V= PARTNER
file with the command
.VCODE* 1 "echo abyron >PARTNER"
Use the script
.V= bin/partnercheck
to verify correctness.
Obviously these files can not be kept in the common working directory.
The
.V= PARTNER
file is used to match partners and automatically enter the score
into both partners' grade file line items.
.LI
.E= "Common error\(::"
Note that the 
.V= PARTNER
file must contain your CruzID and a new line character,
and nothing else \[em]
not a personal name, not an entire email address.
It is not read by the grader \[em]
it is read by a script that matches partners.
.LI
The
.V= partnercheck
script verifies the validity of the
.V= PARTNER
file.
Make sure that the directory
.V= /afs/cats.ucsc.edu/courses/cmps012b-wm/bin
is in your
.V= \[Do]PATH .
.LI
If you and your partner come up with irreconcilable differences
and can no longer work together, 
explain this clearly in the
.V= README ,
each separately,
and do not work together again.
Each should then submit work separately.
.LI
In the case of breakup,
do not submit a
.V= PARTNER
file.
Since you can not delete a file once submitted,
if you have already submitted on, resubmit a
.V= PARTNER 
file with zero bytes in it.
This can be created via\(::
.VCODE* 1 "cp /dev/null PARTNER"
.LI
Pair programming code will be graded in the usual way by the grader,
but additional points will be deducted for each of the following\(::
.ALX i ()
.LI
Both partners' names and usernames were not in a comment at or near
the top of each file submitted.
.LI
The
.V= README
file did not contain the required information.
.LI
The
.V= PARTNER
file was not exactly correctly formatted.
.LI
In the case of a team breakup, the reasons were not documented in the
.V= README .
.LE
.LI
.E= "``But I thought that my partner submitted the code.''"
That is absolutely not an acceptable excuse.
When you are doing pair programming both partners are sitting
together at the same workstation and it is the observer's duty
to verify that the driver actually did submit the correct version
of the code.
.LI
Look at the file
.V= SCORE.pair ,
shown in Figure \*[Figure:SCORE.pair],
which the grader will fill in along with the
.V= SCORE
file.
Make sure to verify that you have done what is required.
.LE
.H 1 "Cheating"
Doing pair programming and not acknowledging it is
.E= "academic misconduct" .
See the syllabus for penalties.
Pair programming is encouraged, so each partner should verify
that both names and usernames are in all files submitted.
If you are ever unsure, resubmit a file.
Only the most recent version of any file will be examined by
the grader.
.H 1 "Sharing files"
When you are working together at the same computer,
you will be logged into one or the other's account.
If you are working separately on occasion,
one partner might want to access files in the other partner's
account.
We will assume again that the partners are
.V= abyron
and
.V= cbabbage .
.ALX a ()
.LI
You should keep a common codebase in one or the other's account.
Perhaps use
.V= "fs lq"
to determine who has the most free disk space.
.LI
Say they want to use Ada's account as a code base.
Ada types\(::
.ALX i ()
.LI
Create a shared directory.
.VCODE* 1 "mkdir $HOME/shared"
.LI
Allow Charles to list the home directory.
.VCODE* 1 "fs sa $HOME cbabbage l"
.LI
Make sure only Ada can access the shared directory.
This deletes any previous ACLs that might be inappropriate.
.VCODE* 1 "fs sa $HOME/shared abyron all -clear"
.LI
Also allow Babbage to access this directory.
.VCODE* 1 "fs sa $HOME/shared cbabbage write"
.LI
The newly created working directory inherits the ACL from
.V= shared .
.VCODE* 1 "mkdir $HOME/shared/cmps012a"
.LE
.LI
You should make use of a code archival system such as
RCS, CVS, or SVN.
Or you can just make backup copies using
.V= cp .
.LI
Each partner should regularly make a recursive copy of the
common code base,
just in case one partner deletes everything,
and so that each has copies of the code after the end of the quarter,
when Byron will likely remove Babbage's ACL.
.ALX i ()
.LI
Type the command
.V= pwd
in the directory where you have set up your shared code.
.LI
Make a symbolic link from your private directory to the shared code.
In your private directory, type
.ds LINE \[em]\[em]\[em]\[em]
.VCODE* 1 "ln -s /afs/cats.ucsc.edu/users/\*[LINE] codebase"
Note that the middle operand has a line in it indicating
that you should actually replace it with the exact output of
.V= pwd
from the shared directory.
.LI
In order to quickly get from anywhere to the shared code base,
put alias commands in your shell startup file.
If you use
.V= bash ,
add the following line to your
.V= \&.bashrc \(::
.VCODE* 1 "alias cdp=\[Dq]cd /afs/cats.ucsc.edu/users/\*[LINE]\[Dq]"
If you use
.V= csh
or
.V= tcsh ,
add the following line to your 
.V= \&.cshrc \(::
.VCODE* 1 "alias cdp cd /afs/cats.ucsc.edu/users/\*[LINE]
.LE
.LE
.H 1 "References"
You might want to look at some of the following references\(::
.ALX a ()
.LI
The Wikipedia has a description of pair programming.
.VCODE* 0 http://en.wikipedia.org/wiki/Pair_programming
.LI
Charlie McDowell also has a collection of references to pair
programming.
.ft CB
.ds ROOT http://www.soe.ucsc.edu/classes/cmps012a/Fall08/
\*[ROOT]/supplements/pairProgramming.html
.ft P
.LI
UCSC ITS has a description of AFS and access control lists,
which you need to understand.
.VCODE* 0 http://its.ucsc.edu/services/web/unix/afs/
.LE
.FINISH
@


1.20
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.19 2013-03-22 21:12:25-07 - - $"
d344 4
a347 2
.ds ROOT http://www.soe.ucsc.edu/classes/cmps012a/Fall08
.VCODE* 0  \*[ROOT]/supplements/pairProgramming.html
@


1.19
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.18 2012-09-11 18:21:04-07 - - $"
d8 1
@


1.18
log
@-
@
text
@d3 2
a4 2
.TITLE "Pair Programming" Fall\~2012
.RCS "$Id: pair-programming.mm,v 1.17 2012-09-11 15:37:32-07 - - $"
@


1.17
log
@-
@
text
@d3 2
a4 2
.TITLE "Pair Programming" Winter\~2012
.RCS "$Id: pair-programming.mm,v 1.16 2012-01-05 18:04:44-08 - - $"
@


1.16
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.15 2011-08-23 15:46:57-07 - - $"
d6 1
@


1.15
log
@-
@
text
@d3 2
a4 2
.TITLE "Pair Programming" Fall\~2011
.RCS "$Id: pair-programming.mm,v 1.14 2011-08-23 15:41:41-07 - - $"
@


1.14
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.13 2011-08-22 14:22:25-07 - - $"
d104 1
a104 1
.SP 2
@


1.13
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.12 2011-08-22 14:20:44-07 - - $"
d104 1
a104 1
.SP
@


1.12
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.11 2011-08-22 14:20:18-07 - - $"
d181 10
@


1.11
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.10 2011-08-22 13:12:43-07 - - $"
d43 1
a43 1
.ALX 1 ()
d109 1
a109 1
.ALX 1 ()
d253 1
a253 1
.ALX 1 ()
d325 1
a325 1
.ALX 1 ()
@


1.10
log
@-
@
text
@d3 2
a4 2
.TITLE "Pair Programming" Spring\~2011
.RCS "$Id: pair-programming.mm,v 1.9 2011-08-22 13:08:24-07 - - $"
@


1.9
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.8 2011-08-22 13:08:00-07 - - $"
d172 9
@


1.8
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.7 2011-08-22 13:07:01-07 - - $"
d139 1
a139 1
The line numbers are not actually present in the file=\(;;
@


1.7
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.6 2011-08-22 13:04:45-07 - - $"
d139 2
@


1.6
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.5 2011-03-23 18:51:13-07 - - $"
d82 3
a84 25
.in 24p

This program was completed using pair programming.
Partner:  Ada Byron (abyron@@ucsc.edu)
Partner:  Charles Babbage (cbabbage@@ucsc.edu)

We acknowledge that each partner in a programming pair should
drive roughly 50% of the time the pair is working together, and
at most 25% of an individual's effort for an assignment should
be spent working alone.  Any work done by a solitary programmer
must be reviewed by the partner.  The object is to work
together, learning from each other, not to divide the work into
two pieces with each partner working on a different piece.

Ada Byron spent       ____ hours working alone.
Charles Babbage spent ____ hours working alone.
We spent              ____ hours working together.
Ada Byron spent       ____ hours driving.
Charles Babbage spent ____ hours driving.

Please grade the work submitted by abyron@@ucsc.edu
and not the work submitted by cbabbage@@ucsc.edu.

\[Do]Id: README,v 1.1 2009-09-23 15:16:45-07 - - \[Do]

@


1.5
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.4 2010-12-09 18:47:47-08 - - $"
d39 1
a39 1
.H 1 "Guidelilnes"
@


1.4
log
@-
@
text
@d3 2
a4 2
.TITLE "Pair Programming" Winter\~2011
.RCS "$Id: pair-programming.mm,v 1.3 2010-12-09 18:45:59-08 - - $"
@


1.3
log
@-
@
text
@d4 1
a4 1
.RCS "$Id: pair-programming.mm,v 1.2 2010-03-24 15:36:59-07 - - $"
d142 4
a145 1
file submitted.
@


1.2
log
@-
@
text
@d3 2
a4 2
.TITLE "Pair Programming" Spring\~2010
.RCS "$Id: pair-programming.mm,v 1.1 2010-03-24 15:36:51-07 - - $"
@


1.1
log
@-
@
text
@d3 2
a4 2
.TITLE "Pair Programming" Winter\~2010
.RCS "$Id: pair-programming.mm,v 1.29 2010-03-24 14:09:42-07 - - $"
@

$Id: 2014q2-test3,v 1.7 2014-06-09 15:29:46-07 - - $
Answers to 2013q3-test3, page 1

________________________________________________________________________
Question 1.

template <typename Keytype, typename Itertype>
Itertype find (Itertype begin, Itertype end, const Keytype& key) {
   for (; begin != end; ++begin) if (*begin == key) break;
   return begin;
}

________________________________________________________________________
Question 2.

template <typename Keytype, typename Itertype>
Itertype find (Itertype begin, Itertype end,
               bool (*pred) (const Keytype& key) {
   for (; begin != end; ++begin) if (pred(*begin)) break;
   return begin;
}

________________________________________________________________________
Question 3.

void draw_circle (float xpos, float ypos,
                  float radius, GLubyte* color) {
   glBegin (GL_POLYGON);
   glColor3ubv (color);
   for (float theat = 0; theta < 2 * M_PI; theta += M_PI / 32) {
      float x = radius * cos (theta) + xpos;
      float y = radius * sin (theta) + ypos;
      glVertex2f (x, y);
   }
   glEnd();
}

________________________________________________________________________
Question 4.

void date_client (string host, in_port_t port) {
   client_socket server (host, port);
   for (;;) {
      char buffer[256];
      int nbytes = server.recv (buffer, sizeof buffer - 1);
      if (nbytes == 0) break;
      buffer[nbytes] = '\0';
      cout << buffer;
   }
}


Answers to 2013q3-test3, page 2

________________________________________________________________________
Question 5.

unumber add (const unumber& u1, const unumber& u2) {
   uchar carry = 0;
   unumber result;
   for (size_t i = 0; i < u1.size() or i < u2.size(); ++i) {
      uchar d1 = i < u1.size() ? u1[i] : 0;
      uchar d2 = i < u1.size() ? u2[i] : 0;
      uchar digit = d1 + d2 + carry;
      carry = digit / 10;
      result.push_back (digit % 10);
   }
   if (carry) result.push_back (carry);
   return result;
}

________________________________________________________________________
Question 6(a).

class shape {
   protected:
      shape(){}
   public:
      const virtual double area() = 0;
      const virtual double circumference() = 0;
      virtual ~shape();
}

________________________________________________________________________
Question 6(b).

class circle: public shape {
   private:
      double radius;
      circle (const circle&) = delete;
      circle& operator= (const circle&) = delete;
   public:
      circle (double r); radius(r) {}
      const virtual double area() override {
                    return 2 * M_PI * radius * radius; }
      const virtual double circumference() override {
                    return 2 * radius * M_PI; }
}

________________________________________________________________________
Question 6(c).

class square: public shape {
   private:
      double width;
   public:
      square (double w): width(w) {}
      const virtual double area() override {
                    return width * width; }
      const virtual double circumference() override {
                    return 4 * width; }
}


Answers to 2013q3-test3, page 3

________________________________________________________________________
Question 7.

void print_data (vec_iterator begin, vec_iterator end) {
   double sumarea {0};
   double sumcirc {0};
   while (begin != end) {
      sumarea += (*begin)->area();
      sumcirc += (*begin)->circumference();
      ++begin;
   }
   cout << sumarea << " " << sumcirc << endl;
}   

________________________________________________________________________
Question 8.

template <typename T>
class queue {
   private:
      struct node {  //(i)
         T value;    //(i)
         node* link; //(i)
      };             //(i)
      node* head {nullptr}; //(ii)
      node* tail {nullptr}; //(ii)
      queue (const queue&) = delete;            //(iii)
      queue& operator= (const queue&) = delete; //(iii)
      T& front();                //(iv)
      const T& front() const;    //(v)
      void pop_front();          //(vi)
      void push_back (const T&); //(vii)



Answers to 2013q3-test3, page 4

 1.     (A) daemon

 2.     (A) compile time.

 3.     (D) vector<T>

 4.     (A) deadlock

 5.     (C) stack

 6.     (B) explicit

 7.     (A) operator()

 8.     (B) i->second

 9.     (C) $0$ to $255$.

10.     (C) connect(2)

11.     (D) red-black tree

12.     (C) shared_ptr<T>


Answers to 2013q3-test3, page 5

 1.     (D) zombie

 2.     (D) $x$ rightward, and $y$ upward.

 3.     (C) sigaction(2)

 4.     (D) e.what()

 5.     (D) int a {4.8};

 6.     (D) not a member of any class.

 7.     (B) T (const T&) = delete;

 8.     (C) #ifndef __FOO_H__

 9.     (A) "a" + "b"

10.     (A) accept(2)

11.     (D) nullptr

12.     (A) T (T&&);

